
MotorBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  000044e0  00004574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800138  00800138  0000464c  2**0
                  ALLOC
  3 .stab         00004770  00000000  00000000  0000464c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a3b  00000000  00000000  00008dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a937  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d5db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e775  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__vector_1>
       8:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__vector_2>
       c:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 1a 	call	0x34cc	; 0x34cc <main>
      8a:	0c 94 6e 22 	jmp	0x44dc	; 0x44dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e0       	ldi	r26, 0x02	; 2
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 22 	jmp	0x446e	; 0x446e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 43 22 	jmp	0x4486	; 0x4486 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 22 	jmp	0x448e	; 0x448e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static uint8 ADC_u8ChainCounter=0u;
static uint8 ADC_u8ChainSize=0u;
static uint8 ADC_u8Chose=0u;
static ADC_Chain_t *pADC_Chain_t=NULL;
void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Reference selection*/
#if ADC_u8REF_VOLT  == AREF_REF
	   CLR_BIT(ADMUX,ADMUX_REFS0);
	   CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_u8REF_VOLT ==  AVCC_REF
   SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
   CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
   /*Enable left adjusting*/
#if ADC_RESOLUTION  == EIGHT_BITS
   /*Enable left adjusting*/
   SET_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION  == TEN_BITS
   CLR_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#else #error wrong ADC_RESOLUTION configuration
#endif
#if ADC_u8INT_ENABLE  ==  DISABLED
   CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#elif ADC_u8INT_ENABLE  ==  ENABLED
   SET_BIT(ADCSRA,ADCSRA_ADIE);
#else #error wrong ADC_u8INT_ENABLE configuration
#endif
   /*configure Prescaler setting*/
   ADCSRA &= PRESCALER_MASK;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
   ADCSRA |= ADC_u8PRESCALER_VAL;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	87 60       	ori	r24, 0x07	; 7
     ba0:	8c 93       	st	X, r24

   /*Enable ADC*/
   SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel,uint16* Copy_pu16Result)

{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
   uint8 Local_u8ErrorState=OK;
     bd0:	1d 82       	std	Y+5, r1	; 0x05

   if(Copy_pu16Result!= NULL)
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	09 f4       	brne	.+2      	; 0xbdc <ADC_u8StartConversionSynch+0x26>
     bda:	69 c0       	rjmp	.+210    	; 0xcae <ADC_u8StartConversionSynch+0xf8>
   {
	   /*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     bdc:	80 91 0a 01 	lds	r24, 0x010A
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ADC_u8StartConversionSynch+0x30>
     be4:	61 c0       	rjmp	.+194    	; 0xca8 <ADC_u8StartConversionSynch+0xf2>
	   {
		   uint32 Local_u32TimeoutCounter= 0u;
     be6:	19 82       	std	Y+1, r1	; 0x01
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	1c 82       	std	Y+4, r1	; 0x04
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     bee:	10 92 0a 01 	sts	0x010A, r1



	   /*configure the analog Channel */
		ADMUX &= CHANNEL_MASK;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	8c 93       	st	X, r24
		ADMUX|=Copy_u8Channel;
     c00:	a7 e2       	ldi	r26, 0x27	; 39
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e2       	ldi	r30, 0x27	; 39
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	90 81       	ld	r25, Z
     c0a:	8e 81       	ldd	r24, Y+6	; 0x06
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <ADC_u8StartConversionSynch+0x80>
		//SET_BIT(ADCSRA,ADCSRA_ADIE);

		/*Wait until ADC conversion complete*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && Local_u32TimeoutCounter < ADC_u32TIMEOUT)
			{
			  Local_u32TimeoutCounter++;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	ab 81       	ldd	r26, Y+3	; 0x03
     c26:	bc 81       	ldd	r27, Y+4	; 0x04
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	a1 1d       	adc	r26, r1
     c2c:	b1 1d       	adc	r27, r1
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	ab 83       	std	Y+3, r26	; 0x03
     c34:	bc 83       	std	Y+4, r27	; 0x04
		/*Enable interrupt flag*/
		//GIE_voidEnable();
		//SET_BIT(ADCSRA,ADCSRA_ADIE);

		/*Wait until ADC conversion complete*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && Local_u32TimeoutCounter < ADC_u32TIMEOUT)
     c36:	e6 e2       	ldi	r30, 0x26	; 38
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 95       	swap	r24
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	61 f4       	brne	.+24     	; 0xc64 <ADC_u8StartConversionSynch+0xae>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	ab 81       	ldd	r26, Y+3	; 0x03
     c52:	bc 81       	ldd	r27, Y+4	; 0x04
     c54:	80 35       	cpi	r24, 0x50	; 80
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	92 07       	cpc	r25, r18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	a2 07       	cpc	r26, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	b2 07       	cpc	r27, r18
     c62:	f0 f2       	brcs	.-68     	; 0xc20 <ADC_u8StartConversionSynch+0x6a>
			{
			  Local_u32TimeoutCounter++;
			}
		if(Local_u32TimeoutCounter>=ADC_u32TIMEOUT)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	ab 81       	ldd	r26, Y+3	; 0x03
     c6a:	bc 81       	ldd	r27, Y+4	; 0x04
     c6c:	80 35       	cpi	r24, 0x50	; 80
     c6e:	23 ec       	ldi	r18, 0xC3	; 195
     c70:	92 07       	cpc	r25, r18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	a2 07       	cpc	r26, r18
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	b2 07       	cpc	r27, r18
     c7a:	18 f0       	brcs	.+6      	; 0xc82 <ADC_u8StartConversionSynch+0xcc>
		{
			/*Loop is broken because flag isn't raised until timeout is passed*/
			Local_u8ErrorState=TIMEOUT_ERR;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	18 c0       	rjmp	.+48     	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
		else
		{
			/*Loop is broken because flag is raised befor timeout is passed*/

		/*Clear The conversion complete flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     c82:	a6 e2       	ldi	r26, 0x26	; 38
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e6 e2       	ldi	r30, 0x26	; 38
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 61       	ori	r24, 0x10	; 16
     c8e:	8c 93       	st	X, r24
		/*Read the data*/
	#if ADC_RESOLUTION == EIGHT_BITS
		*Copy_pu16Result= ADCH;
	#elif ADC_RESOLUTION == TEN_BITS
		*Copy_pu16Result= ADC;
     c90:	e4 e2       	ldi	r30, 0x24	; 36
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	ef 81       	ldd	r30, Y+7	; 0x07
     c9a:	f8 85       	ldd	r31, Y+8	; 0x08
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
	#endif
		/*ADC is now IDLE*/
		ADC_u8BusyFlag = IDLE;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 0a 01 	sts	0x010A, r24
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
		}
     }
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	8d 83       	std	Y+5, r24	; 0x05
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
	   }
   }
   else
   {
	   Local_u8ErrorState=NULL_PTR_ERR;
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	8d 83       	std	Y+5, r24	; 0x05
   }


	return Local_u8ErrorState;
     cb2:	8d 81       	ldd	r24, Y+5	; 0x05

}
     cb4:	28 96       	adiw	r28, 0x08	; 8
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <ADC_u8StartConversionAsynch>:
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel,uint16* Copypu16Result,void (*Copy_pvNotficationFunc)(void))
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <ADC_u8StartConversionAsynch+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <ADC_u8StartConversionAsynch+0x8>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <ADC_u8StartConversionAsynch+0xa>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	7c 83       	std	Y+4, r23	; 0x04
     cd8:	6b 83       	std	Y+3, r22	; 0x03
     cda:	5e 83       	std	Y+6, r21	; 0x06
     cdc:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState = OK;
     cde:	19 82       	std	Y+1, r1	; 0x01
	if((Copypu16Result != NULL) && (Copy_pvNotficationFunc != NULL))
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	c9 f1       	breq	.+114    	; 0xd5a <ADC_u8StartConversionAsynch+0x94>
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	a9 f1       	breq	.+106    	; 0xd5a <ADC_u8StartConversionAsynch+0x94>
	{
		/*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     cf0:	80 91 0a 01 	lds	r24, 0x010A
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	71 f5       	brne	.+92     	; 0xd54 <ADC_u8StartConversionAsynch+0x8e>
	   {
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     cf8:	10 92 0a 01 	sts	0x010A, r1
		   /*Start conversion Asynch is the choose*/
		   ADC_u8Chose=0u;
     cfc:	10 92 40 01 	sts	0x0140, r1

		/*initialize the result pointer globally*/
		ADC_pu16ConversionResult = Copypu16Result;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	90 93 39 01 	sts	0x0139, r25
     d08:	80 93 38 01 	sts	0x0138, r24
		/*initialize the notification function pointer globally*/
		ADC_pvNotificationFunc = Copy_pvNotficationFunc;
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	90 93 3b 01 	sts	0x013B, r25
     d14:	80 93 3a 01 	sts	0x013A, r24
		/*configure the analoge Channel */
		ADMUX &= CHANNEL_MASK;
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 7e       	andi	r24, 0xE0	; 224
     d24:	8c 93       	st	X, r24
		ADMUX|=Copy_u8Channel;
     d26:	a7 e2       	ldi	r26, 0x27	; 39
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e2       	ldi	r30, 0x27	; 39
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	90 81       	ld	r25, Z
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	89 2b       	or	r24, r25
     d34:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	8c 93       	st	X, r24

		/*Enable interrupt flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     d44:	a6 e2       	ldi	r26, 0x26	; 38
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	8c 93       	st	X, r24
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <ADC_u8StartConversionAsynch+0x98>

		}
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <ADC_u8StartConversionAsynch+0x98>
	   }
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <ADC_u8StartChainingConvAsynch>:
uint8 ADC_u8StartChainingConvAsynch(ADC_Chain_t*Copy_Data)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <ADC_u8StartChainingConvAsynch+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
     d82:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Data!=NULL)
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <ADC_u8StartChainingConvAsynch+0x1c>
     d8c:	5b c0       	rjmp	.+182    	; 0xe44 <ADC_u8StartChainingConvAsynch+0xd2>
	{
		/*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     d8e:	80 91 0a 01 	lds	r24, 0x010A
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <ADC_u8StartChainingConvAsynch+0x26>
     d96:	53 c0       	rjmp	.+166    	; 0xe3e <ADC_u8StartChainingConvAsynch+0xcc>
	   {
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     d98:	10 92 0a 01 	sts	0x010A, r1
		   /*Start Chain conversion Asynch is the choose*/
		   ADC_u8Chose=1u;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 40 01 	sts	0x0140, r24

	       ADC_pvNotificationFunc=Copy_Data->ADC_pvNotificationFunc;
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	85 81       	ldd	r24, Z+5	; 0x05
     da8:	96 81       	ldd	r25, Z+6	; 0x06
     daa:	90 93 3b 01 	sts	0x013B, r25
     dae:	80 93 3a 01 	sts	0x013A, r24
	       ADC_pu16ConversionResult=Copy_Data->ADC_pu8ResultArr;
     db2:	ea 81       	ldd	r30, Y+2	; 0x02
     db4:	fb 81       	ldd	r31, Y+3	; 0x03
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	94 81       	ldd	r25, Z+4	; 0x04
     dba:	90 93 39 01 	sts	0x0139, r25
     dbe:	80 93 38 01 	sts	0x0138, r24
	       ADC_pu8ChannelARR=Copy_Data->ADC_pu8ChannelArr;
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	92 81       	ldd	r25, Z+2	; 0x02
     dca:	90 93 3d 01 	sts	0x013D, r25
     dce:	80 93 3c 01 	sts	0x013C, r24
	       ADC_u8ChainSize=Copy_Data->ADC_u8ChainSize;
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	80 81       	ld	r24, Z
     dd8:	80 93 3f 01 	sts	0x013F, r24
	       pADC_Chain_t=Copy_Data->pADC_chain;
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	87 81       	ldd	r24, Z+7	; 0x07
     de2:	90 85       	ldd	r25, Z+8	; 0x08
     de4:	90 93 42 01 	sts	0x0142, r25
     de8:	80 93 41 01 	sts	0x0141, r24
			/*configure the analog Channel */
			ADMUX &= CHANNEL_MASK;
     dec:	a7 e2       	ldi	r26, 0x27	; 39
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e2       	ldi	r30, 0x27	; 39
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 7e       	andi	r24, 0xE0	; 224
     df8:	8c 93       	st	X, r24
			ADMUX|=ADC_pu8ChannelARR[ADC_u8ChainCounter];
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	40 81       	ld	r20, Z
     e04:	20 91 3c 01 	lds	r18, 0x013C
     e08:	30 91 3d 01 	lds	r19, 0x013D
     e0c:	80 91 3e 01 	lds	r24, 0x013E
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	f9 01       	movw	r30, r18
     e16:	e8 0f       	add	r30, r24
     e18:	f9 1f       	adc	r31, r25
     e1a:	80 81       	ld	r24, Z
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e20:	a6 e2       	ldi	r26, 0x26	; 38
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 64       	ori	r24, 0x40	; 64
     e2c:	8c 93       	st	X, r24

			/*Enable interrupt flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 60       	ori	r24, 0x08	; 8
     e3a:	8c 93       	st	X, r24
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <ADC_u8StartChainingConvAsynch+0xd6>
	   }
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <ADC_u8StartChainingConvAsynch+0xd6>
	   }
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_u8ErrorState;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <__vector_16>:
 * @brief ADC conversion complete ISR
 *
 */
void __vector_16 (void)    __attribute__((signal));
void __vector_16 (void)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pu16ConversionResult != NULL)
     e80:	80 91 38 01 	lds	r24, 0x0138
     e84:	90 91 39 01 	lds	r25, 0x0139
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	09 f4       	brne	.+2      	; 0xe8e <__vector_16+0x38>
     e8c:	65 c0       	rjmp	.+202    	; 0xf58 <__vector_16+0x102>
	{
		if(ADC_u8Chose==0)
     e8e:	80 91 40 01 	lds	r24, 0x0140
     e92:	88 23       	and	r24, r24
     e94:	09 f5       	brne	.+66     	; 0xed8 <__vector_16+0x82>
		{
#if ADC_RESOLUTION == EIGHT_BITS
	*ADC_pu16ConversionResult= ADCH;
#elif ADC_RESOLUTION == TEN_BITS
	*ADC_pu16ConversionResult= ADC;
     e96:	a0 91 38 01 	lds	r26, 0x0138
     e9a:	b0 91 39 01 	lds	r27, 0x0139
     e9e:	e4 e2       	ldi	r30, 0x24	; 36
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	8d 93       	st	X+, r24
     ea8:	9c 93       	st	X, r25
#endif
	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     eaa:	a6 e2       	ldi	r26, 0x26	; 38
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
	/*ADC is now IDLE*/
	ADC_u8BusyFlag = IDLE;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 0a 01 	sts	0x010A, r24
	/*Invoke the application notification function */
	if(ADC_pvNotificationFunc !=NULL)
     ebe:	80 91 3a 01 	lds	r24, 0x013A
     ec2:	90 91 3b 01 	lds	r25, 0x013B
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <__vector_16+0x76>
     eca:	46 c0       	rjmp	.+140    	; 0xf58 <__vector_16+0x102>
	{
		ADC_pvNotificationFunc();
     ecc:	e0 91 3a 01 	lds	r30, 0x013A
     ed0:	f0 91 3b 01 	lds	r31, 0x013B
     ed4:	09 95       	icall
     ed6:	40 c0       	rjmp	.+128    	; 0xf58 <__vector_16+0x102>
	else
	{
		/*Notification function pointer is NULL*/
	}
		}
		else if(ADC_u8Chose==1)
     ed8:	80 91 40 01 	lds	r24, 0x0140
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	e1 f5       	brne	.+120    	; 0xf58 <__vector_16+0x102>
		{
#if ADC_RESOLUTION == EIGHT_BITS
	ADC_pu16ConversionResult[ADC_u8ChainCounter]= ADCH;
#elif ADC_RESOLUTION == TEN_BITS
	ADC_pu16ConversionResult[ADC_u8ChainCounter]= ADC;
     ee0:	20 91 38 01 	lds	r18, 0x0138
     ee4:	30 91 39 01 	lds	r19, 0x0139
     ee8:	80 91 3e 01 	lds	r24, 0x013E
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	d9 01       	movw	r26, r18
     ef6:	a8 0f       	add	r26, r24
     ef8:	b9 1f       	adc	r27, r25
     efa:	e4 e2       	ldi	r30, 0x24	; 36
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	8d 93       	st	X+, r24
     f04:	9c 93       	st	X, r25
#endif
	/*Increase counter*/
	ADC_u8ChainCounter++;
     f06:	80 91 3e 01 	lds	r24, 0x013E
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 3e 01 	sts	0x013E, r24
	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f10:	a6 e2       	ldi	r26, 0x26	; 38
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e2       	ldi	r30, 0x26	; 38
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	8c 93       	st	X, r24
	/*ADC is now IDLE*/
	ADC_u8BusyFlag = IDLE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 0a 01 	sts	0x010A, r24
	if(ADC_u8ChainCounter!=ADC_u8ChainSize)
     f24:	90 91 3e 01 	lds	r25, 0x013E
     f28:	80 91 3f 01 	lds	r24, 0x013F
     f2c:	98 17       	cp	r25, r24
     f2e:	39 f0       	breq	.+14     	; 0xf3e <__vector_16+0xe8>
	{
       ADC_u8StartChainingConvAsynch(pADC_Chain_t);
     f30:	80 91 41 01 	lds	r24, 0x0141
     f34:	90 91 42 01 	lds	r25, 0x0142
     f38:	0e 94 b9 06 	call	0xd72	; 0xd72 <ADC_u8StartChainingConvAsynch>
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <__vector_16+0x102>
	}
	else
	{
		/*Invoke the application notification function */
		if(ADC_pvNotificationFunc !=NULL)
     f3e:	80 91 3a 01 	lds	r24, 0x013A
     f42:	90 91 3b 01 	lds	r25, 0x013B
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	39 f0       	breq	.+14     	; 0xf58 <__vector_16+0x102>
		{
			ADC_u8ChainCounter=0;
     f4a:	10 92 3e 01 	sts	0x013E, r1
			ADC_pvNotificationFunc();
     f4e:	e0 91 3a 01 	lds	r30, 0x013A
     f52:	f0 91 3b 01 	lds	r31, 0x013B
     f56:	09 95       	icall
	}
	else
	{
		/*Conversion result pointer is NULL*/
	}
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	2e 97       	sbiw	r28, 0x0e	; 14
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e4       	ldi	r27, 0x40	; 64
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a e7       	ldi	r20, 0x7A	; 122
     fba:	55 e4       	ldi	r21, 0x45	; 69
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	8f 83       	std	Y+7, r24	; 0x07
     fc6:	98 87       	std	Y+8, r25	; 0x08
     fc8:	a9 87       	std	Y+9, r26	; 0x09
     fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <voidSendEnablePulse+0x70>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3f c0       	rjmp	.+126    	; 0x106c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0f c0       	rjmp	.+30     	; 0x104e <voidSendEnablePulse+0xd0>
    1030:	80 e9       	ldi	r24, 0x90	; 144
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <voidSendEnablePulse+0xbe>
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <voidSendEnablePulse+0xb2>
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <voidSendEnablePulse+0xfa>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
}
    108a:	2e 96       	adiw	r28, 0x0e	; 14
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	98 2f       	mov	r25, r24
    10ac:	91 70       	andi	r25, 0x01	; 1
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	63 e0       	ldi	r22, 0x03	; 3
    10b2:	49 2f       	mov	r20, r25
    10b4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	86 95       	lsr	r24
    10bc:	98 2f       	mov	r25, r24
    10be:	91 70       	andi	r25, 0x01	; 1
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	64 e0       	ldi	r22, 0x04	; 4
    10c4:	49 2f       	mov	r20, r25
    10c6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	86 95       	lsr	r24
    10ce:	86 95       	lsr	r24
    10d0:	98 2f       	mov	r25, r24
    10d2:	91 70       	andi	r25, 0x01	; 1
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	65 e0       	ldi	r22, 0x05	; 5
    10d8:	49 2f       	mov	r20, r25
    10da:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	86 95       	lsr	r24
    10e2:	86 95       	lsr	r24
    10e4:	86 95       	lsr	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	91 70       	andi	r25, 0x01	; 1
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	66 e0       	ldi	r22, 0x06	; 6
    10ee:	49 2f       	mov	r20, r25
    10f0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
}
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	82 95       	swap	r24
    1116:	8f 70       	andi	r24, 0x0F	; 15
    1118:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    111c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1126:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif
}
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	82 95       	swap	r24
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1152:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    115c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif

}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	2e 97       	sbiw	r28, 0x0e	; 14
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e2       	ldi	r26, 0x20	; 32
    1182:	b2 e4       	ldi	r27, 0x42	; 66
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	9c 87       	std	Y+12, r25	; 0x0c
    1188:	ad 87       	std	Y+13, r26	; 0x0d
    118a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a e7       	ldi	r20, 0x7A	; 122
    119a:	55 e4       	ldi	r21, 0x45	; 69
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8f 83       	std	Y+7, r24	; 0x07
    11a6:	98 87       	std	Y+8, r25	; 0x08
    11a8:	a9 87       	std	Y+9, r26	; 0x09
    11aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <CLCD_voidInit+0x66>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	0f c0       	rjmp	.+30     	; 0x122e <CLCD_voidInit+0xc6>
    1210:	80 e9       	ldi	r24, 0x90	; 144
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <CLCD_voidInit+0xb4>
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <CLCD_voidInit+0xa8>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <CLCD_voidInit+0xf0>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1266:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1270:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1274:	88 e0       	ldi	r24, 0x08	; 8
    1276:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    127a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    127e:	8c e0       	ldi	r24, 0x0C	; 12
    1280:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    128a:	2e 96       	adiw	r28, 0x0e	; 14
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <CLCD_u8SendString+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <CLCD_u8SendString+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
    12ac:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	e1 f0       	breq	.+56     	; 0x12ee <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
    12b6:	19 82       	std	Y+1, r1	; 0x01
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	80 81       	ld	r24, Z
    12cc:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			Local_u8Counter++;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	39 f7       	brne	.-50     	; 0x12ba <CLCD_u8SendString+0x1e>
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	61 97       	sbiw	r28, 0x11	; 17
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	6e 87       	std	Y+14, r22	; 0x0e
    1318:	7f 87       	std	Y+15, r23	; 0x0f
    131a:	88 8b       	std	Y+16, r24	; 0x10
    131c:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
    131e:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if (Copy_s32Number == 0)
    1320:	8e 85       	ldd	r24, Y+14	; 0x0e
    1322:	9f 85       	ldd	r25, Y+15	; 0x0f
    1324:	a8 89       	ldd	r26, Y+16	; 0x10
    1326:	b9 89       	ldd	r27, Y+17	; 0x11
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	a1 05       	cpc	r26, r1
    132c:	b1 05       	cpc	r27, r1
    132e:	21 f4       	brne	.+8      	; 0x1338 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
    1330:	80 e3       	ldi	r24, 0x30	; 48
    1332:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
    1336:	69 c0       	rjmp	.+210    	; 0x140a <CLCD_voidSendNumber+0x108>
		return ;
	}
	else if(Copy_s32Number < 0)
    1338:	8e 85       	ldd	r24, Y+14	; 0x0e
    133a:	9f 85       	ldd	r25, Y+15	; 0x0f
    133c:	a8 89       	ldd	r26, Y+16	; 0x10
    133e:	b9 89       	ldd	r27, Y+17	; 0x11
    1340:	bb 23       	and	r27, r27
    1342:	0c f0       	brlt	.+2      	; 0x1346 <CLCD_voidSendNumber+0x44>
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
    1346:	8d e2       	ldi	r24, 0x2D	; 45
    1348:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Copy_s32Number *= -1;
    134c:	8e 85       	ldd	r24, Y+14	; 0x0e
    134e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1350:	a8 89       	ldd	r26, Y+16	; 0x10
    1352:	b9 89       	ldd	r27, Y+17	; 0x11
    1354:	b0 95       	com	r27
    1356:	a0 95       	com	r26
    1358:	90 95       	com	r25
    135a:	81 95       	neg	r24
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	af 4f       	sbci	r26, 0xFF	; 255
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	8e 87       	std	Y+14, r24	; 0x0e
    1364:	9f 87       	std	Y+15, r25	; 0x0f
    1366:	a8 8b       	std	Y+16, r26	; 0x10
    1368:	b9 8b       	std	Y+17, r27	; 0x11
    136a:	30 c0       	rjmp	.+96     	; 0x13cc <CLCD_voidSendNumber+0xca>
	}
	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1370:	a8 89       	ldd	r26, Y+16	; 0x10
    1372:	b9 89       	ldd	r27, Y+17	; 0x11
    1374:	2a e0       	ldi	r18, 0x0A	; 10
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 1c 22 	call	0x4438	; 0x4438 <__divmodsi4>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
    138a:	8e 85       	ldd	r24, Y+14	; 0x0e
    138c:	9f 85       	ldd	r25, Y+15	; 0x0f
    138e:	a8 89       	ldd	r26, Y+16	; 0x10
    1390:	b9 89       	ldd	r27, Y+17	; 0x11
    1392:	2a e0       	ldi	r18, 0x0A	; 10
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 1c 22 	call	0x4438	; 0x4438 <__divmodsi4>
    13a2:	da 01       	movw	r26, r20
    13a4:	c9 01       	movw	r24, r18
    13a6:	8e 87       	std	Y+14, r24	; 0x0e
    13a8:	9f 87       	std	Y+15, r25	; 0x0f
    13aa:	a8 8b       	std	Y+16, r26	; 0x10
    13ac:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	48 2f       	mov	r20, r24
    13b8:	40 5d       	subi	r20, 0xD0	; 208
    13ba:	ce 01       	movw	r24, r28
    13bc:	04 96       	adiw	r24, 0x04	; 4
    13be:	fc 01       	movw	r30, r24
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	40 83       	st	Z, r20
		Local_u8Counter++;
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	else if(Copy_s32Number < 0)
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}
	while(Copy_s32Number != 0)
    13cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d0:	a8 89       	ldd	r26, Y+16	; 0x10
    13d2:	b9 89       	ldd	r27, Y+17	; 0x11
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	41 f6       	brne	.-112    	; 0x136c <CLCD_voidSendNumber+0x6a>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	81 50       	subi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	33 27       	eor	r19, r19
    13ea:	27 fd       	sbrc	r18, 7
    13ec:	30 95       	com	r19
    13ee:	ce 01       	movw	r24, r28
    13f0:	04 96       	adiw	r24, 0x04	; 4
    13f2:	fc 01       	movw	r30, r24
    13f4:	e2 0f       	add	r30, r18
    13f6:	f3 1f       	adc	r31, r19
    13f8:	80 81       	ld	r24, Z
    13fa:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 23       	and	r24, r24
    1408:	6c f7       	brge	.-38     	; 0x13e4 <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
    140a:	61 96       	adiw	r28, 0x11	; 17
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <CLCD_viodGoToXY>:
void CLCD_viodGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <CLCD_viodGoToXY+0x6>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	88 23       	and	r24, r24
    1430:	19 f4       	brne	.+6      	; 0x1438 <CLCD_viodGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <CLCD_viodGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	19 f4       	brne	.+6      	; 0x1444 <CLCD_viodGoToXY+0x28>
	{
		Local_u8DDRamAdd= 0x40+ Copy_u8XPos;
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 5c       	subi	r24, 0xC0	; 192
    1442:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRamAdd |= 1<<7u;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_PatternNumber,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	27 97       	sbiw	r28, 0x07	; 7
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	6d 83       	std	Y+5, r22	; 0x05
    1476:	4e 83       	std	Y+6, r20	; 0x06
    1478:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd= Copy_PatternNumber * 8u;
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 64       	ori	r24, 0x40	; 64
    1492:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	80 81       	ld	r24, Z
    14b0:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	78 f3       	brcs	.-34     	; 0x149e <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display*/
	CLCD_viodGoToXY(Copy_u8XPos, Copy_u8YPos);
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>

	CLCD_voidSendData(Copy_PatternNumber);
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    14ce:	27 96       	adiw	r28, 0x07	; 7
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <CLCD_voidSendBinary>:
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2b 97       	sbiw	r28, 0x0b	; 11
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    14f6:	1a 82       	std	Y+2, r1	; 0x02
    14f8:	88 e0       	ldi	r24, 0x08	; 8
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	20 c0       	rjmp	.+64     	; 0x153e <CLCD_voidSendBinary+0x5e>
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	48 2f       	mov	r20, r24
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	8b 85       	ldd	r24, Y+11	; 0x0b
    150c:	28 2f       	mov	r18, r24
    150e:	33 27       	eor	r19, r19
    1510:	27 fd       	sbrc	r18, 7
    1512:	30 95       	com	r19
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	b9 01       	movw	r22, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <CLCD_voidSendBinary+0x42>
    151e:	75 95       	asr	r23
    1520:	67 95       	ror	r22
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <CLCD_voidSendBinary+0x3e>
    1526:	cb 01       	movw	r24, r22
    1528:	28 2f       	mov	r18, r24
    152a:	21 70       	andi	r18, 0x01	; 1
    152c:	ce 01       	movw	r24, r28
    152e:	03 96       	adiw	r24, 0x03	; 3
    1530:	fc 01       	movw	r30, r24
    1532:	e4 0f       	add	r30, r20
    1534:	f5 1f       	adc	r31, r21
    1536:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8a 83       	std	Y+2, r24	; 0x02
}
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 23       	and	r24, r24
    1542:	e9 f6       	brne	.-70     	; 0x14fe <CLCD_voidSendBinary+0x1e>
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
    1544:	80 e6       	ldi	r24, 0x60	; 96
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    154c:	1a 82       	std	Y+2, r1	; 0x02
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <CLCD_voidSendBinary+0x98>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	ce 01       	movw	r24, r28
    1558:	03 96       	adiw	r24, 0x03	; 3
    155a:	fc 01       	movw	r30, r24
    155c:	e2 0f       	add	r30, r18
    155e:	f3 1f       	adc	r31, r19
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	48 f3       	brcs	.-46     	; 0x1550 <CLCD_voidSendBinary+0x70>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
	}
}
    157e:	2b 96       	adiw	r28, 0x0b	; 11
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <CLCD_voidSendHex>:
void CLCD_voidSendHex(sint8 Copy_s8Number)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	62 97       	sbiw	r28, 0x12	; 18
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	8e 87       	std	Y+14, r24	; 0x0e
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    15a6:	1d 82       	std	Y+5, r1	; 0x05
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;
    15ac:	1b 82       	std	Y+3, r1	; 0x03
    15ae:	1a 82       	std	Y+2, r1	; 0x02
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	20 c0       	rjmp	.+64     	; 0x15f4 <CLCD_voidSendHex+0x64>

	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	81 50       	subi	r24, 0x01	; 1
    15b8:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	48 2f       	mov	r20, r24
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c2:	28 2f       	mov	r18, r24
    15c4:	33 27       	eor	r19, r19
    15c6:	27 fd       	sbrc	r18, 7
    15c8:	30 95       	com	r19
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <CLCD_voidSendHex+0x48>
    15d4:	75 95       	asr	r23
    15d6:	67 95       	ror	r22
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <CLCD_voidSendHex+0x44>
    15dc:	cb 01       	movw	r24, r22
    15de:	28 2f       	mov	r18, r24
    15e0:	21 70       	andi	r18, 0x01	; 1
    15e2:	ce 01       	movw	r24, r28
    15e4:	06 96       	adiw	r24, 0x06	; 6
    15e6:	fc 01       	movw	r30, r24
    15e8:	e4 0f       	add	r30, r20
    15ea:	f5 1f       	adc	r31, r21
    15ec:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	8d 83       	std	Y+5, r24	; 0x05
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;

	while(Local_u8LoopCounter2!=0)
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 23       	and	r24, r24
    15f8:	e9 f6       	brne	.-70     	; 0x15b4 <CLCD_voidSendHex+0x24>
	{
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	8c 83       	std	Y+4, r24	; 0x04
	CLCD_u8SendString("0x");
    15fe:	83 e6       	ldi	r24, 0x63	; 99
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	1f c0       	rjmp	.+62     	; 0x1648 <CLCD_voidSendHex+0xb8>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	06 96       	adiw	r24, 0x06	; 6
    1614:	fc 01       	movw	r30, r24
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <CLCD_voidSendHex+0x9e>
    162a:	44 0f       	add	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <CLCD_voidSendHex+0x9a>
    1632:	ca 01       	movw	r24, r20
    1634:	98 2f       	mov	r25, r24
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	89 2b       	or	r24, r25
    163a:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
	CLCD_u8SendString("0x");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	f0 f2       	brcs	.-68     	; 0x160a <CLCD_voidSendHex+0x7a>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	68 2f       	mov	r22, r24
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	7a 8b       	std	Y+18, r23	; 0x12
    1656:	69 8b       	std	Y+17, r22	; 0x11
    1658:	89 89       	ldd	r24, Y+17	; 0x11
    165a:	9a 89       	ldd	r25, Y+18	; 0x12
    165c:	8c 30       	cpi	r24, 0x0C	; 12
    165e:	91 05       	cpc	r25, r1
    1660:	31 f1       	breq	.+76     	; 0x16ae <CLCD_voidSendHex+0x11e>
    1662:	29 89       	ldd	r18, Y+17	; 0x11
    1664:	3a 89       	ldd	r19, Y+18	; 0x12
    1666:	2d 30       	cpi	r18, 0x0D	; 13
    1668:	31 05       	cpc	r19, r1
    166a:	5c f4       	brge	.+22     	; 0x1682 <CLCD_voidSendHex+0xf2>
    166c:	49 89       	ldd	r20, Y+17	; 0x11
    166e:	5a 89       	ldd	r21, Y+18	; 0x12
    1670:	4a 30       	cpi	r20, 0x0A	; 10
    1672:	51 05       	cpc	r21, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <CLCD_voidSendHex+0x112>
    1676:	69 89       	ldd	r22, Y+17	; 0x11
    1678:	7a 89       	ldd	r23, Y+18	; 0x12
    167a:	6b 30       	cpi	r22, 0x0B	; 11
    167c:	71 05       	cpc	r23, r1
    167e:	a1 f0       	breq	.+40     	; 0x16a8 <CLCD_voidSendHex+0x118>
    1680:	22 c0       	rjmp	.+68     	; 0x16c6 <CLCD_voidSendHex+0x136>
    1682:	89 89       	ldd	r24, Y+17	; 0x11
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	8e 30       	cpi	r24, 0x0E	; 14
    1688:	91 05       	cpc	r25, r1
    168a:	b9 f0       	breq	.+46     	; 0x16ba <CLCD_voidSendHex+0x12a>
    168c:	29 89       	ldd	r18, Y+17	; 0x11
    168e:	3a 89       	ldd	r19, Y+18	; 0x12
    1690:	2e 30       	cpi	r18, 0x0E	; 14
    1692:	31 05       	cpc	r19, r1
    1694:	7c f0       	brlt	.+30     	; 0x16b4 <CLCD_voidSendHex+0x124>
    1696:	49 89       	ldd	r20, Y+17	; 0x11
    1698:	5a 89       	ldd	r21, Y+18	; 0x12
    169a:	4f 30       	cpi	r20, 0x0F	; 15
    169c:	51 05       	cpc	r21, r1
    169e:	81 f0       	breq	.+32     	; 0x16c0 <CLCD_voidSendHex+0x130>
    16a0:	12 c0       	rjmp	.+36     	; 0x16c6 <CLCD_voidSendHex+0x136>
	{
	   case 10:Local_u8FirstDigit='A'; break;
    16a2:	81 e4       	ldi	r24, 0x41	; 65
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	12 c0       	rjmp	.+36     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 11:Local_u8FirstDigit='B'; break;
    16a8:	82 e4       	ldi	r24, 0x42	; 66
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 12:Local_u8FirstDigit='C'; break;
    16ae:	83 e4       	ldi	r24, 0x43	; 67
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 13:Local_u8FirstDigit='D'; break;
    16b4:	84 e4       	ldi	r24, 0x44	; 68
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 14:Local_u8FirstDigit='E'; break;
    16ba:	85 e4       	ldi	r24, 0x45	; 69
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 15:Local_u8FirstDigit='F'; break;
    16c0:	86 e4       	ldi	r24, 0x46	; 70
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <CLCD_voidSendHex+0x13c>
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	80 5d       	subi	r24, 0xD0	; 208
    16ca:	8b 83       	std	Y+3, r24	; 0x03
	}
	Local_u8LoopCounter2=3;
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Temp=0;
    16d0:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	1f c0       	rjmp	.+62     	; 0x1716 <CLCD_voidSendHex+0x186>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	ce 01       	movw	r24, r28
    16e0:	06 96       	adiw	r24, 0x06	; 6
    16e2:	fc 01       	movw	r30, r24
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b9 01       	movw	r22, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <CLCD_voidSendHex+0x16c>
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	8a 95       	dec	r24
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <CLCD_voidSendHex+0x168>
    1700:	cb 01       	movw	r24, r22
    1702:	98 2f       	mov	r25, r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	89 2b       	or	r24, r25
    1708:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	8c 83       	std	Y+4, r24	; 0x04
	   case 15:Local_u8FirstDigit='F'; break;
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
	}
	Local_u8LoopCounter2=3;
	Local_u8Temp=0;
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	f0 f2       	brcs	.-68     	; 0x16d8 <CLCD_voidSendHex+0x148>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	38 8b       	std	Y+16, r19	; 0x10
    1724:	2f 87       	std	Y+15, r18	; 0x0f
    1726:	4f 85       	ldd	r20, Y+15	; 0x0f
    1728:	58 89       	ldd	r21, Y+16	; 0x10
    172a:	4c 30       	cpi	r20, 0x0C	; 12
    172c:	51 05       	cpc	r21, r1
    172e:	31 f1       	breq	.+76     	; 0x177c <CLCD_voidSendHex+0x1ec>
    1730:	6f 85       	ldd	r22, Y+15	; 0x0f
    1732:	78 89       	ldd	r23, Y+16	; 0x10
    1734:	6d 30       	cpi	r22, 0x0D	; 13
    1736:	71 05       	cpc	r23, r1
    1738:	5c f4       	brge	.+22     	; 0x1750 <CLCD_voidSendHex+0x1c0>
    173a:	8f 85       	ldd	r24, Y+15	; 0x0f
    173c:	98 89       	ldd	r25, Y+16	; 0x10
    173e:	8a 30       	cpi	r24, 0x0A	; 10
    1740:	91 05       	cpc	r25, r1
    1742:	b1 f0       	breq	.+44     	; 0x1770 <CLCD_voidSendHex+0x1e0>
    1744:	2f 85       	ldd	r18, Y+15	; 0x0f
    1746:	38 89       	ldd	r19, Y+16	; 0x10
    1748:	2b 30       	cpi	r18, 0x0B	; 11
    174a:	31 05       	cpc	r19, r1
    174c:	a1 f0       	breq	.+40     	; 0x1776 <CLCD_voidSendHex+0x1e6>
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <CLCD_voidSendHex+0x204>
    1750:	4f 85       	ldd	r20, Y+15	; 0x0f
    1752:	58 89       	ldd	r21, Y+16	; 0x10
    1754:	4e 30       	cpi	r20, 0x0E	; 14
    1756:	51 05       	cpc	r21, r1
    1758:	b9 f0       	breq	.+46     	; 0x1788 <CLCD_voidSendHex+0x1f8>
    175a:	6f 85       	ldd	r22, Y+15	; 0x0f
    175c:	78 89       	ldd	r23, Y+16	; 0x10
    175e:	6e 30       	cpi	r22, 0x0E	; 14
    1760:	71 05       	cpc	r23, r1
    1762:	7c f0       	brlt	.+30     	; 0x1782 <CLCD_voidSendHex+0x1f2>
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	8f 30       	cpi	r24, 0x0F	; 15
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <CLCD_voidSendHex+0x1fe>
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <CLCD_voidSendHex+0x204>
	{
	   case 10:Local_u8SecondDigit='A'; break;
    1770:	81 e4       	ldi	r24, 0x41	; 65
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	12 c0       	rjmp	.+36     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 11:Local_u8SecondDigit='B'; break;
    1776:	82 e4       	ldi	r24, 0x42	; 66
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	0f c0       	rjmp	.+30     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 12:Local_u8SecondDigit='C'; break;
    177c:	83 e4       	ldi	r24, 0x43	; 67
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	0c c0       	rjmp	.+24     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 13:Local_u8SecondDigit='D'; break;
    1782:	84 e4       	ldi	r24, 0x44	; 68
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	09 c0       	rjmp	.+18     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 14:Local_u8SecondDigit='E'; break;
    1788:	85 e4       	ldi	r24, 0x45	; 69
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	06 c0       	rjmp	.+12     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 15:Local_u8SecondDigit='F'; break;
    178e:	86 e4       	ldi	r24, 0x46	; 70
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	03 c0       	rjmp	.+6      	; 0x179a <CLCD_voidSendHex+0x20a>
	   default:Local_u8SecondDigit=Local_u8Temp+'0';break;
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	80 5d       	subi	r24, 0xD0	; 208
    1798:	8a 83       	std	Y+2, r24	; 0x02
	}
	CLCD_voidSendData(Local_u8FirstDigit);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	CLCD_voidSendData(Local_u8SecondDigit);
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    17a6:	62 96       	adiw	r28, 0x12	; 18
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <DCM_u8CW>:

#include "DCM_interface.h"


uint8 DCM_u8CW(DCM_cfg * Copy_pDCMcfg)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <DCM_u8CW+0x6>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	9b 83       	std	Y+3, r25	; 0x03
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState=OK;
    17c8:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pDCMcfg!=NULL)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	9b 81       	ldd	r25, Y+3	; 0x03
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	e9 f1       	breq	.+122    	; 0x184c <DCM_u8CW+0x94>
    {
    	DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    17d2:	ea 81       	ldd	r30, Y+2	; 0x02
    17d4:	fb 81       	ldd	r31, Y+3	; 0x03
    17d6:	80 81       	ld	r24, Z
    17d8:	ea 81       	ldd	r30, Y+2	; 0x02
    17da:	fb 81       	ldd	r31, Y+3	; 0x03
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	69 2f       	mov	r22, r25
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    17e6:	ea 81       	ldd	r30, Y+2	; 0x02
    17e8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ea:	80 81       	ld	r24, Z
    17ec:	ea 81       	ldd	r30, Y+2	; 0x02
    17ee:	fb 81       	ldd	r31, Y+3	; 0x03
    17f0:	92 81       	ldd	r25, Z+2	; 0x02
    17f2:	69 2f       	mov	r22, r25
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    17fa:	ea 81       	ldd	r30, Y+2	; 0x02
    17fc:	fb 81       	ldd	r31, Y+3	; 0x03
    17fe:	80 81       	ld	r24, Z
    1800:	ea 81       	ldd	r30, Y+2	; 0x02
    1802:	fb 81       	ldd	r31, Y+3	; 0x03
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	69 2f       	mov	r22, r25
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	80 81       	ld	r24, Z
    1814:	ea 81       	ldd	r30, Y+2	; 0x02
    1816:	fb 81       	ldd	r31, Y+3	; 0x03
    1818:	94 81       	ldd	r25, Z+4	; 0x04
    181a:	69 2f       	mov	r22, r25
    181c:	40 e0       	ldi	r20, 0x00	; 0
    181e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>

        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_HIGH);
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	80 81       	ld	r24, Z
    1828:	ea 81       	ldd	r30, Y+2	; 0x02
    182a:	fb 81       	ldd	r31, Y+3	; 0x03
    182c:	91 81       	ldd	r25, Z+1	; 0x01
    182e:	69 2f       	mov	r22, r25
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_HIGH);
    1836:	ea 81       	ldd	r30, Y+2	; 0x02
    1838:	fb 81       	ldd	r31, Y+3	; 0x03
    183a:	80 81       	ld	r24, Z
    183c:	ea 81       	ldd	r30, Y+2	; 0x02
    183e:	fb 81       	ldd	r31, Y+3	; 0x03
    1840:	94 81       	ldd	r25, Z+4	; 0x04
    1842:	69 2f       	mov	r22, r25
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DCM_u8CW+0x98>
    }
    else
    {
    	Local_u8ErrorState=NULL_PTR_ERR;
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	89 83       	std	Y+1, r24	; 0x01

    }
    return Local_u8ErrorState;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <DCM_u8CCW>:

uint8 DCM_u8CCW(DCM_cfg * Copy_pDCMcfg)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <DCM_u8CCW+0x6>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState=OK;
    186e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pDCMcfg!=NULL)
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	e9 f1       	breq	.+122    	; 0x18f2 <DCM_u8CCW+0x94>
    {
    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    1878:	ea 81       	ldd	r30, Y+2	; 0x02
    187a:	fb 81       	ldd	r31, Y+3	; 0x03
    187c:	80 81       	ld	r24, Z
    187e:	ea 81       	ldd	r30, Y+2	; 0x02
    1880:	fb 81       	ldd	r31, Y+3	; 0x03
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	69 2f       	mov	r22, r25
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    188c:	ea 81       	ldd	r30, Y+2	; 0x02
    188e:	fb 81       	ldd	r31, Y+3	; 0x03
    1890:	80 81       	ld	r24, Z
    1892:	ea 81       	ldd	r30, Y+2	; 0x02
    1894:	fb 81       	ldd	r31, Y+3	; 0x03
    1896:	92 81       	ldd	r25, Z+2	; 0x02
    1898:	69 2f       	mov	r22, r25
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	80 81       	ld	r24, Z
    18a6:	ea 81       	ldd	r30, Y+2	; 0x02
    18a8:	fb 81       	ldd	r31, Y+3	; 0x03
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	69 2f       	mov	r22, r25
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    18b4:	ea 81       	ldd	r30, Y+2	; 0x02
    18b6:	fb 81       	ldd	r31, Y+3	; 0x03
    18b8:	80 81       	ld	r24, Z
    18ba:	ea 81       	ldd	r30, Y+2	; 0x02
    18bc:	fb 81       	ldd	r31, Y+3	; 0x03
    18be:	94 81       	ldd	r25, Z+4	; 0x04
    18c0:	69 2f       	mov	r22, r25
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>

    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_HIGH);
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	80 81       	ld	r24, Z
    18ce:	ea 81       	ldd	r30, Y+2	; 0x02
    18d0:	fb 81       	ldd	r31, Y+3	; 0x03
    18d2:	92 81       	ldd	r25, Z+2	; 0x02
    18d4:	69 2f       	mov	r22, r25
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    	   DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_HIGH);
    18dc:	ea 81       	ldd	r30, Y+2	; 0x02
    18de:	fb 81       	ldd	r31, Y+3	; 0x03
    18e0:	80 81       	ld	r24, Z
    18e2:	ea 81       	ldd	r30, Y+2	; 0x02
    18e4:	fb 81       	ldd	r31, Y+3	; 0x03
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	69 2f       	mov	r22, r25
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DCM_u8CCW+0x98>
    }
    else
    {
    	Local_u8ErrorState=NULL_PTR_ERR;
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	89 83       	std	Y+1, r24	; 0x01

    }
    return Local_u8ErrorState;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01


}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <DCM_u8Brake>:

uint8 DCM_u8Brake(DCM_cfg * Copy_pDCMcfg)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	00 d0       	rcall	.+0      	; 0x190a <DCM_u8Brake+0x6>
    190a:	0f 92       	push	r0
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState=OK;
    1914:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pDCMcfg!=NULL)
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	e9 f1       	breq	.+122    	; 0x1998 <DCM_u8Brake+0x94>
    {
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch1Pin,DIO_u8PIN_LOW);
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	80 81       	ld	r24, Z
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	69 2f       	mov	r22, r25
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch2Pin,DIO_u8PIN_LOW);
    1932:	ea 81       	ldd	r30, Y+2	; 0x02
    1934:	fb 81       	ldd	r31, Y+3	; 0x03
    1936:	80 81       	ld	r24, Z
    1938:	ea 81       	ldd	r30, Y+2	; 0x02
    193a:	fb 81       	ldd	r31, Y+3	; 0x03
    193c:	92 81       	ldd	r25, Z+2	; 0x02
    193e:	69 2f       	mov	r22, r25
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_LOW);
    1946:	ea 81       	ldd	r30, Y+2	; 0x02
    1948:	fb 81       	ldd	r31, Y+3	; 0x03
    194a:	80 81       	ld	r24, Z
    194c:	ea 81       	ldd	r30, Y+2	; 0x02
    194e:	fb 81       	ldd	r31, Y+3	; 0x03
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	69 2f       	mov	r22, r25
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_LOW);
    195a:	ea 81       	ldd	r30, Y+2	; 0x02
    195c:	fb 81       	ldd	r31, Y+3	; 0x03
    195e:	80 81       	ld	r24, Z
    1960:	ea 81       	ldd	r30, Y+2	; 0x02
    1962:	fb 81       	ldd	r31, Y+3	; 0x03
    1964:	94 81       	ldd	r25, Z+4	; 0x04
    1966:	69 2f       	mov	r22, r25
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
#if SW_BRAKECIRCUIT  ==  ENABLE
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch3Pin,DIO_u8PIN_HIGH);
    196e:	ea 81       	ldd	r30, Y+2	; 0x02
    1970:	fb 81       	ldd	r31, Y+3	; 0x03
    1972:	80 81       	ld	r24, Z
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	69 2f       	mov	r22, r25
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
        DIO_u8SetPinValue(Copy_pDCMcfg->DCM_u8SwitchPort,Copy_pDCMcfg->DCM_u8Switch4Pin,DIO_u8PIN_HIGH);
    1982:	ea 81       	ldd	r30, Y+2	; 0x02
    1984:	fb 81       	ldd	r31, Y+3	; 0x03
    1986:	80 81       	ld	r24, Z
    1988:	ea 81       	ldd	r30, Y+2	; 0x02
    198a:	fb 81       	ldd	r31, Y+3	; 0x03
    198c:	94 81       	ldd	r25, Z+4	; 0x04
    198e:	69 2f       	mov	r22, r25
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DCM_u8Brake+0x98>
#endif
    }
    else
    {
    	Local_u8ErrorState=NULL_PTR_ERR;
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	89 83       	std	Y+1, r24	; 0x01

    }
    return Local_u8ErrorState;
    199c:	89 81       	ldd	r24, Y+1	; 0x01


}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <DIO_u8SetPinDirection>:
#include "DIO_reg.h"



uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	28 97       	sbiw	r28, 0x08	; 8
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
    19c2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    19c4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 30       	cpi	r24, 0x08	; 8
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <DIO_u8SetPinDirection+0x24>
    19cc:	f4 c0       	rjmp	.+488    	; 0x1bb6 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	88 23       	and	r24, r24
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <DIO_u8SetPinDirection+0x2c>
    19d4:	77 c0       	rjmp	.+238    	; 0x1ac4 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	38 87       	std	Y+8, r19	; 0x08
    19de:	2f 83       	std	Y+7, r18	; 0x07
    19e0:	8f 81       	ldd	r24, Y+7	; 0x07
    19e2:	98 85       	ldd	r25, Y+8	; 0x08
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	59 f1       	breq	.+86     	; 0x1a40 <DIO_u8SetPinDirection+0x96>
    19ea:	2f 81       	ldd	r18, Y+7	; 0x07
    19ec:	38 85       	ldd	r19, Y+8	; 0x08
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <DIO_u8SetPinDirection+0x54>
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f0       	breq	.+26     	; 0x1a16 <DIO_u8SetPinDirection+0x6c>
    19fc:	60 c0       	rjmp	.+192    	; 0x1abe <DIO_u8SetPinDirection+0x114>
    19fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1a00:	38 85       	ldd	r19, Y+8	; 0x08
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	89 f1       	breq	.+98     	; 0x1a6a <DIO_u8SetPinDirection+0xc0>
    1a08:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0a:	98 85       	ldd	r25, Y+8	; 0x08
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <DIO_u8SetPinDirection+0x6a>
    1a12:	40 c0       	rjmp	.+128    	; 0x1a94 <DIO_u8SetPinDirection+0xea>
    1a14:	54 c0       	rjmp	.+168    	; 0x1abe <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1a16:	aa e3       	ldi	r26, 0x3A	; 58
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ea e3       	ldi	r30, 0x3A	; 58
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_u8SetPinDirection+0x8a>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_u8SetPinDirection+0x86>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	bd c0       	rjmp	.+378    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1a40:	a7 e3       	ldi	r26, 0x37	; 55
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e7 e3       	ldi	r30, 0x37	; 55
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_u8SetPinDirection+0xb4>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_u8SetPinDirection+0xb0>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	a8 c0       	rjmp	.+336    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1a6a:	a4 e3       	ldi	r26, 0x34	; 52
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e4 e3       	ldi	r30, 0x34	; 52
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_u8SetPinDirection+0xde>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_u8SetPinDirection+0xda>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	93 c0       	rjmp	.+294    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1a94:	a1 e3       	ldi	r26, 0x31	; 49
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e1 e3       	ldi	r30, 0x31	; 49
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	48 2f       	mov	r20, r24
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 2e       	mov	r0, r18
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <DIO_u8SetPinDirection+0x108>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	0a 94       	dec	r0
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <DIO_u8SetPinDirection+0x104>
    1ab6:	80 95       	com	r24
    1ab8:	84 23       	and	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	7e c0       	rjmp	.+252    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	7b c0       	rjmp	.+246    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <DIO_u8SetPinDirection+0x122>
    1aca:	72 c0       	rjmp	.+228    	; 0x1bb0 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3e 83       	std	Y+6, r19	; 0x06
    1ad4:	2d 83       	std	Y+5, r18	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	49 f1       	breq	.+82     	; 0x1b32 <DIO_u8SetPinDirection+0x188>
    1ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <DIO_u8SetPinDirection+0x14a>
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <DIO_u8SetPinDirection+0x160>
    1af2:	5b c0       	rjmp	.+182    	; 0x1baa <DIO_u8SetPinDirection+0x200>
    1af4:	2d 81       	ldd	r18, Y+5	; 0x05
    1af6:	3e 81       	ldd	r19, Y+6	; 0x06
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	71 f1       	breq	.+92     	; 0x1b5a <DIO_u8SetPinDirection+0x1b0>
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	e9 f1       	breq	.+122    	; 0x1b82 <DIO_u8SetPinDirection+0x1d8>
    1b08:	50 c0       	rjmp	.+160    	; 0x1baa <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1b0a:	aa e3       	ldi	r26, 0x3A	; 58
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ea e3       	ldi	r30, 0x3A	; 58
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	48 2f       	mov	r20, r24
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <DIO_u8SetPinDirection+0x17e>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <DIO_u8SetPinDirection+0x17a>
    1b2c:	84 2b       	or	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	44 c0       	rjmp	.+136    	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1b32:	a7 e3       	ldi	r26, 0x37	; 55
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e7 e3       	ldi	r30, 0x37	; 55
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_u8SetPinDirection+0x1a6>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <DIO_u8SetPinDirection+0x1a2>
    1b54:	84 2b       	or	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	30 c0       	rjmp	.+96     	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1b5a:	a4 e3       	ldi	r26, 0x34	; 52
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e4 e3       	ldi	r30, 0x34	; 52
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <DIO_u8SetPinDirection+0x1ce>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <DIO_u8SetPinDirection+0x1ca>
    1b7c:	84 2b       	or	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	1c c0       	rjmp	.+56     	; 0x1bba <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1b82:	a1 e3       	ldi	r26, 0x31	; 49
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e1 e3       	ldi	r30, 0x31	; 49
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_u8SetPinDirection+0x1f6>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_u8SetPinDirection+0x1f2>
    1ba4:	84 2b       	or	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	05 c0       	rjmp	.+10     	; 0x1bba <DIO_u8SetPinDirection+0x210>
			}
	   }
		else
		{
			Local_u8ErrorState = NOK;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bbc:	28 96       	adiw	r28, 0x08	; 8
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	28 97       	sbiw	r28, 0x08	; 8
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	6b 83       	std	Y+3, r22	; 0x03
    1be6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1be8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	88 30       	cpi	r24, 0x08	; 8
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <DIO_u8SetPinValue+0x24>
    1bf0:	f4 c0       	rjmp	.+488    	; 0x1dda <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	88 23       	and	r24, r24
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <DIO_u8SetPinValue+0x2c>
    1bf8:	77 c0       	rjmp	.+238    	; 0x1ce8 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	38 87       	std	Y+8, r19	; 0x08
    1c02:	2f 83       	std	Y+7, r18	; 0x07
    1c04:	8f 81       	ldd	r24, Y+7	; 0x07
    1c06:	98 85       	ldd	r25, Y+8	; 0x08
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	59 f1       	breq	.+86     	; 0x1c64 <DIO_u8SetPinValue+0x96>
    1c0e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c10:	38 85       	ldd	r19, Y+8	; 0x08
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <DIO_u8SetPinValue+0x54>
    1c18:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1a:	98 85       	ldd	r25, Y+8	; 0x08
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f0       	breq	.+26     	; 0x1c3a <DIO_u8SetPinValue+0x6c>
    1c20:	60 c0       	rjmp	.+192    	; 0x1ce2 <DIO_u8SetPinValue+0x114>
    1c22:	2f 81       	ldd	r18, Y+7	; 0x07
    1c24:	38 85       	ldd	r19, Y+8	; 0x08
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	89 f1       	breq	.+98     	; 0x1c8e <DIO_u8SetPinValue+0xc0>
    1c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2e:	98 85       	ldd	r25, Y+8	; 0x08
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <DIO_u8SetPinValue+0x6a>
    1c36:	40 c0       	rjmp	.+128    	; 0x1cb8 <DIO_u8SetPinValue+0xea>
    1c38:	54 c0       	rjmp	.+168    	; 0x1ce2 <DIO_u8SetPinValue+0x114>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1c3a:	ab e3       	ldi	r26, 0x3B	; 59
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	eb e3       	ldi	r30, 0x3B	; 59
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_u8SetPinValue+0x8a>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_u8SetPinValue+0x86>
    1c5c:	80 95       	com	r24
    1c5e:	84 23       	and	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	bd c0       	rjmp	.+378    	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1c64:	a8 e3       	ldi	r26, 0x38	; 56
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e8 e3       	ldi	r30, 0x38	; 56
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <DIO_u8SetPinValue+0xb4>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <DIO_u8SetPinValue+0xb0>
    1c86:	80 95       	com	r24
    1c88:	84 23       	and	r24, r20
    1c8a:	8c 93       	st	X, r24
    1c8c:	a8 c0       	rjmp	.+336    	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1c8e:	a5 e3       	ldi	r26, 0x35	; 53
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e3       	ldi	r30, 0x35	; 53
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_u8SetPinValue+0xde>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_u8SetPinValue+0xda>
    1cb0:	80 95       	com	r24
    1cb2:	84 23       	and	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	93 c0       	rjmp	.+294    	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1cb8:	a2 e3       	ldi	r26, 0x32	; 50
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e2 e3       	ldi	r30, 0x32	; 50
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_u8SetPinValue+0x108>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_u8SetPinValue+0x104>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	7e c0       	rjmp	.+252    	; 0x1dde <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState= NOK; break;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	7b c0       	rjmp	.+246    	; 0x1dde <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <DIO_u8SetPinValue+0x122>
    1cee:	72 c0       	rjmp	.+228    	; 0x1dd4 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3e 83       	std	Y+6, r19	; 0x06
    1cf8:	2d 83       	std	Y+5, r18	; 0x05
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	49 f1       	breq	.+82     	; 0x1d56 <DIO_u8SetPinValue+0x188>
    1d04:	2d 81       	ldd	r18, Y+5	; 0x05
    1d06:	3e 81       	ldd	r19, Y+6	; 0x06
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <DIO_u8SetPinValue+0x14a>
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <DIO_u8SetPinValue+0x160>
    1d16:	5b c0       	rjmp	.+182    	; 0x1dce <DIO_u8SetPinValue+0x200>
    1d18:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	71 f1       	breq	.+92     	; 0x1d7e <DIO_u8SetPinValue+0x1b0>
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	91 05       	cpc	r25, r1
    1d2a:	e9 f1       	breq	.+122    	; 0x1da6 <DIO_u8SetPinValue+0x1d8>
    1d2c:	50 c0       	rjmp	.+160    	; 0x1dce <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_u8SetPinValue+0x17e>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_u8SetPinValue+0x17a>
    1d50:	84 2b       	or	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	44 c0       	rjmp	.+136    	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1d56:	a8 e3       	ldi	r26, 0x38	; 56
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <DIO_u8SetPinValue+0x1a6>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <DIO_u8SetPinValue+0x1a2>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	30 c0       	rjmp	.+96     	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1d7e:	a5 e3       	ldi	r26, 0x35	; 53
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_u8SetPinValue+0x1ce>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_u8SetPinValue+0x1ca>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	1c c0       	rjmp	.+56     	; 0x1dde <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_u8SetPinValue+0x1f6>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_u8SetPinValue+0x1f2>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	08 c0       	rjmp	.+16     	; 0x1dde <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState= NOK; break;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	28 96       	adiw	r28, 0x08	; 8
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <DIO_u8GetPinValue>:
uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	27 97       	sbiw	r28, 0x07	; 7
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	6b 83       	std	Y+3, r22	; 0x03
    1e0a:	5d 83       	std	Y+5, r21	; 0x05
    1e0c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState=OK;
    1e0e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value==NULL)
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	19 f4       	brne	.+6      	; 0x1e1e <DIO_u8GetPinValue+0x2c>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	7a c0       	rjmp	.+244    	; 0x1f12 <DIO_u8GetPinValue+0x120>
	}
	else
	{
		if(Copy_u8Pin<=7)
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <DIO_u8GetPinValue+0x34>
    1e24:	74 c0       	rjmp	.+232    	; 0x1f0e <DIO_u8GetPinValue+0x11c>
		{
	    	switch(Copy_u8Port)
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3f 83       	std	Y+7, r19	; 0x07
    1e2e:	2e 83       	std	Y+6, r18	; 0x06
    1e30:	4e 81       	ldd	r20, Y+6	; 0x06
    1e32:	5f 81       	ldd	r21, Y+7	; 0x07
    1e34:	41 30       	cpi	r20, 0x01	; 1
    1e36:	51 05       	cpc	r21, r1
    1e38:	59 f1       	breq	.+86     	; 0x1e90 <DIO_u8GetPinValue+0x9e>
    1e3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	34 f4       	brge	.+12     	; 0x1e50 <DIO_u8GetPinValue+0x5e>
    1e44:	2e 81       	ldd	r18, Y+6	; 0x06
    1e46:	3f 81       	ldd	r19, Y+7	; 0x07
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	69 f0       	breq	.+26     	; 0x1e68 <DIO_u8GetPinValue+0x76>
    1e4e:	5c c0       	rjmp	.+184    	; 0x1f08 <DIO_u8GetPinValue+0x116>
    1e50:	4e 81       	ldd	r20, Y+6	; 0x06
    1e52:	5f 81       	ldd	r21, Y+7	; 0x07
    1e54:	42 30       	cpi	r20, 0x02	; 2
    1e56:	51 05       	cpc	r21, r1
    1e58:	79 f1       	breq	.+94     	; 0x1eb8 <DIO_u8GetPinValue+0xc6>
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	91 05       	cpc	r25, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <DIO_u8GetPinValue+0x74>
    1e64:	3d c0       	rjmp	.+122    	; 0x1ee0 <DIO_u8GetPinValue+0xee>
    1e66:	50 c0       	rjmp	.+160    	; 0x1f08 <DIO_u8GetPinValue+0x116>
			{
			   	case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1e68:	e9 e3       	ldi	r30, 0x39	; 57
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_u8GetPinValue+0x8e>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_u8GetPinValue+0x8a>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	80 83       	st	Z, r24
    1e8e:	41 c0       	rjmp	.+130    	; 0x1f12 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    1e90:	e6 e3       	ldi	r30, 0x36	; 54
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DIO_u8GetPinValue+0xb6>
    1ea4:	55 95       	asr	r21
    1ea6:	47 95       	ror	r20
    1ea8:	8a 95       	dec	r24
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <DIO_u8GetPinValue+0xb2>
    1eac:	ca 01       	movw	r24, r20
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb2:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb4:	80 83       	st	Z, r24
    1eb6:	2d c0       	rjmp	.+90     	; 0x1f12 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    1eb8:	e3 e3       	ldi	r30, 0x33	; 51
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8GetPinValue+0xde>
    1ecc:	55 95       	asr	r21
    1ece:	47 95       	ror	r20
    1ed0:	8a 95       	dec	r24
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8GetPinValue+0xda>
    1ed4:	ca 01       	movw	r24, r20
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	ec 81       	ldd	r30, Y+4	; 0x04
    1eda:	fd 81       	ldd	r31, Y+5	; 0x05
    1edc:	80 83       	st	Z, r24
    1ede:	19 c0       	rjmp	.+50     	; 0x1f12 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    1ee0:	e0 e3       	ldi	r30, 0x30	; 48
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a9 01       	movw	r20, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <DIO_u8GetPinValue+0x106>
    1ef4:	55 95       	asr	r21
    1ef6:	47 95       	ror	r20
    1ef8:	8a 95       	dec	r24
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <DIO_u8GetPinValue+0x102>
    1efc:	ca 01       	movw	r24, r20
    1efe:	81 70       	andi	r24, 0x01	; 1
    1f00:	ec 81       	ldd	r30, Y+4	; 0x04
    1f02:	fd 81       	ldd	r31, Y+5	; 0x05
    1f04:	80 83       	st	Z, r24
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <DIO_u8GetPinValue+0x120>
				default: Local_u8ErrorState= NOK; break;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_u8GetPinValue+0x120>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		return Local_u8ErrorState;
    1f12:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f14:	27 96       	adiw	r28, 0x07	; 7
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <DIO_u8SetPortDirection>:
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <DIO_u8SetPortDirection+0x6>
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <DIO_u8SetPortDirection+0x8>
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	8a 83       	std	Y+2, r24	; 0x02
    1f36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1f38:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	84 30       	cpi	r24, 0x04	; 4
    1f3e:	b0 f5       	brcc	.+108    	; 0x1fac <DIO_u8SetPortDirection+0x86>
	{
		switch(Copy_u8Port)
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	3d 83       	std	Y+5, r19	; 0x05
    1f48:	2c 83       	std	Y+4, r18	; 0x04
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	91 05       	cpc	r25, r1
    1f52:	d1 f0       	breq	.+52     	; 0x1f88 <DIO_u8SetPortDirection+0x62>
    1f54:	2c 81       	ldd	r18, Y+4	; 0x04
    1f56:	3d 81       	ldd	r19, Y+5	; 0x05
    1f58:	22 30       	cpi	r18, 0x02	; 2
    1f5a:	31 05       	cpc	r19, r1
    1f5c:	2c f4       	brge	.+10     	; 0x1f68 <DIO_u8SetPortDirection+0x42>
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	9d 81       	ldd	r25, Y+5	; 0x05
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <DIO_u8SetPortDirection+0x58>
    1f66:	1f c0       	rjmp	.+62     	; 0x1fa6 <DIO_u8SetPortDirection+0x80>
    1f68:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6c:	22 30       	cpi	r18, 0x02	; 2
    1f6e:	31 05       	cpc	r19, r1
    1f70:	81 f0       	breq	.+32     	; 0x1f92 <DIO_u8SetPortDirection+0x6c>
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	83 30       	cpi	r24, 0x03	; 3
    1f78:	91 05       	cpc	r25, r1
    1f7a:	81 f0       	breq	.+32     	; 0x1f9c <DIO_u8SetPortDirection+0x76>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <DIO_u8SetPortDirection+0x80>
		{
		case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    1f7e:	ea e3       	ldi	r30, 0x3A	; 58
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	80 83       	st	Z, r24
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    1f88:	e7 e3       	ldi	r30, 0x37	; 55
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	80 83       	st	Z, r24
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    1f92:	e4 e3       	ldi	r30, 0x34	; 52
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	80 83       	st	Z, r24
    1f9a:	0a c0       	rjmp	.+20     	; 0x1fb0 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    1f9c:	e1 e3       	ldi	r30, 0x31	; 49
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	80 83       	st	Z, r24
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <DIO_u8SetPortDirection+0x8a>
		default : Local_u8ErrorState=NOK; break;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <DIO_u8SetPortDirection+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <DIO_u8SetPortValue>:
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_u8SetPortValue+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_u8SetPortValue+0x8>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1fd4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	b0 f5       	brcc	.+108    	; 0x2048 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	3d 83       	std	Y+5, r19	; 0x05
    1fe4:	2c 83       	std	Y+4, r18	; 0x04
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	91 05       	cpc	r25, r1
    1fee:	d1 f0       	breq	.+52     	; 0x2024 <DIO_u8SetPortValue+0x62>
    1ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <DIO_u8SetPortValue+0x42>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	61 f0       	breq	.+24     	; 0x201a <DIO_u8SetPortValue+0x58>
    2002:	1f c0       	rjmp	.+62     	; 0x2042 <DIO_u8SetPortValue+0x80>
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	81 f0       	breq	.+32     	; 0x202e <DIO_u8SetPortValue+0x6c>
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	9d 81       	ldd	r25, Y+5	; 0x05
    2012:	83 30       	cpi	r24, 0x03	; 3
    2014:	91 05       	cpc	r25, r1
    2016:	81 f0       	breq	.+32     	; 0x2038 <DIO_u8SetPortValue+0x76>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <DIO_u8SetPortValue+0x80>
		{
	    	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    201a:	eb e3       	ldi	r30, 0x3B	; 59
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	80 83       	st	Z, r24
    2022:	14 c0       	rjmp	.+40     	; 0x204c <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    2024:	e8 e3       	ldi	r30, 0x38	; 56
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	80 83       	st	Z, r24
    202c:	0f c0       	rjmp	.+30     	; 0x204c <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    202e:	e5 e3       	ldi	r30, 0x35	; 53
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	80 83       	st	Z, r24
    2036:	0a c0       	rjmp	.+20     	; 0x204c <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    2038:	e2 e3       	ldi	r30, 0x32	; 50
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	80 83       	st	Z, r24
    2040:	05 c0       	rjmp	.+10     	; 0x204c <DIO_u8SetPortValue+0x8a>
		    default : Local_u8ErrorState=NOK; break;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	02 c0       	rjmp	.+4      	; 0x204c <DIO_u8SetPortValue+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <DIO_u8TogglePinValue>:
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <DIO_u8TogglePinValue+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_u8TogglePinValue+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	8a 83       	std	Y+2, r24	; 0x02
    206e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    2070:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 30       	cpi	r24, 0x08	; 8
    2076:	08 f0       	brcs	.+2      	; 0x207a <DIO_u8TogglePinValue+0x1c>
    2078:	72 c0       	rjmp	.+228    	; 0x215e <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	3d 83       	std	Y+5, r19	; 0x05
    2082:	2c 83       	std	Y+4, r18	; 0x04
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	91 05       	cpc	r25, r1
    208c:	49 f1       	breq	.+82     	; 0x20e0 <DIO_u8TogglePinValue+0x82>
    208e:	2c 81       	ldd	r18, Y+4	; 0x04
    2090:	3d 81       	ldd	r19, Y+5	; 0x05
    2092:	22 30       	cpi	r18, 0x02	; 2
    2094:	31 05       	cpc	r19, r1
    2096:	2c f4       	brge	.+10     	; 0x20a2 <DIO_u8TogglePinValue+0x44>
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	9d 81       	ldd	r25, Y+5	; 0x05
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	61 f0       	breq	.+24     	; 0x20b8 <DIO_u8TogglePinValue+0x5a>
    20a0:	5b c0       	rjmp	.+182    	; 0x2158 <DIO_u8TogglePinValue+0xfa>
    20a2:	2c 81       	ldd	r18, Y+4	; 0x04
    20a4:	3d 81       	ldd	r19, Y+5	; 0x05
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	71 f1       	breq	.+92     	; 0x2108 <DIO_u8TogglePinValue+0xaa>
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	e9 f1       	breq	.+122    	; 0x2130 <DIO_u8TogglePinValue+0xd2>
    20b6:	50 c0       	rjmp	.+160    	; 0x2158 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA :TOG_BIT(PORTA,Copy_u8Pin); break;
    20b8:	ab e3       	ldi	r26, 0x3B	; 59
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e3       	ldi	r30, 0x3B	; 59
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <DIO_u8TogglePinValue+0x78>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <DIO_u8TogglePinValue+0x74>
    20da:	84 27       	eor	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	41 c0       	rjmp	.+130    	; 0x2162 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB :TOG_BIT(PORTB,Copy_u8Pin); break;
    20e0:	a8 e3       	ldi	r26, 0x38	; 56
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e8 e3       	ldi	r30, 0x38	; 56
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_u8TogglePinValue+0xa0>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_u8TogglePinValue+0x9c>
    2102:	84 27       	eor	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	2d c0       	rjmp	.+90     	; 0x2162 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC :TOG_BIT(PORTC,Copy_u8Pin); break;
    2108:	a5 e3       	ldi	r26, 0x35	; 53
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e5 e3       	ldi	r30, 0x35	; 53
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	48 2f       	mov	r20, r24
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	02 2e       	mov	r0, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_u8TogglePinValue+0xc8>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	0a 94       	dec	r0
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_u8TogglePinValue+0xc4>
    212a:	84 27       	eor	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	19 c0       	rjmp	.+50     	; 0x2162 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD :TOG_BIT(PORTD,Copy_u8Pin); break;
    2130:	a2 e3       	ldi	r26, 0x32	; 50
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	48 2f       	mov	r20, r24
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	02 2e       	mov	r0, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_u8TogglePinValue+0xf0>
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	0a 94       	dec	r0
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_u8TogglePinValue+0xec>
    2152:	84 27       	eor	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	05 c0       	rjmp	.+10     	; 0x2162 <DIO_u8TogglePinValue+0x104>
		default :Local_u8ErrorState=NOK; break;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <DIO_u8TogglePinValue+0x104>
		}

	}
	else
	{
		Local_u8ErrorState=NOK;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <EXTI_voidInit>:

static FuncPtr EXTI_pfCallBack[3] = {NULL}/*Array of pointers to function to hold ISR callbacks*/;


void EXTI_voidInit(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE_CTR == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif INT0_SENSE_CTRL  ==  EXTI_u8FALLINGEDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    217c:	a5 e5       	ldi	r26, 0x55	; 85
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e5       	ldi	r30, 0x55	; 85
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8e 7f       	andi	r24, 0xFE	; 254
    2188:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    218a:	a5 e5       	ldi	r26, 0x55	; 85
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e5 e5       	ldi	r30, 0x55	; 85
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	82 60       	ori	r24, 0x02	; 2
    2196:	8c 93       	st	X, r24
#endif
	/*implement INT0 intial state configuration*/
#if INT0_INTIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#elif INT0_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    2198:	ab e5       	ldi	r26, 0x5B	; 91
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	eb e5       	ldi	r30, 0x5B	; 91
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	80 64       	ori	r24, 0x40	; 64
    21a4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE_CTR == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);
#elif INT1_SENSE_CTRL  ==  EXTI_u8FALLINGEDGE
	CLR_BIT(MCUCR,MCUCR_ISC10);
    21a6:	a5 e5       	ldi	r26, 0x55	; 85
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e5       	ldi	r30, 0x55	; 85
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8b 7f       	andi	r24, 0xFB	; 251
    21b2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
    21b4:	a5 e5       	ldi	r26, 0x55	; 85
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e5 e5       	ldi	r30, 0x55	; 85
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	88 60       	ori	r24, 0x08	; 8
    21c0:	8c 93       	st	X, r24
#endif
	/*implement INT1 intial state configuration*/
#if INT1_INTIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#elif INT1_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
    21c2:	ab e5       	ldi	r26, 0x5B	; 91
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	eb e5       	ldi	r30, 0x5B	; 91
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	8c 93       	st	X, r24
#else
#error wrong INT1_INTIAL_STATE configuration macro
#endif
	/*implement INT2 sense control configuration*/
#if INT2_SENSE_CTRL  ==  EXTI_u8FALLINGEDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    21d0:	a4 e5       	ldi	r26, 0x54	; 84
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e4 e5       	ldi	r30, 0x54	; 84
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8f 7b       	andi	r24, 0xBF	; 191
    21dc:	8c 93       	st	X, r24
#endif
	/*implement INT2 intial state configuration*/
#if INT2_INTIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
#elif INT2_INTIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT2);
    21de:	ab e5       	ldi	r26, 0x5B	; 91
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	eb e5       	ldi	r30, 0x5B	; 91
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 62       	ori	r24, 0x20	; 32
    21ea:	8c 93       	st	X, r24
#else
#error wrong INT2_INTIAL_STATE configuration macro
#endif

}
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <EXTI_u8SenseCtrl>:

uint8 EXTI_u8SenseCtrl(uint8 Copy_u8IntNum,uint8 Copy_u8Sense)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	2b 97       	sbiw	r28, 0x0b	; 11
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8ErrorState=OK;
    220a:	19 82       	std	Y+1, r1	; 0x01
    switch  (Copy_u8IntNum)
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3b 87       	std	Y+11, r19	; 0x0b
    2214:	2a 87       	std	Y+10, r18	; 0x0a
    2216:	8a 85       	ldd	r24, Y+10	; 0x0a
    2218:	9b 85       	ldd	r25, Y+11	; 0x0b
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	91 05       	cpc	r25, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <EXTI_u8SenseCtrl+0x30>
    2220:	6a c0       	rjmp	.+212    	; 0x22f6 <EXTI_u8SenseCtrl+0x104>
    2222:	2a 85       	ldd	r18, Y+10	; 0x0a
    2224:	3b 85       	ldd	r19, Y+11	; 0x0b
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <EXTI_u8SenseCtrl+0x3c>
    222c:	c3 c0       	rjmp	.+390    	; 0x23b4 <EXTI_u8SenseCtrl+0x1c2>
    222e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2230:	9b 85       	ldd	r25, Y+11	; 0x0b
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	09 f0       	breq	.+2      	; 0x2238 <EXTI_u8SenseCtrl+0x46>
    2236:	e1 c0       	rjmp	.+450    	; 0x23fa <EXTI_u8SenseCtrl+0x208>
    {
    case EXTI_u8INT0 :
    	switch(Copy_u8Sense)
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	39 87       	std	Y+9, r19	; 0x09
    2240:	28 87       	std	Y+8, r18	; 0x08
    2242:	88 85       	ldd	r24, Y+8	; 0x08
    2244:	99 85       	ldd	r25, Y+9	; 0x09
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	91 05       	cpc	r25, r1
    224a:	29 f1       	breq	.+74     	; 0x2296 <EXTI_u8SenseCtrl+0xa4>
    224c:	28 85       	ldd	r18, Y+8	; 0x08
    224e:	39 85       	ldd	r19, Y+9	; 0x09
    2250:	23 30       	cpi	r18, 0x03	; 3
    2252:	31 05       	cpc	r19, r1
    2254:	34 f4       	brge	.+12     	; 0x2262 <EXTI_u8SenseCtrl+0x70>
    2256:	88 85       	ldd	r24, Y+8	; 0x08
    2258:	99 85       	ldd	r25, Y+9	; 0x09
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	61 f0       	breq	.+24     	; 0x2278 <EXTI_u8SenseCtrl+0x86>
    2260:	47 c0       	rjmp	.+142    	; 0x22f0 <EXTI_u8SenseCtrl+0xfe>
    2262:	28 85       	ldd	r18, Y+8	; 0x08
    2264:	39 85       	ldd	r19, Y+9	; 0x09
    2266:	23 30       	cpi	r18, 0x03	; 3
    2268:	31 05       	cpc	r19, r1
    226a:	21 f1       	breq	.+72     	; 0x22b4 <EXTI_u8SenseCtrl+0xc2>
    226c:	88 85       	ldd	r24, Y+8	; 0x08
    226e:	99 85       	ldd	r25, Y+9	; 0x09
    2270:	84 30       	cpi	r24, 0x04	; 4
    2272:	91 05       	cpc	r25, r1
    2274:	71 f1       	breq	.+92     	; 0x22d2 <EXTI_u8SenseCtrl+0xe0>
    2276:	3c c0       	rjmp	.+120    	; 0x22f0 <EXTI_u8SenseCtrl+0xfe>
    	{
    	case EXTI_u8LOW_LEVEL : CLR_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    2278:	a5 e5       	ldi	r26, 0x55	; 85
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e5 e5       	ldi	r30, 0x55	; 85
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	8c 93       	st	X, r24
    2286:	a5 e5       	ldi	r26, 0x55	; 85
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e5 e5       	ldi	r30, 0x55	; 85
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8d 7f       	andi	r24, 0xFD	; 253
    2292:	8c 93       	st	X, r24
    2294:	b4 c0       	rjmp	.+360    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	case EXTI_u8ON_CHANGE : SET_BIT(MCUCR,MCUCR_ISC00);CLR_BIT(MCUCR,MCUCR_ISC01);break;
    2296:	a5 e5       	ldi	r26, 0x55	; 85
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e5 e5       	ldi	r30, 0x55	; 85
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	8c 93       	st	X, r24
    22a4:	a5 e5       	ldi	r26, 0x55	; 85
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e5 e5       	ldi	r30, 0x55	; 85
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8d 7f       	andi	r24, 0xFD	; 253
    22b0:	8c 93       	st	X, r24
    22b2:	a5 c0       	rjmp	.+330    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	case EXTI_u8FALLINGEDGE : CLR_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    22b4:	a5 e5       	ldi	r26, 0x55	; 85
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e5 e5       	ldi	r30, 0x55	; 85
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8e 7f       	andi	r24, 0xFE	; 254
    22c0:	8c 93       	st	X, r24
    22c2:	a5 e5       	ldi	r26, 0x55	; 85
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e5 e5       	ldi	r30, 0x55	; 85
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	82 60       	ori	r24, 0x02	; 2
    22ce:	8c 93       	st	X, r24
    22d0:	96 c0       	rjmp	.+300    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	case EXTI_u8RISINGEDGE : SET_BIT(MCUCR,MCUCR_ISC00);SET_BIT(MCUCR,MCUCR_ISC01);break;
    22d2:	a5 e5       	ldi	r26, 0x55	; 85
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e5 e5       	ldi	r30, 0x55	; 85
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	81 60       	ori	r24, 0x01	; 1
    22de:	8c 93       	st	X, r24
    22e0:	a5 e5       	ldi	r26, 0x55	; 85
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e5       	ldi	r30, 0x55	; 85
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	82 60       	ori	r24, 0x02	; 2
    22ec:	8c 93       	st	X, r24
    22ee:	87 c0       	rjmp	.+270    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	default : Local_u8ErrorState=NOK;break;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	84 c0       	rjmp	.+264    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	}break;
        case EXTI_u8INT1 :
        	switch(Copy_u8Sense)
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3f 83       	std	Y+7, r19	; 0x07
    22fe:	2e 83       	std	Y+6, r18	; 0x06
    2300:	8e 81       	ldd	r24, Y+6	; 0x06
    2302:	9f 81       	ldd	r25, Y+7	; 0x07
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	91 05       	cpc	r25, r1
    2308:	29 f1       	breq	.+74     	; 0x2354 <EXTI_u8SenseCtrl+0x162>
    230a:	2e 81       	ldd	r18, Y+6	; 0x06
    230c:	3f 81       	ldd	r19, Y+7	; 0x07
    230e:	23 30       	cpi	r18, 0x03	; 3
    2310:	31 05       	cpc	r19, r1
    2312:	34 f4       	brge	.+12     	; 0x2320 <EXTI_u8SenseCtrl+0x12e>
    2314:	8e 81       	ldd	r24, Y+6	; 0x06
    2316:	9f 81       	ldd	r25, Y+7	; 0x07
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	91 05       	cpc	r25, r1
    231c:	61 f0       	breq	.+24     	; 0x2336 <EXTI_u8SenseCtrl+0x144>
    231e:	47 c0       	rjmp	.+142    	; 0x23ae <EXTI_u8SenseCtrl+0x1bc>
    2320:	2e 81       	ldd	r18, Y+6	; 0x06
    2322:	3f 81       	ldd	r19, Y+7	; 0x07
    2324:	23 30       	cpi	r18, 0x03	; 3
    2326:	31 05       	cpc	r19, r1
    2328:	21 f1       	breq	.+72     	; 0x2372 <EXTI_u8SenseCtrl+0x180>
    232a:	8e 81       	ldd	r24, Y+6	; 0x06
    232c:	9f 81       	ldd	r25, Y+7	; 0x07
    232e:	84 30       	cpi	r24, 0x04	; 4
    2330:	91 05       	cpc	r25, r1
    2332:	71 f1       	breq	.+92     	; 0x2390 <EXTI_u8SenseCtrl+0x19e>
    2334:	3c c0       	rjmp	.+120    	; 0x23ae <EXTI_u8SenseCtrl+0x1bc>
        	{
        	case EXTI_u8LOW_LEVEL : CLR_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    2336:	a5 e5       	ldi	r26, 0x55	; 85
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e5 e5       	ldi	r30, 0x55	; 85
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	8b 7f       	andi	r24, 0xFB	; 251
    2342:	8c 93       	st	X, r24
    2344:	a5 e5       	ldi	r26, 0x55	; 85
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e5 e5       	ldi	r30, 0x55	; 85
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	87 7f       	andi	r24, 0xF7	; 247
    2350:	8c 93       	st	X, r24
    2352:	55 c0       	rjmp	.+170    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
        	case EXTI_u8ON_CHANGE : SET_BIT(MCUCR,MCUCR_ISC10);CLR_BIT(MCUCR,MCUCR_ISC11);break;
    2354:	a5 e5       	ldi	r26, 0x55	; 85
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e5 e5       	ldi	r30, 0x55	; 85
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	84 60       	ori	r24, 0x04	; 4
    2360:	8c 93       	st	X, r24
    2362:	a5 e5       	ldi	r26, 0x55	; 85
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e5 e5       	ldi	r30, 0x55	; 85
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	87 7f       	andi	r24, 0xF7	; 247
    236e:	8c 93       	st	X, r24
    2370:	46 c0       	rjmp	.+140    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
        	case EXTI_u8FALLINGEDGE : CLR_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2372:	a5 e5       	ldi	r26, 0x55	; 85
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e5       	ldi	r30, 0x55	; 85
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8b 7f       	andi	r24, 0xFB	; 251
    237e:	8c 93       	st	X, r24
    2380:	a5 e5       	ldi	r26, 0x55	; 85
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e5 e5       	ldi	r30, 0x55	; 85
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	88 60       	ori	r24, 0x08	; 8
    238c:	8c 93       	st	X, r24
    238e:	37 c0       	rjmp	.+110    	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
        	case EXTI_u8RISINGEDGE : SET_BIT(MCUCR,MCUCR_ISC10);SET_BIT(MCUCR,MCUCR_ISC11);break;
    2390:	a5 e5       	ldi	r26, 0x55	; 85
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e5 e5       	ldi	r30, 0x55	; 85
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	84 60       	ori	r24, 0x04	; 4
    239c:	8c 93       	st	X, r24
    239e:	a5 e5       	ldi	r26, 0x55	; 85
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e5 e5       	ldi	r30, 0x55	; 85
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	88 60       	ori	r24, 0x08	; 8
    23aa:	8c 93       	st	X, r24
    23ac:	28 c0       	rjmp	.+80     	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
        	default : Local_u8ErrorState=NOK;break;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	89 83       	std	Y+1, r24	; 0x01
    23b2:	25 c0       	rjmp	.+74     	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	}break;
    case EXTI_u8INT2 :
    	switch(Copy_u8Sense)
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	3d 83       	std	Y+5, r19	; 0x05
    23bc:	2c 83       	std	Y+4, r18	; 0x04
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	83 30       	cpi	r24, 0x03	; 3
    23c4:	91 05       	cpc	r25, r1
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <EXTI_u8SenseCtrl+0x1e2>
    23c8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ca:	3d 81       	ldd	r19, Y+5	; 0x05
    23cc:	24 30       	cpi	r18, 0x04	; 4
    23ce:	31 05       	cpc	r19, r1
    23d0:	49 f0       	breq	.+18     	; 0x23e4 <EXTI_u8SenseCtrl+0x1f2>
    23d2:	10 c0       	rjmp	.+32     	; 0x23f4 <EXTI_u8SenseCtrl+0x202>
    	{
    	case EXTI_u8FALLINGEDGE : CLR_BIT(MCUCSR,MCUCSR_ISC2);break;
    23d4:	a4 e5       	ldi	r26, 0x54	; 84
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e4 e5       	ldi	r30, 0x54	; 84
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8f 7b       	andi	r24, 0xBF	; 191
    23e0:	8c 93       	st	X, r24
    23e2:	0d c0       	rjmp	.+26     	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	case EXTI_u8RISINGEDGE : SET_BIT(MCUCSR,MCUCSR_ISC2);break;
    23e4:	a4 e5       	ldi	r26, 0x54	; 84
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e4 e5       	ldi	r30, 0x54	; 84
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	8c 93       	st	X, r24
    23f2:	05 c0       	rjmp	.+10     	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	default : Local_u8ErrorState=NOK;break;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <EXTI_u8SenseCtrl+0x20c>
    	}break;
    default : Local_u8ErrorState=NOK;break;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	2b 96       	adiw	r28, 0x0b	; 11
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <EXTI_u8IntEnable>:

uint8 EXTI_u8IntEnable(uint8 Copy_u8IntNum)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	00 d0       	rcall	.+0      	; 0x2418 <EXTI_u8IntEnable+0x6>
    2418:	00 d0       	rcall	.+0      	; 0x241a <EXTI_u8IntEnable+0x8>
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    2420:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8IntNum)
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	28 2f       	mov	r18, r24
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	3c 83       	std	Y+4, r19	; 0x04
    242a:	2b 83       	std	Y+3, r18	; 0x03
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	89 f0       	breq	.+34     	; 0x2458 <EXTI_u8IntEnable+0x46>
    2436:	2b 81       	ldd	r18, Y+3	; 0x03
    2438:	3c 81       	ldd	r19, Y+4	; 0x04
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	a1 f0       	breq	.+40     	; 0x2468 <EXTI_u8IntEnable+0x56>
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	c1 f4       	brne	.+48     	; 0x2478 <EXTI_u8IntEnable+0x66>
    {
    case EXTI_u8INT0 : SET_BIT(GICR,GICR_INT0);break;
    2448:	ab e5       	ldi	r26, 0x5B	; 91
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	eb e5       	ldi	r30, 0x5B	; 91
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 64       	ori	r24, 0x40	; 64
    2454:	8c 93       	st	X, r24
    2456:	12 c0       	rjmp	.+36     	; 0x247c <EXTI_u8IntEnable+0x6a>
    case EXTI_u8INT1 : SET_BIT(GICR,GICR_INT1);break;
    2458:	ab e5       	ldi	r26, 0x5B	; 91
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	eb e5       	ldi	r30, 0x5B	; 91
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 68       	ori	r24, 0x80	; 128
    2464:	8c 93       	st	X, r24
    2466:	0a c0       	rjmp	.+20     	; 0x247c <EXTI_u8IntEnable+0x6a>
    case EXTI_u8INT2 : SET_BIT(GICR,GICR_INT2);break;
    2468:	ab e5       	ldi	r26, 0x5B	; 91
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	eb e5       	ldi	r30, 0x5B	; 91
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	80 62       	ori	r24, 0x20	; 32
    2474:	8c 93       	st	X, r24
    2476:	02 c0       	rjmp	.+4      	; 0x247c <EXTI_u8IntEnable+0x6a>
    default : Local_u8ErrorState=NOK;break;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <EXTI_u8IntDisable>:
uint8 EXTI_u8IntDisable(uint8 Copy_u8IntNum)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <EXTI_u8IntDisable+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <EXTI_u8IntDisable+0x8>
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Local_u8ErrorState = OK;
    249a:	19 82       	std	Y+1, r1	; 0x01
    switch(Copy_u8IntNum)
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	3c 83       	std	Y+4, r19	; 0x04
    24a4:	2b 83       	std	Y+3, r18	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	91 05       	cpc	r25, r1
    24ae:	89 f0       	breq	.+34     	; 0x24d2 <EXTI_u8IntDisable+0x46>
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	22 30       	cpi	r18, 0x02	; 2
    24b6:	31 05       	cpc	r19, r1
    24b8:	a1 f0       	breq	.+40     	; 0x24e2 <EXTI_u8IntDisable+0x56>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	c1 f4       	brne	.+48     	; 0x24f2 <EXTI_u8IntDisable+0x66>
    {
    case EXTI_u8INT0 : CLR_BIT(GICR,GICR_INT0);break;
    24c2:	ab e5       	ldi	r26, 0x5B	; 91
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	eb e5       	ldi	r30, 0x5B	; 91
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	8f 7b       	andi	r24, 0xBF	; 191
    24ce:	8c 93       	st	X, r24
    24d0:	12 c0       	rjmp	.+36     	; 0x24f6 <EXTI_u8IntDisable+0x6a>
    case EXTI_u8INT1 : CLR_BIT(GICR,GICR_INT1);break;
    24d2:	ab e5       	ldi	r26, 0x5B	; 91
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	eb e5       	ldi	r30, 0x5B	; 91
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	8f 77       	andi	r24, 0x7F	; 127
    24de:	8c 93       	st	X, r24
    24e0:	0a c0       	rjmp	.+20     	; 0x24f6 <EXTI_u8IntDisable+0x6a>
    case EXTI_u8INT2 : CLR_BIT(GICR,GICR_INT2);break;
    24e2:	ab e5       	ldi	r26, 0x5B	; 91
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	eb e5       	ldi	r30, 0x5B	; 91
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	8c 93       	st	X, r24
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <EXTI_u8IntDisable+0x6a>
    default : Local_u8ErrorState=NOK;break;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8ErrorState;
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <EXTI_u8SetCallBack>:
uint8 EXTI_u8SetCallBack(uint8 Copy_u8IntNum,FuncPtr Copy_pfFuncPtr)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	00 d0       	rcall	.+0      	; 0x250c <EXTI_u8SetCallBack+0x6>
    250c:	00 d0       	rcall	.+0      	; 0x250e <EXTI_u8SetCallBack+0x8>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	7c 83       	std	Y+4, r23	; 0x04
    2516:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    2518:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pfFuncPtr != NULL)
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f0       	breq	.+26     	; 0x253c <EXTI_u8SetCallBack+0x36>
	{
		 EXTI_pfCallBack[Copy_u8IntNum]=Copy_pfFuncPtr;
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	fc 01       	movw	r30, r24
    252e:	ed 5b       	subi	r30, 0xBD	; 189
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2540:	89 81       	ldd	r24, Y+1	; 0x01
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <__vector_1>:
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    2550:	1f 92       	push	r1
    2552:	0f 92       	push	r0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	0f 92       	push	r0
    2558:	11 24       	eor	r1, r1
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfCallBack[EXTI_u8INT0] != NULL)
    257a:	80 91 43 01 	lds	r24, 0x0143
    257e:	90 91 44 01 	lds	r25, 0x0144
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	29 f0       	breq	.+10     	; 0x2590 <__vector_1+0x40>
	{
		EXTI_pfCallBack[EXTI_u8INT0]();
    2586:	e0 91 43 01 	lds	r30, 0x0143
    258a:	f0 91 44 01 	lds	r31, 0x0144
    258e:	09 95       	icall
	}

}
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	ff 91       	pop	r31
    2596:	ef 91       	pop	r30
    2598:	bf 91       	pop	r27
    259a:	af 91       	pop	r26
    259c:	9f 91       	pop	r25
    259e:	8f 91       	pop	r24
    25a0:	7f 91       	pop	r23
    25a2:	6f 91       	pop	r22
    25a4:	5f 91       	pop	r21
    25a6:	4f 91       	pop	r20
    25a8:	3f 91       	pop	r19
    25aa:	2f 91       	pop	r18
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	0f 90       	pop	r0
    25b2:	1f 90       	pop	r1
    25b4:	18 95       	reti

000025b6 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    25b6:	1f 92       	push	r1
    25b8:	0f 92       	push	r0
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	0f 92       	push	r0
    25be:	11 24       	eor	r1, r1
    25c0:	2f 93       	push	r18
    25c2:	3f 93       	push	r19
    25c4:	4f 93       	push	r20
    25c6:	5f 93       	push	r21
    25c8:	6f 93       	push	r22
    25ca:	7f 93       	push	r23
    25cc:	8f 93       	push	r24
    25ce:	9f 93       	push	r25
    25d0:	af 93       	push	r26
    25d2:	bf 93       	push	r27
    25d4:	ef 93       	push	r30
    25d6:	ff 93       	push	r31
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfCallBack[EXTI_u8INT1] != NULL)
    25e0:	80 91 45 01 	lds	r24, 0x0145
    25e4:	90 91 46 01 	lds	r25, 0x0146
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	29 f0       	breq	.+10     	; 0x25f6 <__vector_2+0x40>
	{
		EXTI_pfCallBack[EXTI_u8INT1]();
    25ec:	e0 91 45 01 	lds	r30, 0x0145
    25f0:	f0 91 46 01 	lds	r31, 0x0146
    25f4:	09 95       	icall
	}

}
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	ff 91       	pop	r31
    25fc:	ef 91       	pop	r30
    25fe:	bf 91       	pop	r27
    2600:	af 91       	pop	r26
    2602:	9f 91       	pop	r25
    2604:	8f 91       	pop	r24
    2606:	7f 91       	pop	r23
    2608:	6f 91       	pop	r22
    260a:	5f 91       	pop	r21
    260c:	4f 91       	pop	r20
    260e:	3f 91       	pop	r19
    2610:	2f 91       	pop	r18
    2612:	0f 90       	pop	r0
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	0f 90       	pop	r0
    2618:	1f 90       	pop	r1
    261a:	18 95       	reti

0000261c <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    261c:	1f 92       	push	r1
    261e:	0f 92       	push	r0
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	0f 92       	push	r0
    2624:	11 24       	eor	r1, r1
    2626:	2f 93       	push	r18
    2628:	3f 93       	push	r19
    262a:	4f 93       	push	r20
    262c:	5f 93       	push	r21
    262e:	6f 93       	push	r22
    2630:	7f 93       	push	r23
    2632:	8f 93       	push	r24
    2634:	9f 93       	push	r25
    2636:	af 93       	push	r26
    2638:	bf 93       	push	r27
    263a:	ef 93       	push	r30
    263c:	ff 93       	push	r31
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pfCallBack[EXTI_u8INT2] != NULL)
    2646:	80 91 47 01 	lds	r24, 0x0147
    264a:	90 91 48 01 	lds	r25, 0x0148
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	29 f0       	breq	.+10     	; 0x265c <__vector_3+0x40>
	{
		EXTI_pfCallBack[EXTI_u8INT2]();
    2652:	e0 91 47 01 	lds	r30, 0x0147
    2656:	f0 91 48 01 	lds	r31, 0x0148
    265a:	09 95       	icall
	}

}
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	ff 91       	pop	r31
    2662:	ef 91       	pop	r30
    2664:	bf 91       	pop	r27
    2666:	af 91       	pop	r26
    2668:	9f 91       	pop	r25
    266a:	8f 91       	pop	r24
    266c:	7f 91       	pop	r23
    266e:	6f 91       	pop	r22
    2670:	5f 91       	pop	r21
    2672:	4f 91       	pop	r20
    2674:	3f 91       	pop	r19
    2676:	2f 91       	pop	r18
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0
    267e:	1f 90       	pop	r1
    2680:	18 95       	reti

00002682 <GIE_voidEnable>:
#include "GIE_reg.h"
#include "GIE_interface.h"


void GIE_voidEnable(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	 __asm __volatile("SEI"); /*Inline assemble to set I bit*/
    268a:	78 94       	sei
}
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm __volatile("CLI"); /*Inline assemble to clear I bit*/
    269a:	f8 94       	cli
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <KPD_GetPressedKey>:
#include "KPD_private.h"


/*required: All row pins are input pulledup, all coulmn pins are output high*/
uint8 KPD_GetPressedKey(void)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <KPD_GetPressedKey+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <KPD_GetPressedKey+0x8>
    26aa:	0f 92       	push	r0
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey= KPD_u8NO_PRESSED_KEY_VAL;
    26b0:	8f ef       	ldi	r24, 0xFF	; 255
    26b2:	8b 83       	std	Y+3, r24	; 0x03
    static uint8 Local_u8RowArr[KPD_u8ROW_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
    static uint8 Local_u8KpPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM]= KPD_u8BUTTON_ARR;


	/*Activate column pins and read the rows*/
	for(Local_u8ColCounter=0;Local_u8ColCounter<KPD_u8COL_NUM;Local_u8ColCounter++)
    26b4:	19 82       	std	Y+1, r1	; 0x01
    26b6:	5e c0       	rjmp	.+188    	; 0x2774 <KPD_GetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8COLPORT,Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	fc 01       	movw	r30, r24
    26c0:	e1 5e       	subi	r30, 0xE1	; 225
    26c2:	fe 4f       	sbci	r31, 0xFE	; 254
    26c4:	90 81       	ld	r25, Z
    26c6:	83 e0       	ldi	r24, 0x03	; 3
    26c8:	69 2f       	mov	r22, r25
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<KPD_u8ROW_NUM;Local_u8RowCounter++)
    26d0:	1a 82       	std	Y+2, r1	; 0x02
    26d2:	3d c0       	rjmp	.+122    	; 0x274e <KPD_GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_u8ROWPORT,Local_u8RowArr[Local_u8RowCounter],&Local_u8KeyState);
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	fc 01       	movw	r30, r24
    26dc:	e5 5e       	subi	r30, 0xE5	; 229
    26de:	fe 4f       	sbci	r31, 0xFE	; 254
    26e0:	90 81       	ld	r25, Z
    26e2:	9e 01       	movw	r18, r28
    26e4:	2c 5f       	subi	r18, 0xFC	; 252
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	69 2f       	mov	r22, r25
    26ec:	a9 01       	movw	r20, r18
    26ee:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_u8GetPinValue>
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	88 23       	and	r24, r24
    26f6:	41 f5       	brne	.+80     	; 0x2748 <KPD_GetPressedKey+0xa6>
			{
				Local_u8PressedKey= Local_u8KpPDArr[Local_u8RowCounter][Local_u8ColCounter];
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	48 2f       	mov	r20, r24
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	ca 01       	movw	r24, r20
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
    2712:	fc 01       	movw	r30, r24
    2714:	e5 5f       	subi	r30, 0xF5	; 245
    2716:	fe 4f       	sbci	r31, 0xFE	; 254
    2718:	80 81       	ld	r24, Z
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	0f c0       	rjmp	.+30     	; 0x273c <KPD_GetPressedKey+0x9a>

				while(Local_u8KeyState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8ROWPORT,Local_u8RowArr[Local_u8RowCounter],&Local_u8KeyState);
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	e5 5e       	subi	r30, 0xE5	; 229
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	90 81       	ld	r25, Z
    272c:	9e 01       	movw	r18, r28
    272e:	2c 5f       	subi	r18, 0xFC	; 252
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	69 2f       	mov	r22, r25
    2736:	a9 01       	movw	r20, r18
    2738:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_u8ROWPORT,Local_u8RowArr[Local_u8RowCounter],&Local_u8KeyState);
			if(Local_u8KeyState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey= Local_u8KpPDArr[Local_u8RowCounter][Local_u8ColCounter];

				while(Local_u8KeyState==DIO_u8PIN_LOW)
    273c:	8c 81       	ldd	r24, Y+4	; 0x04
    273e:	88 23       	and	r24, r24
    2740:	71 f3       	breq	.-36     	; 0x271e <KPD_GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8ROWPORT,Local_u8RowArr[Local_u8RowCounter],&Local_u8KeyState);
				}
				return Local_u8PressedKey;
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	1c c0       	rjmp	.+56     	; 0x2780 <KPD_GetPressedKey+0xde>
	for(Local_u8ColCounter=0;Local_u8ColCounter<KPD_u8COL_NUM;Local_u8ColCounter++)
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8COLPORT,Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<KPD_u8ROW_NUM;Local_u8RowCounter++)
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	8f 5f       	subi	r24, 0xFF	; 255
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	84 30       	cpi	r24, 0x04	; 4
    2752:	08 f4       	brcc	.+2      	; 0x2756 <KPD_GetPressedKey+0xb4>
    2754:	bf cf       	rjmp	.-130    	; 0x26d4 <KPD_GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}

		}
		DIO_u8SetPinValue(KPD_u8COLPORT,Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	fc 01       	movw	r30, r24
    275e:	e1 5e       	subi	r30, 0xE1	; 225
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	90 81       	ld	r25, Z
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	69 2f       	mov	r22, r25
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    static uint8 Local_u8RowArr[KPD_u8ROW_NUM]={KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
    static uint8 Local_u8KpPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM]= KPD_u8BUTTON_ARR;


	/*Activate column pins and read the rows*/
	for(Local_u8ColCounter=0;Local_u8ColCounter<KPD_u8COL_NUM;Local_u8ColCounter++)
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	84 30       	cpi	r24, 0x04	; 4
    2778:	08 f4       	brcc	.+2      	; 0x277c <KPD_GetPressedKey+0xda>
    277a:	9e cf       	rjmp	.-196    	; 0x26b8 <KPD_GetPressedKey+0x16>
		}
		DIO_u8SetPinValue(KPD_u8COLPORT,Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_cfg.h"
#include "PORT_private.h"

void PORT_voidInit(void)
{
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    279a:	ea e3       	ldi	r30, 0x3A	; 58
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	8e e7       	ldi	r24, 0x7E	; 126
    27a0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    27a2:	e7 e3       	ldi	r30, 0x37	; 55
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	8b e0       	ldi	r24, 0x0B	; 11
    27a8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    27aa:	e4 e3       	ldi	r30, 0x34	; 52
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    27b2:	e1 e3       	ldi	r30, 0x31	; 49
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	8c e3       	ldi	r24, 0x3C	; 60
    27b8:	80 83       	st	Z, r24

	PORTA= PORTA_INITIAL_VAL;
    27ba:	eb e3       	ldi	r30, 0x3B	; 59
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	10 82       	st	Z, r1
	PORTB= PORTB_INITIAL_VAL;
    27c0:	e8 e3       	ldi	r30, 0x38	; 56
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	84 ef       	ldi	r24, 0xF4	; 244
    27c6:	80 83       	st	Z, r24
	PORTC= PORTC_INITIAL_VAL;
    27c8:	e5 e3       	ldi	r30, 0x35	; 53
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	10 82       	st	Z, r1
	PORTD= PORTD_INITIAL_VAL;
    27ce:	e2 e3       	ldi	r30, 0x32	; 50
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	8c e3       	ldi	r24, 0x3C	; 60
    27d4:	80 83       	st	Z, r24

}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <STM_CW>:
 * @param Copy_u16Angel: This parameter is for the angle that user want
 * @return
 */

uint8 STM_CW(const Stepper_t* Copy_pSTMCfg,uint16 Copy_u16Angel)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	c1 54       	subi	r28, 0x41	; 65
    27e6:	d0 40       	sbci	r29, 0x00	; 0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	9f af       	std	Y+63, r25	; 0x3f
    27f4:	8e af       	std	Y+62, r24	; 0x3e
    27f6:	fe 01       	movw	r30, r28
    27f8:	e0 5c       	subi	r30, 0xC0	; 192
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	71 83       	std	Z+1, r23	; 0x01
    27fe:	60 83       	st	Z, r22
   uint8 Local_u8ErrorState=OK;
    2800:	1d ae       	std	Y+61, r1	; 0x3d
   uint16 Local_u16Steps=0,Local_u16LoopCounter=0;
    2802:	1c ae       	std	Y+60, r1	; 0x3c
    2804:	1b ae       	std	Y+59, r1	; 0x3b
    2806:	1a ae       	std	Y+58, r1	; 0x3a
    2808:	19 ae       	std	Y+57, r1	; 0x39
   if(Copy_pSTMCfg!=NULL)
    280a:	8e ad       	ldd	r24, Y+62	; 0x3e
    280c:	9f ad       	ldd	r25, Y+63	; 0x3f
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	09 f4       	brne	.+2      	; 0x2814 <STM_CW+0x38>
    2812:	9b c2       	rjmp	.+1334   	; 0x2d4a <STM_CW+0x56e>
   {
	   Local_u16Steps=(uint16)((uint32)Copy_u16Angel*2048ul/360ul);
    2814:	fe 01       	movw	r30, r28
    2816:	e0 5c       	subi	r30, 0xC0	; 192
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	cc 01       	movw	r24, r24
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	07 2e       	mov	r0, r23
    2826:	7b e0       	ldi	r23, 0x0B	; 11
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	aa 1f       	adc	r26, r26
    282e:	bb 1f       	adc	r27, r27
    2830:	7a 95       	dec	r23
    2832:	d1 f7       	brne	.-12     	; 0x2828 <STM_CW+0x4c>
    2834:	70 2d       	mov	r23, r0
    2836:	28 e6       	ldi	r18, 0x68	; 104
    2838:	31 e0       	ldi	r19, 0x01	; 1
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__udivmodsi4>
    2846:	da 01       	movw	r26, r20
    2848:	c9 01       	movw	r24, r18
    284a:	9c af       	std	Y+60, r25	; 0x3c
    284c:	8b af       	std	Y+59, r24	; 0x3b
	   for(Local_u16LoopCounter=0;Local_u16LoopCounter<Local_u16Steps/4;Local_u16LoopCounter++)
    284e:	1a ae       	std	Y+58, r1	; 0x3a
    2850:	19 ae       	std	Y+57, r1	; 0x39
    2852:	6d c2       	rjmp	.+1242   	; 0x2d2e <STM_CW+0x552>
	   {
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    2854:	ee ad       	ldd	r30, Y+62	; 0x3e
    2856:	ff ad       	ldd	r31, Y+63	; 0x3f
    2858:	80 81       	ld	r24, Z
    285a:	ee ad       	ldd	r30, Y+62	; 0x3e
    285c:	ff ad       	ldd	r31, Y+63	; 0x3f
    285e:	92 81       	ldd	r25, Z+2	; 0x02
    2860:	69 2f       	mov	r22, r25
    2862:	41 e0       	ldi	r20, 0x01	; 1
    2864:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    2868:	ee ad       	ldd	r30, Y+62	; 0x3e
    286a:	ff ad       	ldd	r31, Y+63	; 0x3f
    286c:	80 81       	ld	r24, Z
    286e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2870:	ff ad       	ldd	r31, Y+63	; 0x3f
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	69 2f       	mov	r22, r25
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    287c:	ee ad       	ldd	r30, Y+62	; 0x3e
    287e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2880:	80 81       	ld	r24, Z
    2882:	ee ad       	ldd	r30, Y+62	; 0x3e
    2884:	ff ad       	ldd	r31, Y+63	; 0x3f
    2886:	94 81       	ldd	r25, Z+4	; 0x04
    2888:	69 2f       	mov	r22, r25
    288a:	41 e0       	ldi	r20, 0x01	; 1
    288c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_LOW);
    2890:	ee ad       	ldd	r30, Y+62	; 0x3e
    2892:	ff ad       	ldd	r31, Y+63	; 0x3f
    2894:	80 81       	ld	r24, Z
    2896:	ee ad       	ldd	r30, Y+62	; 0x3e
    2898:	ff ad       	ldd	r31, Y+63	; 0x3f
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	69 2f       	mov	r22, r25
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e0       	ldi	r26, 0x00	; 0
    28aa:	b0 e4       	ldi	r27, 0x40	; 64
    28ac:	8d ab       	std	Y+53, r24	; 0x35
    28ae:	9e ab       	std	Y+54, r25	; 0x36
    28b0:	af ab       	std	Y+55, r26	; 0x37
    28b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	6d a9       	ldd	r22, Y+53	; 0x35
    28b6:	7e a9       	ldd	r23, Y+54	; 0x36
    28b8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ba:	98 ad       	ldd	r25, Y+56	; 0x38
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a e7       	ldi	r20, 0x7A	; 122
    28c2:	55 e4       	ldi	r21, 0x45	; 69
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	89 ab       	std	Y+49, r24	; 0x31
    28ce:	9a ab       	std	Y+50, r25	; 0x32
    28d0:	ab ab       	std	Y+51, r26	; 0x33
    28d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28d4:	69 a9       	ldd	r22, Y+49	; 0x31
    28d6:	7a a9       	ldd	r23, Y+50	; 0x32
    28d8:	8b a9       	ldd	r24, Y+51	; 0x33
    28da:	9c a9       	ldd	r25, Y+52	; 0x34
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <STM_CW+0x11a>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	98 ab       	std	Y+48, r25	; 0x30
    28f2:	8f a7       	std	Y+47, r24	; 0x2f
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <STM_CW+0x198>
	else if (__tmp > 65535)
    28f6:	69 a9       	ldd	r22, Y+49	; 0x31
    28f8:	7a a9       	ldd	r23, Y+50	; 0x32
    28fa:	8b a9       	ldd	r24, Y+51	; 0x33
    28fc:	9c a9       	ldd	r25, Y+52	; 0x34
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <STM_CW+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	6d a9       	ldd	r22, Y+53	; 0x35
    2910:	7e a9       	ldd	r23, Y+54	; 0x36
    2912:	8f a9       	ldd	r24, Y+55	; 0x37
    2914:	98 ad       	ldd	r25, Y+56	; 0x38
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	98 ab       	std	Y+48, r25	; 0x30
    2934:	8f a7       	std	Y+47, r24	; 0x2f
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <STM_CW+0x17a>
    2938:	80 e9       	ldi	r24, 0x90	; 144
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	9e a7       	std	Y+46, r25	; 0x2e
    293e:	8d a7       	std	Y+45, r24	; 0x2d
    2940:	8d a5       	ldd	r24, Y+45	; 0x2d
    2942:	9e a5       	ldd	r25, Y+46	; 0x2e
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <STM_CW+0x168>
    2948:	9e a7       	std	Y+46, r25	; 0x2e
    294a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	8f a5       	ldd	r24, Y+47	; 0x2f
    294e:	98 a9       	ldd	r25, Y+48	; 0x30
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	98 ab       	std	Y+48, r25	; 0x30
    2954:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	8f a5       	ldd	r24, Y+47	; 0x2f
    2958:	98 a9       	ldd	r25, Y+48	; 0x30
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <STM_CW+0x15c>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <STM_CW+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	69 a9       	ldd	r22, Y+49	; 0x31
    2962:	7a a9       	ldd	r23, Y+50	; 0x32
    2964:	8b a9       	ldd	r24, Y+51	; 0x33
    2966:	9c a9       	ldd	r25, Y+52	; 0x34
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	98 ab       	std	Y+48, r25	; 0x30
    2972:	8f a7       	std	Y+47, r24	; 0x2f
    2974:	8f a5       	ldd	r24, Y+47	; 0x2f
    2976:	98 a9       	ldd	r25, Y+48	; 0x30
    2978:	9c a7       	std	Y+44, r25	; 0x2c
    297a:	8b a7       	std	Y+43, r24	; 0x2b
    297c:	8b a5       	ldd	r24, Y+43	; 0x2b
    297e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <STM_CW+0x1a4>
    2984:	9c a7       	std	Y+44, r25	; 0x2c
    2986:	8b a7       	std	Y+43, r24	; 0x2b
		   _delay_ms(2);
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    2988:	ee ad       	ldd	r30, Y+62	; 0x3e
    298a:	ff ad       	ldd	r31, Y+63	; 0x3f
    298c:	80 81       	ld	r24, Z
    298e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2990:	ff ad       	ldd	r31, Y+63	; 0x3f
    2992:	91 81       	ldd	r25, Z+1	; 0x01
    2994:	69 2f       	mov	r22, r25
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    299c:	ee ad       	ldd	r30, Y+62	; 0x3e
    299e:	ff ad       	ldd	r31, Y+63	; 0x3f
    29a0:	80 81       	ld	r24, Z
    29a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    29a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	69 2f       	mov	r22, r25
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    29b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    29b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    29b4:	80 81       	ld	r24, Z
    29b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    29b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ba:	94 81       	ldd	r25, Z+4	; 0x04
    29bc:	69 2f       	mov	r22, r25
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_LOW);
    29c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    29c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    29c8:	80 81       	ld	r24, Z
    29ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    29cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    29ce:	92 81       	ldd	r25, Z+2	; 0x02
    29d0:	69 2f       	mov	r22, r25
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	b0 e4       	ldi	r27, 0x40	; 64
    29e0:	8f a3       	std	Y+39, r24	; 0x27
    29e2:	98 a7       	std	Y+40, r25	; 0x28
    29e4:	a9 a7       	std	Y+41, r26	; 0x29
    29e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ea:	78 a5       	ldd	r23, Y+40	; 0x28
    29ec:	89 a5       	ldd	r24, Y+41	; 0x29
    29ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a e7       	ldi	r20, 0x7A	; 122
    29f6:	55 e4       	ldi	r21, 0x45	; 69
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8b a3       	std	Y+35, r24	; 0x23
    2a02:	9c a3       	std	Y+36, r25	; 0x24
    2a04:	ad a3       	std	Y+37, r26	; 0x25
    2a06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a08:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <STM_CW+0x24e>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9a a3       	std	Y+34, r25	; 0x22
    2a26:	89 a3       	std	Y+33, r24	; 0x21
    2a28:	3f c0       	rjmp	.+126    	; 0x2aa8 <STM_CW+0x2cc>
	else if (__tmp > 65535)
    2a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a30:	9e a1       	ldd	r25, Y+38	; 0x26
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	4c f5       	brge	.+82     	; 0x2a94 <STM_CW+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a42:	6f a1       	ldd	r22, Y+39	; 0x27
    2a44:	78 a5       	ldd	r23, Y+40	; 0x28
    2a46:	89 a5       	ldd	r24, Y+41	; 0x29
    2a48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9a a3       	std	Y+34, r25	; 0x22
    2a68:	89 a3       	std	Y+33, r24	; 0x21
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <STM_CW+0x2ae>
    2a6c:	80 e9       	ldi	r24, 0x90	; 144
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	98 a3       	std	Y+32, r25	; 0x20
    2a72:	8f 8f       	std	Y+31, r24	; 0x1f
    2a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a76:	98 a1       	ldd	r25, Y+32	; 0x20
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <STM_CW+0x29c>
    2a7c:	98 a3       	std	Y+32, r25	; 0x20
    2a7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	89 a1       	ldd	r24, Y+33	; 0x21
    2a82:	9a a1       	ldd	r25, Y+34	; 0x22
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	9a a3       	std	Y+34, r25	; 0x22
    2a88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <STM_CW+0x290>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <STM_CW+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	6b a1       	ldd	r22, Y+35	; 0x23
    2a96:	7c a1       	ldd	r23, Y+36	; 0x24
    2a98:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9a a3       	std	Y+34, r25	; 0x22
    2aa6:	89 a3       	std	Y+33, r24	; 0x21
    2aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2aac:	9e 8f       	std	Y+30, r25	; 0x1e
    2aae:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <STM_CW+0x2d8>
    2ab8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aba:	8d 8f       	std	Y+29, r24	; 0x1d
		   _delay_ms(2);
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    2abc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2abe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ac0:	80 81       	ld	r24, Z
    2ac2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ac4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	69 2f       	mov	r22, r25
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    2ad0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ad2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ad4:	80 81       	ld	r24, Z
    2ad6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ad8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ada:	92 81       	ldd	r25, Z+2	; 0x02
    2adc:	69 2f       	mov	r22, r25
    2ade:	41 e0       	ldi	r20, 0x01	; 1
    2ae0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    2ae4:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ae6:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ae8:	80 81       	ld	r24, Z
    2aea:	ee ad       	ldd	r30, Y+62	; 0x3e
    2aec:	ff ad       	ldd	r31, Y+63	; 0x3f
    2aee:	94 81       	ldd	r25, Z+4	; 0x04
    2af0:	69 2f       	mov	r22, r25
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_LOW);
    2af8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2afa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2afc:	80 81       	ld	r24, Z
    2afe:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b00:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	69 2f       	mov	r22, r25
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e4       	ldi	r27, 0x40	; 64
    2b14:	89 8f       	std	Y+25, r24	; 0x19
    2b16:	9a 8f       	std	Y+26, r25	; 0x1a
    2b18:	ab 8f       	std	Y+27, r26	; 0x1b
    2b1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a e7       	ldi	r20, 0x7A	; 122
    2b2a:	55 e4       	ldi	r21, 0x45	; 69
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8d 8b       	std	Y+21, r24	; 0x15
    2b36:	9e 8b       	std	Y+22, r25	; 0x16
    2b38:	af 8b       	std	Y+23, r26	; 0x17
    2b3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b40:	8f 89       	ldd	r24, Y+23	; 0x17
    2b42:	98 8d       	ldd	r25, Y+24	; 0x18
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <STM_CW+0x382>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <STM_CW+0x400>
	else if (__tmp > 65535)
    2b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b60:	7e 89       	ldd	r23, Y+22	; 0x16
    2b62:	8f 89       	ldd	r24, Y+23	; 0x17
    2b64:	98 8d       	ldd	r25, Y+24	; 0x18
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <STM_CW+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	69 8d       	ldd	r22, Y+25	; 0x19
    2b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9c 8b       	std	Y+20, r25	; 0x14
    2b9c:	8b 8b       	std	Y+19, r24	; 0x13
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <STM_CW+0x3e2>
    2ba0:	80 e9       	ldi	r24, 0x90	; 144
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	9a 8b       	std	Y+18, r25	; 0x12
    2ba6:	89 8b       	std	Y+17, r24	; 0x11
    2ba8:	89 89       	ldd	r24, Y+17	; 0x11
    2baa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <STM_CW+0x3d0>
    2bb0:	9a 8b       	std	Y+18, r25	; 0x12
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <STM_CW+0x3c4>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <STM_CW+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9c 8b       	std	Y+20, r25	; 0x14
    2bda:	8b 8b       	std	Y+19, r24	; 0x13
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	98 8b       	std	Y+16, r25	; 0x10
    2be2:	8f 87       	std	Y+15, r24	; 0x0f
    2be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be6:	98 89       	ldd	r25, Y+16	; 0x10
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <STM_CW+0x40c>
    2bec:	98 8b       	std	Y+16, r25	; 0x10
    2bee:	8f 87       	std	Y+15, r24	; 0x0f
		   _delay_ms(2);
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    2bf0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bf2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bf4:	80 81       	ld	r24, Z
    2bf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	69 2f       	mov	r22, r25
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    2c04:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c06:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c08:	80 81       	ld	r24, Z
    2c0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c0e:	92 81       	ldd	r25, Z+2	; 0x02
    2c10:	69 2f       	mov	r22, r25
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    2c18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c1c:	80 81       	ld	r24, Z
    2c1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c20:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	69 2f       	mov	r22, r25
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
		   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_LOW);
    2c2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c30:	80 81       	ld	r24, Z
    2c32:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c34:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c36:	94 81       	ldd	r25, Z+4	; 0x04
    2c38:	69 2f       	mov	r22, r25
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e4       	ldi	r27, 0x40	; 64
    2c48:	8b 87       	std	Y+11, r24	; 0x0b
    2c4a:	9c 87       	std	Y+12, r25	; 0x0c
    2c4c:	ad 87       	std	Y+13, r26	; 0x0d
    2c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a e7       	ldi	r20, 0x7A	; 122
    2c5e:	55 e4       	ldi	r21, 0x45	; 69
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8f 83       	std	Y+7, r24	; 0x07
    2c6a:	98 87       	std	Y+8, r25	; 0x08
    2c6c:	a9 87       	std	Y+9, r26	; 0x09
    2c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <STM_CW+0x4b6>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <STM_CW+0x534>
	else if (__tmp > 65535)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <STM_CW+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <STM_CW+0x516>
    2cd4:	80 e9       	ldi	r24, 0x90	; 144
    2cd6:	91 e0       	ldi	r25, 0x01	; 1
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <STM_CW+0x504>
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <STM_CW+0x4f8>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <STM_CW+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	9e 81       	ldd	r25, Y+6	; 0x06
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <STM_CW+0x540>
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
   uint8 Local_u8ErrorState=OK;
   uint16 Local_u16Steps=0,Local_u16LoopCounter=0;
   if(Copy_pSTMCfg!=NULL)
   {
	   Local_u16Steps=(uint16)((uint32)Copy_u16Angel*2048ul/360ul);
	   for(Local_u16LoopCounter=0;Local_u16LoopCounter<Local_u16Steps/4;Local_u16LoopCounter++)
    2d24:	89 ad       	ldd	r24, Y+57	; 0x39
    2d26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	9a af       	std	Y+58, r25	; 0x3a
    2d2c:	89 af       	std	Y+57, r24	; 0x39
    2d2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d30:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d32:	9c 01       	movw	r18, r24
    2d34:	36 95       	lsr	r19
    2d36:	27 95       	ror	r18
    2d38:	36 95       	lsr	r19
    2d3a:	27 95       	ror	r18
    2d3c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d3e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d40:	82 17       	cp	r24, r18
    2d42:	93 07       	cpc	r25, r19
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <STM_CW+0x56c>
    2d46:	86 cd       	rjmp	.-1268   	; 0x2854 <STM_CW+0x78>
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <STM_CW+0x572>

	   }
   }
   else
   {
	   Local_u8ErrorState=NULL_PTR_ERR;
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	8d af       	std	Y+61, r24	; 0x3d
   }
   return Local_u8ErrorState;
    2d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
}
    2d50:	cf 5b       	subi	r28, 0xBF	; 191
    2d52:	df 4f       	sbci	r29, 0xFF	; 255
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <STM_CCW>:
uint8 STM_CCW(const Stepper_t* Copy_pSTMCfg,uint16 Copy_u16Angel)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	c1 54       	subi	r28, 0x41	; 65
    2d6e:	d0 40       	sbci	r29, 0x00	; 0
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	9f af       	std	Y+63, r25	; 0x3f
    2d7c:	8e af       	std	Y+62, r24	; 0x3e
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e0 5c       	subi	r30, 0xC0	; 192
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	71 83       	std	Z+1, r23	; 0x01
    2d86:	60 83       	st	Z, r22
	   uint8 Local_u8ErrorState=OK;
    2d88:	1d ae       	std	Y+61, r1	; 0x3d
	   uint16 Local_u16Steps=0,Local_u16LoopCounter=0;
    2d8a:	1c ae       	std	Y+60, r1	; 0x3c
    2d8c:	1b ae       	std	Y+59, r1	; 0x3b
    2d8e:	1a ae       	std	Y+58, r1	; 0x3a
    2d90:	19 ae       	std	Y+57, r1	; 0x39
	   if(Copy_pSTMCfg!=NULL)
    2d92:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <STM_CCW+0x38>
    2d9a:	9a c2       	rjmp	.+1332   	; 0x32d0 <STM_CCW+0x56c>
	   {
		   Local_u16Steps=(uint16)((uint32)Copy_u16Angel*2048ul/360ul);
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e0 5c       	subi	r30, 0xC0	; 192
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	cc 01       	movw	r24, r24
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	07 2e       	mov	r0, r23
    2dae:	7b e0       	ldi	r23, 0x0B	; 11
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	7a 95       	dec	r23
    2dba:	d1 f7       	brne	.-12     	; 0x2db0 <STM_CCW+0x4c>
    2dbc:	70 2d       	mov	r23, r0
    2dbe:	28 e6       	ldi	r18, 0x68	; 104
    2dc0:	31 e0       	ldi	r19, 0x01	; 1
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__udivmodsi4>
    2dce:	da 01       	movw	r26, r20
    2dd0:	c9 01       	movw	r24, r18
    2dd2:	9c af       	std	Y+60, r25	; 0x3c
    2dd4:	8b af       	std	Y+59, r24	; 0x3b
		   for(Local_u16LoopCounter=0;Local_u16LoopCounter<Local_u16Steps/4;Local_u16LoopCounter++)
    2dd6:	1a ae       	std	Y+58, r1	; 0x3a
    2dd8:	19 ae       	std	Y+57, r1	; 0x39
    2dda:	6d c2       	rjmp	.+1242   	; 0x32b6 <STM_CCW+0x552>
		   {
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    2ddc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2dde:	ff ad       	ldd	r31, Y+63	; 0x3f
    2de0:	80 81       	ld	r24, Z
    2de2:	ee ad       	ldd	r30, Y+62	; 0x3e
    2de4:	ff ad       	ldd	r31, Y+63	; 0x3f
    2de6:	92 81       	ldd	r25, Z+2	; 0x02
    2de8:	69 2f       	mov	r22, r25
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    2df0:	ee ad       	ldd	r30, Y+62	; 0x3e
    2df2:	ff ad       	ldd	r31, Y+63	; 0x3f
    2df4:	80 81       	ld	r24, Z
    2df6:	ee ad       	ldd	r30, Y+62	; 0x3e
    2df8:	ff ad       	ldd	r31, Y+63	; 0x3f
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	69 2f       	mov	r22, r25
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    2e04:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e06:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e08:	80 81       	ld	r24, Z
    2e0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e0e:	94 81       	ldd	r25, Z+4	; 0x04
    2e10:	69 2f       	mov	r22, r25
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_LOW);
    2e18:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e1c:	80 81       	ld	r24, Z
    2e1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e20:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e22:	91 81       	ldd	r25, Z+1	; 0x01
    2e24:	69 2f       	mov	r22, r25
    2e26:	40 e0       	ldi	r20, 0x00	; 0
    2e28:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 e0       	ldi	r26, 0x00	; 0
    2e32:	b0 e4       	ldi	r27, 0x40	; 64
    2e34:	8d ab       	std	Y+53, r24	; 0x35
    2e36:	9e ab       	std	Y+54, r25	; 0x36
    2e38:	af ab       	std	Y+55, r26	; 0x37
    2e3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e40:	8f a9       	ldd	r24, Y+55	; 0x37
    2e42:	98 ad       	ldd	r25, Y+56	; 0x38
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	55 e4       	ldi	r21, 0x45	; 69
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	89 ab       	std	Y+49, r24	; 0x31
    2e56:	9a ab       	std	Y+50, r25	; 0x32
    2e58:	ab ab       	std	Y+51, r26	; 0x33
    2e5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e60:	8b a9       	ldd	r24, Y+51	; 0x33
    2e62:	9c a9       	ldd	r25, Y+52	; 0x34
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <STM_CCW+0x11a>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	98 ab       	std	Y+48, r25	; 0x30
    2e7a:	8f a7       	std	Y+47, r24	; 0x2f
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <STM_CCW+0x198>
	else if (__tmp > 65535)
    2e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e80:	7a a9       	ldd	r23, Y+50	; 0x32
    2e82:	8b a9       	ldd	r24, Y+51	; 0x33
    2e84:	9c a9       	ldd	r25, Y+52	; 0x34
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <STM_CCW+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6d a9       	ldd	r22, Y+53	; 0x35
    2e98:	7e a9       	ldd	r23, Y+54	; 0x36
    2e9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	98 ab       	std	Y+48, r25	; 0x30
    2ebc:	8f a7       	std	Y+47, r24	; 0x2f
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <STM_CCW+0x17a>
    2ec0:	80 e9       	ldi	r24, 0x90	; 144
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	9e a7       	std	Y+46, r25	; 0x2e
    2ec6:	8d a7       	std	Y+45, r24	; 0x2d
    2ec8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <STM_CCW+0x168>
    2ed0:	9e a7       	std	Y+46, r25	; 0x2e
    2ed2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	98 ab       	std	Y+48, r25	; 0x30
    2edc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <STM_CCW+0x15c>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <STM_CCW+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eea:	7a a9       	ldd	r23, Y+50	; 0x32
    2eec:	8b a9       	ldd	r24, Y+51	; 0x33
    2eee:	9c a9       	ldd	r25, Y+52	; 0x34
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	98 ab       	std	Y+48, r25	; 0x30
    2efa:	8f a7       	std	Y+47, r24	; 0x2f
    2efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2efe:	98 a9       	ldd	r25, Y+48	; 0x30
    2f00:	9c a7       	std	Y+44, r25	; 0x2c
    2f02:	8b a7       	std	Y+43, r24	; 0x2b
    2f04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <STM_CCW+0x1a4>
    2f0c:	9c a7       	std	Y+44, r25	; 0x2c
    2f0e:	8b a7       	std	Y+43, r24	; 0x2b
			   _delay_ms(2);
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    2f10:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f12:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f14:	80 81       	ld	r24, Z
    2f16:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f18:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	69 2f       	mov	r22, r25
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    2f24:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f26:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f28:	80 81       	ld	r24, Z
    2f2a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f2c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	69 2f       	mov	r22, r25
    2f32:	41 e0       	ldi	r20, 0x01	; 1
    2f34:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    2f38:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f3a:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f3c:	80 81       	ld	r24, Z
    2f3e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f40:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f42:	92 81       	ldd	r25, Z+2	; 0x02
    2f44:	69 2f       	mov	r22, r25
    2f46:	41 e0       	ldi	r20, 0x01	; 1
    2f48:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_LOW);
    2f4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f50:	80 81       	ld	r24, Z
    2f52:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f54:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f56:	94 81       	ldd	r25, Z+4	; 0x04
    2f58:	69 2f       	mov	r22, r25
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e0       	ldi	r26, 0x00	; 0
    2f66:	b0 e4       	ldi	r27, 0x40	; 64
    2f68:	8f a3       	std	Y+39, r24	; 0x27
    2f6a:	98 a7       	std	Y+40, r25	; 0x28
    2f6c:	a9 a7       	std	Y+41, r26	; 0x29
    2f6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6f a1       	ldd	r22, Y+39	; 0x27
    2f72:	78 a5       	ldd	r23, Y+40	; 0x28
    2f74:	89 a5       	ldd	r24, Y+41	; 0x29
    2f76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8b a3       	std	Y+35, r24	; 0x23
    2f8a:	9c a3       	std	Y+36, r25	; 0x24
    2f8c:	ad a3       	std	Y+37, r26	; 0x25
    2f8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f90:	6b a1       	ldd	r22, Y+35	; 0x23
    2f92:	7c a1       	ldd	r23, Y+36	; 0x24
    2f94:	8d a1       	ldd	r24, Y+37	; 0x25
    2f96:	9e a1       	ldd	r25, Y+38	; 0x26
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <STM_CCW+0x24e>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9a a3       	std	Y+34, r25	; 0x22
    2fae:	89 a3       	std	Y+33, r24	; 0x21
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <STM_CCW+0x2cc>
	else if (__tmp > 65535)
    2fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <STM_CCW+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6f a1       	ldd	r22, Y+39	; 0x27
    2fcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2fce:	89 a5       	ldd	r24, Y+41	; 0x29
    2fd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <STM_CCW+0x2ae>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	98 a3       	std	Y+32, r25	; 0x20
    2ffa:	8f 8f       	std	Y+31, r24	; 0x1f
    2ffc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ffe:	98 a1       	ldd	r25, Y+32	; 0x20
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <STM_CCW+0x29c>
    3004:	98 a3       	std	Y+32, r25	; 0x20
    3006:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	89 a1       	ldd	r24, Y+33	; 0x21
    300a:	9a a1       	ldd	r25, Y+34	; 0x22
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9a a3       	std	Y+34, r25	; 0x22
    3010:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	89 a1       	ldd	r24, Y+33	; 0x21
    3014:	9a a1       	ldd	r25, Y+34	; 0x22
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <STM_CCW+0x290>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <STM_CCW+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6b a1       	ldd	r22, Y+35	; 0x23
    301e:	7c a1       	ldd	r23, Y+36	; 0x24
    3020:	8d a1       	ldd	r24, Y+37	; 0x25
    3022:	9e a1       	ldd	r25, Y+38	; 0x26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9a a3       	std	Y+34, r25	; 0x22
    302e:	89 a3       	std	Y+33, r24	; 0x21
    3030:	89 a1       	ldd	r24, Y+33	; 0x21
    3032:	9a a1       	ldd	r25, Y+34	; 0x22
    3034:	9e 8f       	std	Y+30, r25	; 0x1e
    3036:	8d 8f       	std	Y+29, r24	; 0x1d
    3038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    303a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <STM_CCW+0x2d8>
    3040:	9e 8f       	std	Y+30, r25	; 0x1e
    3042:	8d 8f       	std	Y+29, r24	; 0x1d
			   _delay_ms(2);
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    3044:	ee ad       	ldd	r30, Y+62	; 0x3e
    3046:	ff ad       	ldd	r31, Y+63	; 0x3f
    3048:	80 81       	ld	r24, Z
    304a:	ee ad       	ldd	r30, Y+62	; 0x3e
    304c:	ff ad       	ldd	r31, Y+63	; 0x3f
    304e:	91 81       	ldd	r25, Z+1	; 0x01
    3050:	69 2f       	mov	r22, r25
    3052:	41 e0       	ldi	r20, 0x01	; 1
    3054:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_HIGH);
    3058:	ee ad       	ldd	r30, Y+62	; 0x3e
    305a:	ff ad       	ldd	r31, Y+63	; 0x3f
    305c:	80 81       	ld	r24, Z
    305e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3060:	ff ad       	ldd	r31, Y+63	; 0x3f
    3062:	92 81       	ldd	r25, Z+2	; 0x02
    3064:	69 2f       	mov	r22, r25
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    306c:	ee ad       	ldd	r30, Y+62	; 0x3e
    306e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3070:	80 81       	ld	r24, Z
    3072:	ee ad       	ldd	r30, Y+62	; 0x3e
    3074:	ff ad       	ldd	r31, Y+63	; 0x3f
    3076:	94 81       	ldd	r25, Z+4	; 0x04
    3078:	69 2f       	mov	r22, r25
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_LOW);
    3080:	ee ad       	ldd	r30, Y+62	; 0x3e
    3082:	ff ad       	ldd	r31, Y+63	; 0x3f
    3084:	80 81       	ld	r24, Z
    3086:	ee ad       	ldd	r30, Y+62	; 0x3e
    3088:	ff ad       	ldd	r31, Y+63	; 0x3f
    308a:	93 81       	ldd	r25, Z+3	; 0x03
    308c:	69 2f       	mov	r22, r25
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a0 e0       	ldi	r26, 0x00	; 0
    309a:	b0 e4       	ldi	r27, 0x40	; 64
    309c:	89 8f       	std	Y+25, r24	; 0x19
    309e:	9a 8f       	std	Y+26, r25	; 0x1a
    30a0:	ab 8f       	std	Y+27, r26	; 0x1b
    30a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	69 8d       	ldd	r22, Y+25	; 0x19
    30a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a e7       	ldi	r20, 0x7A	; 122
    30b2:	55 e4       	ldi	r21, 0x45	; 69
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8d 8b       	std	Y+21, r24	; 0x15
    30be:	9e 8b       	std	Y+22, r25	; 0x16
    30c0:	af 8b       	std	Y+23, r26	; 0x17
    30c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30c4:	6d 89       	ldd	r22, Y+21	; 0x15
    30c6:	7e 89       	ldd	r23, Y+22	; 0x16
    30c8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ca:	98 8d       	ldd	r25, Y+24	; 0x18
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <STM_CCW+0x382>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9c 8b       	std	Y+20, r25	; 0x14
    30e2:	8b 8b       	std	Y+19, r24	; 0x13
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <STM_CCW+0x400>
	else if (__tmp > 65535)
    30e6:	6d 89       	ldd	r22, Y+21	; 0x15
    30e8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ea:	8f 89       	ldd	r24, Y+23	; 0x17
    30ec:	98 8d       	ldd	r25, Y+24	; 0x18
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <STM_CCW+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	69 8d       	ldd	r22, Y+25	; 0x19
    3100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9c 8b       	std	Y+20, r25	; 0x14
    3124:	8b 8b       	std	Y+19, r24	; 0x13
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <STM_CCW+0x3e2>
    3128:	80 e9       	ldi	r24, 0x90	; 144
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	9a 8b       	std	Y+18, r25	; 0x12
    312e:	89 8b       	std	Y+17, r24	; 0x11
    3130:	89 89       	ldd	r24, Y+17	; 0x11
    3132:	9a 89       	ldd	r25, Y+18	; 0x12
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <STM_CCW+0x3d0>
    3138:	9a 8b       	std	Y+18, r25	; 0x12
    313a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	8b 89       	ldd	r24, Y+19	; 0x13
    313e:	9c 89       	ldd	r25, Y+20	; 0x14
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9c 8b       	std	Y+20, r25	; 0x14
    3144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <STM_CCW+0x3c4>
    314e:	14 c0       	rjmp	.+40     	; 0x3178 <STM_CCW+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	6d 89       	ldd	r22, Y+21	; 0x15
    3152:	7e 89       	ldd	r23, Y+22	; 0x16
    3154:	8f 89       	ldd	r24, Y+23	; 0x17
    3156:	98 8d       	ldd	r25, Y+24	; 0x18
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9c 8b       	std	Y+20, r25	; 0x14
    3162:	8b 8b       	std	Y+19, r24	; 0x13
    3164:	8b 89       	ldd	r24, Y+19	; 0x13
    3166:	9c 89       	ldd	r25, Y+20	; 0x14
    3168:	98 8b       	std	Y+16, r25	; 0x10
    316a:	8f 87       	std	Y+15, r24	; 0x0f
    316c:	8f 85       	ldd	r24, Y+15	; 0x0f
    316e:	98 89       	ldd	r25, Y+16	; 0x10
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <STM_CCW+0x40c>
    3174:	98 8b       	std	Y+16, r25	; 0x10
    3176:	8f 87       	std	Y+15, r24	; 0x0f
			   _delay_ms(2);
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Blue,DIO_u8PIN_HIGH);
    3178:	ee ad       	ldd	r30, Y+62	; 0x3e
    317a:	ff ad       	ldd	r31, Y+63	; 0x3f
    317c:	80 81       	ld	r24, Z
    317e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3180:	ff ad       	ldd	r31, Y+63	; 0x3f
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	69 2f       	mov	r22, r25
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Orange,DIO_u8PIN_HIGH);
    318c:	ee ad       	ldd	r30, Y+62	; 0x3e
    318e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3190:	80 81       	ld	r24, Z
    3192:	ee ad       	ldd	r30, Y+62	; 0x3e
    3194:	ff ad       	ldd	r31, Y+63	; 0x3f
    3196:	94 81       	ldd	r25, Z+4	; 0x04
    3198:	69 2f       	mov	r22, r25
    319a:	41 e0       	ldi	r20, 0x01	; 1
    319c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Yellow,DIO_u8PIN_HIGH);
    31a0:	ee ad       	ldd	r30, Y+62	; 0x3e
    31a2:	ff ad       	ldd	r31, Y+63	; 0x3f
    31a4:	80 81       	ld	r24, Z
    31a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    31a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	69 2f       	mov	r22, r25
    31ae:	41 e0       	ldi	r20, 0x01	; 1
    31b0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_LOW);
    31b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    31b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    31b8:	80 81       	ld	r24, Z
    31ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    31bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    31be:	92 81       	ldd	r25, Z+2	; 0x02
    31c0:	69 2f       	mov	r22, r25
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_u8SetPinValue>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a0 e0       	ldi	r26, 0x00	; 0
    31ce:	b0 e4       	ldi	r27, 0x40	; 64
    31d0:	8b 87       	std	Y+11, r24	; 0x0b
    31d2:	9c 87       	std	Y+12, r25	; 0x0c
    31d4:	ad 87       	std	Y+13, r26	; 0x0d
    31d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31da:	7c 85       	ldd	r23, Y+12	; 0x0c
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a e7       	ldi	r20, 0x7A	; 122
    31e6:	55 e4       	ldi	r21, 0x45	; 69
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	8f 83       	std	Y+7, r24	; 0x07
    31f2:	98 87       	std	Y+8, r25	; 0x08
    31f4:	a9 87       	std	Y+9, r26	; 0x09
    31f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e8       	ldi	r20, 0x80	; 128
    3206:	5f e3       	ldi	r21, 0x3F	; 63
    3208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320c:	88 23       	and	r24, r24
    320e:	2c f4       	brge	.+10     	; 0x321a <STM_CCW+0x4b6>
		__ticks = 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	3f c0       	rjmp	.+126    	; 0x3298 <STM_CCW+0x534>
	else if (__tmp > 65535)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	3f ef       	ldi	r19, 0xFF	; 255
    3226:	4f e7       	ldi	r20, 0x7F	; 127
    3228:	57 e4       	ldi	r21, 0x47	; 71
    322a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322e:	18 16       	cp	r1, r24
    3230:	4c f5       	brge	.+82     	; 0x3284 <STM_CCW+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3232:	6b 85       	ldd	r22, Y+11	; 0x0b
    3234:	7c 85       	ldd	r23, Y+12	; 0x0c
    3236:	8d 85       	ldd	r24, Y+13	; 0x0d
    3238:	9e 85       	ldd	r25, Y+14	; 0x0e
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e2       	ldi	r20, 0x20	; 32
    3240:	51 e4       	ldi	r21, 0x41	; 65
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	bc 01       	movw	r22, r24
    324c:	cd 01       	movw	r24, r26
    324e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	0f c0       	rjmp	.+30     	; 0x327a <STM_CCW+0x516>
    325c:	80 e9       	ldi	r24, 0x90	; 144
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	9c 83       	std	Y+4, r25	; 0x04
    3262:	8b 83       	std	Y+3, r24	; 0x03
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <STM_CCW+0x504>
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327a:	8d 81       	ldd	r24, Y+5	; 0x05
    327c:	9e 81       	ldd	r25, Y+6	; 0x06
    327e:	00 97       	sbiw	r24, 0x00	; 0
    3280:	69 f7       	brne	.-38     	; 0x325c <STM_CCW+0x4f8>
    3282:	14 c0       	rjmp	.+40     	; 0x32ac <STM_CCW+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3284:	6f 81       	ldd	r22, Y+7	; 0x07
    3286:	78 85       	ldd	r23, Y+8	; 0x08
    3288:	89 85       	ldd	r24, Y+9	; 0x09
    328a:	9a 85       	ldd	r25, Y+10	; 0x0a
    328c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9e 83       	std	Y+6, r25	; 0x06
    3296:	8d 83       	std	Y+5, r24	; 0x05
    3298:	8d 81       	ldd	r24, Y+5	; 0x05
    329a:	9e 81       	ldd	r25, Y+6	; 0x06
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <STM_CCW+0x540>
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
	   uint8 Local_u8ErrorState=OK;
	   uint16 Local_u16Steps=0,Local_u16LoopCounter=0;
	   if(Copy_pSTMCfg!=NULL)
	   {
		   Local_u16Steps=(uint16)((uint32)Copy_u16Angel*2048ul/360ul);
		   for(Local_u16LoopCounter=0;Local_u16LoopCounter<Local_u16Steps/4;Local_u16LoopCounter++)
    32ac:	89 ad       	ldd	r24, Y+57	; 0x39
    32ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	9a af       	std	Y+58, r25	; 0x3a
    32b4:	89 af       	std	Y+57, r24	; 0x39
    32b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    32b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    32ba:	9c 01       	movw	r18, r24
    32bc:	36 95       	lsr	r19
    32be:	27 95       	ror	r18
    32c0:	36 95       	lsr	r19
    32c2:	27 95       	ror	r18
    32c4:	89 ad       	ldd	r24, Y+57	; 0x39
    32c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    32c8:	82 17       	cp	r24, r18
    32ca:	93 07       	cpc	r25, r19
    32cc:	08 f4       	brcc	.+2      	; 0x32d0 <STM_CCW+0x56c>
    32ce:	86 cd       	rjmp	.-1268   	; 0x2ddc <STM_CCW+0x78>
			   DIO_u8SetPinValue(Copy_pSTMCfg->STM_u8Port,Copy_pSTMCfg->STM_u8Pink,DIO_u8PIN_LOW);
			   _delay_ms(2);

		   }
	   }
	   return Local_u8ErrorState;
    32d0:	8d ad       	ldd	r24, Y+61	; 0x3d
}
    32d2:	cf 5b       	subi	r28, 0xBF	; 191
    32d4:	df 4f       	sbci	r29, 0xFF	; 255
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <TIMER0_voidInit>:
#include "TIMERS_reg.h"

static void (*TIMERS_pvCallBackFuncArr[8])(void)={NULL};

void TIMER0_voidInit(void)
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
   /*waveform generation mode: Fast PWM*/
	SET_BIT(TCCR0,3);
    32ee:	a3 e5       	ldi	r26, 0x53	; 83
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	e3 e5       	ldi	r30, 0x53	; 83
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	88 60       	ori	r24, 0x08	; 8
    32fa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
    32fc:	a3 e5       	ldi	r26, 0x53	; 83
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e3 e5       	ldi	r30, 0x53	; 83
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	80 64       	ori	r24, 0x40	; 64
    3308:	8c 93       	st	X, r24
	/*Clear the prescaler bits*/
	TCCR0&=0b11111000;
    330a:	a3 e5       	ldi	r26, 0x53	; 83
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e3 e5       	ldi	r30, 0x53	; 83
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	88 7f       	andi	r24, 0xF8	; 248
    3316:	8c 93       	st	X, r24
	/*Select prescaler : division by 64*/
	TCCR0|=DIVISION_BY_64;
    3318:	a3 e5       	ldi	r26, 0x53	; 83
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e3 e5       	ldi	r30, 0x53	; 83
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	83 60       	ori	r24, 0x03	; 3
    3324:	8c 93       	st	X, r24


	/*set on top ,clear on compare*/
	CLR_BIT(TCCR0,4);
    3326:	a3 e5       	ldi	r26, 0x53	; 83
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	e3 e5       	ldi	r30, 0x53	; 83
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	80 81       	ld	r24, Z
    3330:	8f 7e       	andi	r24, 0xEF	; 239
    3332:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    3334:	a3 e5       	ldi	r26, 0x53	; 83
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e3 e5       	ldi	r30, 0x53	; 83
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	80 62       	ori	r24, 0x20	; 32
    3340:	8c 93       	st	X, r24


}
    3342:	cf 91       	pop	r28
    3344:	df 91       	pop	r29
    3346:	08 95       	ret

00003348 <TIMER1_voidInit>:
void TIMER1_voidInit(void)
{
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
	/*Wave form generation mode : Fast PWM */
	CLR_BIT(TCCR1A,TCCr1A_COM1A0);
    3350:	af e4       	ldi	r26, 0x4F	; 79
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	ef e4       	ldi	r30, 0x4F	; 79
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	8f 7b       	andi	r24, 0xBF	; 191
    335c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCr1A_COM1A1);
    335e:	af e4       	ldi	r26, 0x4F	; 79
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	ef e4       	ldi	r30, 0x4F	; 79
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	80 68       	ori	r24, 0x80	; 128
    336a:	8c 93       	st	X, r24

	/*clear the prescaler bits*/
	TCCR1B &= 0b11111000;
    336c:	ae e4       	ldi	r26, 0x4E	; 78
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	ee e4       	ldi	r30, 0x4E	; 78
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	88 7f       	andi	r24, 0xF8	; 248
    3378:	8c 93       	st	X, r24
	/*select the prescaler*/
	TCCR1B |= 0b00000010;
    337a:	ae e4       	ldi	r26, 0x4E	; 78
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	ee e4       	ldi	r30, 0x4E	; 78
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	82 60       	ori	r24, 0x02	; 2
    3386:	8c 93       	st	X, r24

	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3388:	af e4       	ldi	r26, 0x4F	; 79
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	ef e4       	ldi	r30, 0x4F	; 79
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	8e 7f       	andi	r24, 0xFE	; 254
    3394:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    3396:	af e4       	ldi	r26, 0x4F	; 79
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	ef e4       	ldi	r30, 0x4F	; 79
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	82 60       	ori	r24, 0x02	; 2
    33a2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    33a4:	ae e4       	ldi	r26, 0x4E	; 78
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	ee e4       	ldi	r30, 0x4E	; 78
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	88 60       	ori	r24, 0x08	; 8
    33b0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    33b2:	ae e4       	ldi	r26, 0x4E	; 78
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	ee e4       	ldi	r30, 0x4E	; 78
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	80 61       	ori	r24, 0x10	; 16
    33be:	8c 93       	st	X, r24

}
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_TmrIntSource,void(*Copy_pvCallBackFunc)(void))
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <TIMERS_u8SetCallBack+0x6>
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <TIMERS_u8SetCallBack+0x8>
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	8a 83       	std	Y+2, r24	; 0x02
    33d4:	7c 83       	std	Y+4, r23	; 0x04
    33d6:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8Errorstate= OK;
    33d8:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc!=NULL)
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	9c 81       	ldd	r25, Y+4	; 0x04
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	69 f0       	breq	.+26     	; 0x33fc <TIMERS_u8SetCallBack+0x36>
    {
        TIMERS_pvCallBackFuncArr[Copy_TmrIntSource]=Copy_pvCallBackFunc;
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	fc 01       	movw	r30, r24
    33ee:	e7 5b       	subi	r30, 0xB7	; 183
    33f0:	fe 4f       	sbci	r31, 0xFE	; 254
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <TIMERS_u8SetCallBack+0x3a>
    }
    else
    {
    	Local_u8Errorstate=NOK;
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	89 83       	std	Y+1, r24	; 0x01

    }

    return Local_u8Errorstate;
    3400:	89 81       	ldd	r24, Y+1	; 0x01
}
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	cf 91       	pop	r28
    340c:	df 91       	pop	r29
    340e:	08 95       	ret

00003410 <TIMER0_void_Set_CompValue>:
void TIMER0_void_Set_CompValue(uint8 Copy_u8Val)
{
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	0f 92       	push	r0
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Val;
    341c:	ec e5       	ldi	r30, 0x5C	; 92
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	80 83       	st	Z, r24
}
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <TIMER1_void_Set_CompValue>:
void TIMER1_void_Set_CompValue(uint16 Copy_u16Val,uint16 Copy_u16Val2)
{
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	00 d0       	rcall	.+0      	; 0x3432 <TIMER1_void_Set_CompValue+0x6>
    3432:	00 d0       	rcall	.+0      	; 0x3434 <TIMER1_void_Set_CompValue+0x8>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	7c 83       	std	Y+4, r23	; 0x04
    343e:	6b 83       	std	Y+3, r22	; 0x03
	ICR1 =Copy_u16Val;
    3440:	e6 e4       	ldi	r30, 0x46	; 70
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	9a 81       	ldd	r25, Y+2	; 0x02
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
	OCR1A=Copy_u16Val2;
    344c:	ea e4       	ldi	r30, 0x4A	; 74
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	9c 81       	ldd	r25, Y+4	; 0x04
    3454:	91 83       	std	Z+1, r25	; 0x01
    3456:	80 83       	st	Z, r24
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <__vector_10>:
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    3466:	1f 92       	push	r1
    3468:	0f 92       	push	r0
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	0f 92       	push	r0
    346e:	11 24       	eor	r1, r1
    3470:	2f 93       	push	r18
    3472:	3f 93       	push	r19
    3474:	4f 93       	push	r20
    3476:	5f 93       	push	r21
    3478:	6f 93       	push	r22
    347a:	7f 93       	push	r23
    347c:	8f 93       	push	r24
    347e:	9f 93       	push	r25
    3480:	af 93       	push	r26
    3482:	bf 93       	push	r27
    3484:	ef 93       	push	r30
    3486:	ff 93       	push	r31
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    3490:	80 91 4b 01 	lds	r24, 0x014B
    3494:	90 91 4c 01 	lds	r25, 0x014C
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	29 f0       	breq	.+10     	; 0x34a6 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    349c:	e0 91 4b 01 	lds	r30, 0x014B
    34a0:	f0 91 4c 01 	lds	r31, 0x014C
    34a4:	09 95       	icall
	}
}
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	ff 91       	pop	r31
    34ac:	ef 91       	pop	r30
    34ae:	bf 91       	pop	r27
    34b0:	af 91       	pop	r26
    34b2:	9f 91       	pop	r25
    34b4:	8f 91       	pop	r24
    34b6:	7f 91       	pop	r23
    34b8:	6f 91       	pop	r22
    34ba:	5f 91       	pop	r21
    34bc:	4f 91       	pop	r20
    34be:	3f 91       	pop	r19
    34c0:	2f 91       	pop	r18
    34c2:	0f 90       	pop	r0
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	0f 90       	pop	r0
    34c8:	1f 90       	pop	r1
    34ca:	18 95       	reti

000034cc <main>:
void MotorSpeedControl(void);
void ResetSystem(void);

DCM_cfg *DCM_pType=NULL;
void main(void)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	c3 55       	subi	r28, 0x53	; 83
    34d6:	d0 40       	sbci	r29, 0x00	; 0
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    34e2:	0e 94 c9 13 	call	0x2792	; 0x2792 <PORT_voidInit>
	EXTI_voidInit();
    34e6:	0e 94 ba 10 	call	0x2174	; 0x2174 <EXTI_voidInit>
	CLCD_voidInit();
    34ea:	0e 94 b4 08 	call	0x1168	; 0x1168 <CLCD_voidInit>
	ADC_voidInit();
    34ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	//EXTI_u8SetCallBack(EXTI_u8INT2,&ResetSystem);
	//GIE_voidEnable();
	uint8 Local_u8HamokshaFace[8]={0b00001110,0b00011111,0b00010001,0b00011011,0b00010001,0b00011011,0b00001110,0};
    34f2:	9e 01       	movw	r18, r28
    34f4:	29 5d       	subi	r18, 0xD9	; 217
    34f6:	3f 4f       	sbci	r19, 0xFF	; 255
    34f8:	2c 96       	adiw	r28, 0x0c	; 12
    34fa:	3f af       	std	Y+63, r19	; 0x3f
    34fc:	2e af       	std	Y+62, r18	; 0x3e
    34fe:	2c 97       	sbiw	r28, 0x0c	; 12
    3500:	80 e3       	ldi	r24, 0x30	; 48
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	2e 96       	adiw	r28, 0x0e	; 14
    3506:	9f af       	std	Y+63, r25	; 0x3f
    3508:	8e af       	std	Y+62, r24	; 0x3e
    350a:	2e 97       	sbiw	r28, 0x0e	; 14
    350c:	98 e0       	ldi	r25, 0x08	; 8
    350e:	2f 96       	adiw	r28, 0x0f	; 15
    3510:	9f af       	std	Y+63, r25	; 0x3f
    3512:	2f 97       	sbiw	r28, 0x0f	; 15
    3514:	2e 96       	adiw	r28, 0x0e	; 14
    3516:	ee ad       	ldd	r30, Y+62	; 0x3e
    3518:	ff ad       	ldd	r31, Y+63	; 0x3f
    351a:	2e 97       	sbiw	r28, 0x0e	; 14
    351c:	00 80       	ld	r0, Z
    351e:	2e 96       	adiw	r28, 0x0e	; 14
    3520:	2e ad       	ldd	r18, Y+62	; 0x3e
    3522:	3f ad       	ldd	r19, Y+63	; 0x3f
    3524:	2e 97       	sbiw	r28, 0x0e	; 14
    3526:	2f 5f       	subi	r18, 0xFF	; 255
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	2e 96       	adiw	r28, 0x0e	; 14
    352c:	3f af       	std	Y+63, r19	; 0x3f
    352e:	2e af       	std	Y+62, r18	; 0x3e
    3530:	2e 97       	sbiw	r28, 0x0e	; 14
    3532:	2c 96       	adiw	r28, 0x0c	; 12
    3534:	ee ad       	ldd	r30, Y+62	; 0x3e
    3536:	ff ad       	ldd	r31, Y+63	; 0x3f
    3538:	2c 97       	sbiw	r28, 0x0c	; 12
    353a:	00 82       	st	Z, r0
    353c:	2c 96       	adiw	r28, 0x0c	; 12
    353e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3540:	3f ad       	ldd	r19, Y+63	; 0x3f
    3542:	2c 97       	sbiw	r28, 0x0c	; 12
    3544:	2f 5f       	subi	r18, 0xFF	; 255
    3546:	3f 4f       	sbci	r19, 0xFF	; 255
    3548:	2c 96       	adiw	r28, 0x0c	; 12
    354a:	3f af       	std	Y+63, r19	; 0x3f
    354c:	2e af       	std	Y+62, r18	; 0x3e
    354e:	2c 97       	sbiw	r28, 0x0c	; 12
    3550:	2f 96       	adiw	r28, 0x0f	; 15
    3552:	3f ad       	ldd	r19, Y+63	; 0x3f
    3554:	2f 97       	sbiw	r28, 0x0f	; 15
    3556:	31 50       	subi	r19, 0x01	; 1
    3558:	2f 96       	adiw	r28, 0x0f	; 15
    355a:	3f af       	std	Y+63, r19	; 0x3f
    355c:	2f 97       	sbiw	r28, 0x0f	; 15
    355e:	2f 96       	adiw	r28, 0x0f	; 15
    3560:	8f ad       	ldd	r24, Y+63	; 0x3f
    3562:	2f 97       	sbiw	r28, 0x0f	; 15
    3564:	88 23       	and	r24, r24
    3566:	b1 f6       	brne	.-84     	; 0x3514 <main+0x48>
	uint8 Local_u8HamokshaBody[8]={0b00000100,0b00000100,0b00011111,0b00000100,0b00000100,0b00000100,0b00011011,0};
    3568:	fe 01       	movw	r30, r28
    356a:	bf 96       	adiw	r30, 0x2f	; 47
    356c:	61 96       	adiw	r28, 0x11	; 17
    356e:	ff af       	std	Y+63, r31	; 0x3f
    3570:	ee af       	std	Y+62, r30	; 0x3e
    3572:	61 97       	sbiw	r28, 0x11	; 17
    3574:	28 e2       	ldi	r18, 0x28	; 40
    3576:	31 e0       	ldi	r19, 0x01	; 1
    3578:	63 96       	adiw	r28, 0x13	; 19
    357a:	3f af       	std	Y+63, r19	; 0x3f
    357c:	2e af       	std	Y+62, r18	; 0x3e
    357e:	63 97       	sbiw	r28, 0x13	; 19
    3580:	38 e0       	ldi	r19, 0x08	; 8
    3582:	64 96       	adiw	r28, 0x14	; 20
    3584:	3f af       	std	Y+63, r19	; 0x3f
    3586:	64 97       	sbiw	r28, 0x14	; 20
    3588:	63 96       	adiw	r28, 0x13	; 19
    358a:	ee ad       	ldd	r30, Y+62	; 0x3e
    358c:	ff ad       	ldd	r31, Y+63	; 0x3f
    358e:	63 97       	sbiw	r28, 0x13	; 19
    3590:	00 80       	ld	r0, Z
    3592:	63 96       	adiw	r28, 0x13	; 19
    3594:	2e ad       	ldd	r18, Y+62	; 0x3e
    3596:	3f ad       	ldd	r19, Y+63	; 0x3f
    3598:	63 97       	sbiw	r28, 0x13	; 19
    359a:	2f 5f       	subi	r18, 0xFF	; 255
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	63 96       	adiw	r28, 0x13	; 19
    35a0:	3f af       	std	Y+63, r19	; 0x3f
    35a2:	2e af       	std	Y+62, r18	; 0x3e
    35a4:	63 97       	sbiw	r28, 0x13	; 19
    35a6:	61 96       	adiw	r28, 0x11	; 17
    35a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    35aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    35ac:	61 97       	sbiw	r28, 0x11	; 17
    35ae:	00 82       	st	Z, r0
    35b0:	61 96       	adiw	r28, 0x11	; 17
    35b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    35b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    35b6:	61 97       	sbiw	r28, 0x11	; 17
    35b8:	2f 5f       	subi	r18, 0xFF	; 255
    35ba:	3f 4f       	sbci	r19, 0xFF	; 255
    35bc:	61 96       	adiw	r28, 0x11	; 17
    35be:	3f af       	std	Y+63, r19	; 0x3f
    35c0:	2e af       	std	Y+62, r18	; 0x3e
    35c2:	61 97       	sbiw	r28, 0x11	; 17
    35c4:	64 96       	adiw	r28, 0x14	; 20
    35c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    35c8:	64 97       	sbiw	r28, 0x14	; 20
    35ca:	31 50       	subi	r19, 0x01	; 1
    35cc:	64 96       	adiw	r28, 0x14	; 20
    35ce:	3f af       	std	Y+63, r19	; 0x3f
    35d0:	64 97       	sbiw	r28, 0x14	; 20
    35d2:	64 96       	adiw	r28, 0x14	; 20
    35d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35d6:	64 97       	sbiw	r28, 0x14	; 20
    35d8:	88 23       	and	r24, r24
    35da:	b1 f6       	brne	.-84     	; 0x3588 <main+0xbc>
	uint8 Local_LoopCounter1=0;
    35dc:	1e a2       	std	Y+38, r1	; 0x26
	uint8 Local_u8WrongPass=0,Local_u8Temprature=0,MappedLight=0;;
    35de:	1d a2       	std	Y+37, r1	; 0x25
    35e0:	1c a2       	std	Y+36, r1	; 0x24
    35e2:	1b a2       	std	Y+35, r1	; 0x23
	uint8 Local_u8NumArr[4],Local_u8PassArr[4];
	uint16 Local_u16Temp=0,Local_u16ADCValue=0,Local_u16Light=0;
    35e4:	1a a2       	std	Y+34, r1	; 0x22
    35e6:	19 a2       	std	Y+33, r1	; 0x21
    35e8:	18 a2       	std	Y+32, r1	; 0x20
    35ea:	1f 8e       	std	Y+31, r1	; 0x1f
    35ec:	1e 8e       	std	Y+30, r1	; 0x1e
    35ee:	1d 8e       	std	Y+29, r1	; 0x1d
	DCM_cfg DCM_Type;
	DCM_Type.DCM_u8SwitchPort=DIO_u8PORTB;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	8f af       	std	Y+63, r24	; 0x3f
	DCM_Type.DCM_u8Switch1Pin=DIO_u8PIN3;
    35f4:	83 e0       	ldi	r24, 0x03	; 3
    35f6:	fe 01       	movw	r30, r28
    35f8:	e0 5c       	subi	r30, 0xC0	; 192
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 83       	st	Z, r24
	DCM_Type.DCM_u8Switch2Pin=DIO_u8PIN1;
    35fe:	fe 01       	movw	r30, r28
    3600:	ef 5b       	subi	r30, 0xBF	; 191
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	80 83       	st	Z, r24
	DCM_Type.DCM_u8Switch3Pin=DIO_u8PIN1;
    3608:	fe 01       	movw	r30, r28
    360a:	ee 5b       	subi	r30, 0xBE	; 190
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	80 83       	st	Z, r24
	DCM_Type.DCM_u8Switch4Pin=DIO_u8PIN3;
    3612:	fe 01       	movw	r30, r28
    3614:	ed 5b       	subi	r30, 0xBD	; 189
    3616:	ff 4f       	sbci	r31, 0xFF	; 255
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	80 83       	st	Z, r24
	DCM_pType=&DCM_Type;
    361c:	ce 01       	movw	r24, r28
    361e:	cf 96       	adiw	r24, 0x3f	; 63
    3620:	90 93 5a 01 	sts	0x015A, r25
    3624:	80 93 59 01 	sts	0x0159, r24
	CLCD_viodGoToXY(3,0);
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
	CLCD_u8SendString("WELECOME");
    3630:	86 e6       	ldi	r24, 0x66	; 102
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	aa ef       	ldi	r26, 0xFA	; 250
    363e:	b3 e4       	ldi	r27, 0x43	; 67
    3640:	89 8f       	std	Y+25, r24	; 0x19
    3642:	9a 8f       	std	Y+26, r25	; 0x1a
    3644:	ab 8f       	std	Y+27, r26	; 0x1b
    3646:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3648:	69 8d       	ldd	r22, Y+25	; 0x19
    364a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	4a e7       	ldi	r20, 0x7A	; 122
    3656:	55 e4       	ldi	r21, 0x45	; 69
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	8d 8b       	std	Y+21, r24	; 0x15
    3662:	9e 8b       	std	Y+22, r25	; 0x16
    3664:	af 8b       	std	Y+23, r26	; 0x17
    3666:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3668:	6d 89       	ldd	r22, Y+21	; 0x15
    366a:	7e 89       	ldd	r23, Y+22	; 0x16
    366c:	8f 89       	ldd	r24, Y+23	; 0x17
    366e:	98 8d       	ldd	r25, Y+24	; 0x18
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5f e3       	ldi	r21, 0x3F	; 63
    3678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    367c:	88 23       	and	r24, r24
    367e:	2c f4       	brge	.+10     	; 0x368a <main+0x1be>
		__ticks = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9c 8b       	std	Y+20, r25	; 0x14
    3686:	8b 8b       	std	Y+19, r24	; 0x13
    3688:	3f c0       	rjmp	.+126    	; 0x3708 <main+0x23c>
	else if (__tmp > 65535)
    368a:	6d 89       	ldd	r22, Y+21	; 0x15
    368c:	7e 89       	ldd	r23, Y+22	; 0x16
    368e:	8f 89       	ldd	r24, Y+23	; 0x17
    3690:	98 8d       	ldd	r25, Y+24	; 0x18
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	4f e7       	ldi	r20, 0x7F	; 127
    3698:	57 e4       	ldi	r21, 0x47	; 71
    369a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    369e:	18 16       	cp	r1, r24
    36a0:	4c f5       	brge	.+82     	; 0x36f4 <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a2:	69 8d       	ldd	r22, Y+25	; 0x19
    36a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e2       	ldi	r20, 0x20	; 32
    36b0:	51 e4       	ldi	r21, 0x41	; 65
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9c 8b       	std	Y+20, r25	; 0x14
    36c8:	8b 8b       	std	Y+19, r24	; 0x13
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <main+0x21e>
    36cc:	80 e9       	ldi	r24, 0x90	; 144
    36ce:	91 e0       	ldi	r25, 0x01	; 1
    36d0:	9a 8b       	std	Y+18, r25	; 0x12
    36d2:	89 8b       	std	Y+17, r24	; 0x11
    36d4:	89 89       	ldd	r24, Y+17	; 0x11
    36d6:	9a 89       	ldd	r25, Y+18	; 0x12
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <main+0x20c>
    36dc:	9a 8b       	std	Y+18, r25	; 0x12
    36de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e0:	8b 89       	ldd	r24, Y+19	; 0x13
    36e2:	9c 89       	ldd	r25, Y+20	; 0x14
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	9c 8b       	std	Y+20, r25	; 0x14
    36e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ea:	8b 89       	ldd	r24, Y+19	; 0x13
    36ec:	9c 89       	ldd	r25, Y+20	; 0x14
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	69 f7       	brne	.-38     	; 0x36cc <main+0x200>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <main+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f4:	6d 89       	ldd	r22, Y+21	; 0x15
    36f6:	7e 89       	ldd	r23, Y+22	; 0x16
    36f8:	8f 89       	ldd	r24, Y+23	; 0x17
    36fa:	98 8d       	ldd	r25, Y+24	; 0x18
    36fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9c 8b       	std	Y+20, r25	; 0x14
    3706:	8b 8b       	std	Y+19, r24	; 0x13
    3708:	8b 89       	ldd	r24, Y+19	; 0x13
    370a:	9c 89       	ldd	r25, Y+20	; 0x14
    370c:	98 8b       	std	Y+16, r25	; 0x10
    370e:	8f 87       	std	Y+15, r24	; 0x0f
    3710:	8f 85       	ldd	r24, Y+15	; 0x0f
    3712:	98 89       	ldd	r25, Y+16	; 0x10
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	f1 f7       	brne	.-4      	; 0x3714 <main+0x248>
    3718:	98 8b       	std	Y+16, r25	; 0x10
    371a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	for(Local_LoopCounter1=0;Local_LoopCounter1<=15;Local_LoopCounter1++)
    371c:	1e a2       	std	Y+38, r1	; 0x26
    371e:	86 c0       	rjmp	.+268    	; 0x382c <main+0x360>
	{
		CLCD_voidSendCmd(1);
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaFace,0,Local_LoopCounter1,0);
    3726:	ce 01       	movw	r24, r28
    3728:	87 96       	adiw	r24, 0x27	; 39
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	4e a1       	ldd	r20, Y+38	; 0x26
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	0e 94 2e 0a 	call	0x145c	; 0x145c <CLCD_voidSendSpecialCharacter>
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaBody,1,Local_LoopCounter1,1);
    3734:	ce 01       	movw	r24, r28
    3736:	8f 96       	adiw	r24, 0x2f	; 47
    3738:	61 e0       	ldi	r22, 0x01	; 1
    373a:	4e a1       	ldd	r20, Y+38	; 0x26
    373c:	21 e0       	ldi	r18, 0x01	; 1
    373e:	0e 94 2e 0a 	call	0x145c	; 0x145c <CLCD_voidSendSpecialCharacter>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a8 ec       	ldi	r26, 0xC8	; 200
    3748:	b2 e4       	ldi	r27, 0x42	; 66
    374a:	8b 87       	std	Y+11, r24	; 0x0b
    374c:	9c 87       	std	Y+12, r25	; 0x0c
    374e:	ad 87       	std	Y+13, r26	; 0x0d
    3750:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6b 85       	ldd	r22, Y+11	; 0x0b
    3754:	7c 85       	ldd	r23, Y+12	; 0x0c
    3756:	8d 85       	ldd	r24, Y+13	; 0x0d
    3758:	9e 85       	ldd	r25, Y+14	; 0x0e
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a e7       	ldi	r20, 0x7A	; 122
    3760:	55 e4       	ldi	r21, 0x45	; 69
    3762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8f 83       	std	Y+7, r24	; 0x07
    376c:	98 87       	std	Y+8, r25	; 0x08
    376e:	a9 87       	std	Y+9, r26	; 0x09
    3770:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <main+0x2c8>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <main+0x346>
	else if (__tmp > 65535)
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    37b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9e 83       	std	Y+6, r25	; 0x06
    37d2:	8d 83       	std	Y+5, r24	; 0x05
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <main+0x328>
    37d6:	80 e9       	ldi	r24, 0x90	; 144
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	9c 83       	std	Y+4, r25	; 0x04
    37dc:	8b 83       	std	Y+3, r24	; 0x03
    37de:	8b 81       	ldd	r24, Y+3	; 0x03
    37e0:	9c 81       	ldd	r25, Y+4	; 0x04
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <main+0x316>
    37e6:	9c 83       	std	Y+4, r25	; 0x04
    37e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	8d 81       	ldd	r24, Y+5	; 0x05
    37f6:	9e 81       	ldd	r25, Y+6	; 0x06
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <main+0x30a>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3800:	78 85       	ldd	r23, Y+8	; 0x08
    3802:	89 85       	ldd	r24, Y+9	; 0x09
    3804:	9a 85       	ldd	r25, Y+10	; 0x0a
    3806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <main+0x352>
    3822:	9a 83       	std	Y+2, r25	; 0x02
    3824:	89 83       	std	Y+1, r24	; 0x01
	DCM_Type.DCM_u8Switch4Pin=DIO_u8PIN3;
	DCM_pType=&DCM_Type;
	CLCD_viodGoToXY(3,0);
	CLCD_u8SendString("WELECOME");
	_delay_ms(500);
	for(Local_LoopCounter1=0;Local_LoopCounter1<=15;Local_LoopCounter1++)
    3826:	8e a1       	ldd	r24, Y+38	; 0x26
    3828:	8f 5f       	subi	r24, 0xFF	; 255
    382a:	8e a3       	std	Y+38, r24	; 0x26
    382c:	8e a1       	ldd	r24, Y+38	; 0x26
    382e:	80 31       	cpi	r24, 0x10	; 16
    3830:	08 f4       	brcc	.+2      	; 0x3834 <main+0x368>
    3832:	76 cf       	rjmp	.-276    	; 0x3720 <main+0x254>
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaFace,0,Local_LoopCounter1,0);
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaBody,1,Local_LoopCounter1,1);
		_delay_ms(100);
	}

	CLCD_voidSendCmd(1);
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	while(1)
	{
  	  CLCD_u8SendString("Enter ID");
    383a:	8f e6       	ldi	r24, 0x6F	; 111
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>

      for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    3842:	1e a2       	std	Y+38, r1	; 0x26
    3844:	4d c0       	rjmp	.+154    	; 0x38e0 <main+0x414>
      {

    	  CLCD_viodGoToXY(Local_LoopCounter1,1);
    3846:	8e a1       	ldd	r24, Y+38	; 0x26
    3848:	61 e0       	ldi	r22, 0x01	; 1
    384a:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>

    	  switch(Local_LoopCounter1)
    384e:	8e a1       	ldd	r24, Y+38	; 0x26
    3850:	e8 2f       	mov	r30, r24
    3852:	f0 e0       	ldi	r31, 0x00	; 0
    3854:	2a 96       	adiw	r28, 0x0a	; 10
    3856:	ff af       	std	Y+63, r31	; 0x3f
    3858:	ee af       	std	Y+62, r30	; 0x3e
    385a:	2a 97       	sbiw	r28, 0x0a	; 10
    385c:	2a 96       	adiw	r28, 0x0a	; 10
    385e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3860:	3f ad       	ldd	r19, Y+63	; 0x3f
    3862:	2a 97       	sbiw	r28, 0x0a	; 10
    3864:	21 30       	cpi	r18, 0x01	; 1
    3866:	31 05       	cpc	r19, r1
    3868:	21 f1       	breq	.+72     	; 0x38b2 <main+0x3e6>
    386a:	2a 96       	adiw	r28, 0x0a	; 10
    386c:	8e ad       	ldd	r24, Y+62	; 0x3e
    386e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3870:	2a 97       	sbiw	r28, 0x0a	; 10
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	91 05       	cpc	r25, r1
    3876:	3c f4       	brge	.+14     	; 0x3886 <main+0x3ba>
    3878:	2a 96       	adiw	r28, 0x0a	; 10
    387a:	ee ad       	ldd	r30, Y+62	; 0x3e
    387c:	ff ad       	ldd	r31, Y+63	; 0x3f
    387e:	2a 97       	sbiw	r28, 0x0a	; 10
    3880:	30 97       	sbiw	r30, 0x00	; 0
    3882:	81 f0       	breq	.+32     	; 0x38a4 <main+0x3d8>
    3884:	2a c0       	rjmp	.+84     	; 0x38da <main+0x40e>
    3886:	2a 96       	adiw	r28, 0x0a	; 10
    3888:	2e ad       	ldd	r18, Y+62	; 0x3e
    388a:	3f ad       	ldd	r19, Y+63	; 0x3f
    388c:	2a 97       	sbiw	r28, 0x0a	; 10
    388e:	22 30       	cpi	r18, 0x02	; 2
    3890:	31 05       	cpc	r19, r1
    3892:	b1 f0       	breq	.+44     	; 0x38c0 <main+0x3f4>
    3894:	2a 96       	adiw	r28, 0x0a	; 10
    3896:	8e ad       	ldd	r24, Y+62	; 0x3e
    3898:	9f ad       	ldd	r25, Y+63	; 0x3f
    389a:	2a 97       	sbiw	r28, 0x0a	; 10
    389c:	83 30       	cpi	r24, 0x03	; 3
    389e:	91 05       	cpc	r25, r1
    38a0:	b1 f0       	breq	.+44     	; 0x38ce <main+0x402>
    38a2:	1b c0       	rjmp	.+54     	; 0x38da <main+0x40e>
    	  {
    	  case 0 :
    	  {
           EnterID(Local_u8NumArr,4,Local_LoopCounter1);
    38a4:	ce 01       	movw	r24, r28
    38a6:	c7 96       	adiw	r24, 0x37	; 55
    38a8:	64 e0       	ldi	r22, 0x04	; 4
    38aa:	4e a1       	ldd	r20, Y+38	; 0x26
    38ac:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <EnterID>
    38b0:	14 c0       	rjmp	.+40     	; 0x38da <main+0x40e>
    	  }break;
    	  case 1 :
    	  {
              EnterID(Local_u8NumArr,4,Local_LoopCounter1);
    38b2:	ce 01       	movw	r24, r28
    38b4:	c7 96       	adiw	r24, 0x37	; 55
    38b6:	64 e0       	ldi	r22, 0x04	; 4
    38b8:	4e a1       	ldd	r20, Y+38	; 0x26
    38ba:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <EnterID>
    38be:	0d c0       	rjmp	.+26     	; 0x38da <main+0x40e>
    	  }break;
    	  case 2 :
    	  {
              EnterID(Local_u8NumArr,4,Local_LoopCounter1);
    38c0:	ce 01       	movw	r24, r28
    38c2:	c7 96       	adiw	r24, 0x37	; 55
    38c4:	64 e0       	ldi	r22, 0x04	; 4
    38c6:	4e a1       	ldd	r20, Y+38	; 0x26
    38c8:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <EnterID>
    38cc:	06 c0       	rjmp	.+12     	; 0x38da <main+0x40e>
    	  }break;
    	  case 3 :
    	  {
              EnterID(Local_u8NumArr,4,Local_LoopCounter1);
    38ce:	ce 01       	movw	r24, r28
    38d0:	c7 96       	adiw	r24, 0x37	; 55
    38d2:	64 e0       	ldi	r22, 0x04	; 4
    38d4:	4e a1       	ldd	r20, Y+38	; 0x26
    38d6:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <EnterID>
	CLCD_voidSendCmd(1);
	while(1)
	{
  	  CLCD_u8SendString("Enter ID");

      for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    38da:	8e a1       	ldd	r24, Y+38	; 0x26
    38dc:	8f 5f       	subi	r24, 0xFF	; 255
    38de:	8e a3       	std	Y+38, r24	; 0x26
    38e0:	8e a1       	ldd	r24, Y+38	; 0x26
    38e2:	84 30       	cpi	r24, 0x04	; 4
    38e4:	08 f4       	brcc	.+2      	; 0x38e8 <main+0x41c>
    38e6:	af cf       	rjmp	.-162    	; 0x3846 <main+0x37a>
    	  {
              EnterID(Local_u8NumArr,4,Local_LoopCounter1);
    	  }break;
    	  }
      }
      CLCD_voidSendCmd(1);
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	  CLCD_u8SendString("Enter Password");
    38ee:	88 e7       	ldi	r24, 0x78	; 120
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>

  	  for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    38f6:	1e a2       	std	Y+38, r1	; 0x26
    38f8:	4d c0       	rjmp	.+154    	; 0x3994 <main+0x4c8>
  	  {

  		  CLCD_viodGoToXY(Local_LoopCounter1,1);
    38fa:	8e a1       	ldd	r24, Y+38	; 0x26
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
    	  switch(Local_LoopCounter1)
    3902:	8e a1       	ldd	r24, Y+38	; 0x26
    3904:	e8 2f       	mov	r30, r24
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	28 96       	adiw	r28, 0x08	; 8
    390a:	ff af       	std	Y+63, r31	; 0x3f
    390c:	ee af       	std	Y+62, r30	; 0x3e
    390e:	28 97       	sbiw	r28, 0x08	; 8
    3910:	28 96       	adiw	r28, 0x08	; 8
    3912:	2e ad       	ldd	r18, Y+62	; 0x3e
    3914:	3f ad       	ldd	r19, Y+63	; 0x3f
    3916:	28 97       	sbiw	r28, 0x08	; 8
    3918:	21 30       	cpi	r18, 0x01	; 1
    391a:	31 05       	cpc	r19, r1
    391c:	21 f1       	breq	.+72     	; 0x3966 <main+0x49a>
    391e:	28 96       	adiw	r28, 0x08	; 8
    3920:	8e ad       	ldd	r24, Y+62	; 0x3e
    3922:	9f ad       	ldd	r25, Y+63	; 0x3f
    3924:	28 97       	sbiw	r28, 0x08	; 8
    3926:	82 30       	cpi	r24, 0x02	; 2
    3928:	91 05       	cpc	r25, r1
    392a:	3c f4       	brge	.+14     	; 0x393a <main+0x46e>
    392c:	28 96       	adiw	r28, 0x08	; 8
    392e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3930:	ff ad       	ldd	r31, Y+63	; 0x3f
    3932:	28 97       	sbiw	r28, 0x08	; 8
    3934:	30 97       	sbiw	r30, 0x00	; 0
    3936:	81 f0       	breq	.+32     	; 0x3958 <main+0x48c>
    3938:	2a c0       	rjmp	.+84     	; 0x398e <main+0x4c2>
    393a:	28 96       	adiw	r28, 0x08	; 8
    393c:	2e ad       	ldd	r18, Y+62	; 0x3e
    393e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3940:	28 97       	sbiw	r28, 0x08	; 8
    3942:	22 30       	cpi	r18, 0x02	; 2
    3944:	31 05       	cpc	r19, r1
    3946:	b1 f0       	breq	.+44     	; 0x3974 <main+0x4a8>
    3948:	28 96       	adiw	r28, 0x08	; 8
    394a:	8e ad       	ldd	r24, Y+62	; 0x3e
    394c:	9f ad       	ldd	r25, Y+63	; 0x3f
    394e:	28 97       	sbiw	r28, 0x08	; 8
    3950:	83 30       	cpi	r24, 0x03	; 3
    3952:	91 05       	cpc	r25, r1
    3954:	b1 f0       	breq	.+44     	; 0x3982 <main+0x4b6>
    3956:	1b c0       	rjmp	.+54     	; 0x398e <main+0x4c2>
    	  {
    	  case 0 :
    	  {
    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3958:	ce 01       	movw	r24, r28
    395a:	cb 96       	adiw	r24, 0x3b	; 59
    395c:	64 e0       	ldi	r22, 0x04	; 4
    395e:	4e a1       	ldd	r20, Y+38	; 0x26
    3960:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3964:	14 c0       	rjmp	.+40     	; 0x398e <main+0x4c2>
    	  }break;
    	  case 1 :
    	  {
    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3966:	ce 01       	movw	r24, r28
    3968:	cb 96       	adiw	r24, 0x3b	; 59
    396a:	64 e0       	ldi	r22, 0x04	; 4
    396c:	4e a1       	ldd	r20, Y+38	; 0x26
    396e:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3972:	0d c0       	rjmp	.+26     	; 0x398e <main+0x4c2>
          }break;
    	  case 2 :
    	  {
    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3974:	ce 01       	movw	r24, r28
    3976:	cb 96       	adiw	r24, 0x3b	; 59
    3978:	64 e0       	ldi	r22, 0x04	; 4
    397a:	4e a1       	ldd	r20, Y+38	; 0x26
    397c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3980:	06 c0       	rjmp	.+12     	; 0x398e <main+0x4c2>
          }break;
    	  case 3 :
    	  {
    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3982:	ce 01       	movw	r24, r28
    3984:	cb 96       	adiw	r24, 0x3b	; 59
    3986:	64 e0       	ldi	r22, 0x04	; 4
    3988:	4e a1       	ldd	r20, Y+38	; 0x26
    398a:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    	  }
      }
      CLCD_voidSendCmd(1);
	  CLCD_u8SendString("Enter Password");

  	  for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    398e:	8e a1       	ldd	r24, Y+38	; 0x26
    3990:	8f 5f       	subi	r24, 0xFF	; 255
    3992:	8e a3       	std	Y+38, r24	; 0x26
    3994:	8e a1       	ldd	r24, Y+38	; 0x26
    3996:	84 30       	cpi	r24, 0x04	; 4
    3998:	08 f4       	brcc	.+2      	; 0x399c <main+0x4d0>
    399a:	af cf       	rjmp	.-162    	; 0x38fa <main+0x42e>
    	  {
    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
          }break;
    	  }
  	  }
  	  if((Local_u8NumArr[0]==Local_u8PassArr[3])&&(Local_u8NumArr[1]==Local_u8PassArr[2])&&(Local_u8NumArr[2]==Local_u8PassArr[1])&&(Local_u8NumArr[3]==Local_u8PassArr[0]))
    399c:	9f a9       	ldd	r25, Y+55	; 0x37
    399e:	8e ad       	ldd	r24, Y+62	; 0x3e
    39a0:	98 17       	cp	r25, r24
    39a2:	51 f5       	brne	.+84     	; 0x39f8 <main+0x52c>
    39a4:	98 ad       	ldd	r25, Y+56	; 0x38
    39a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    39a8:	98 17       	cp	r25, r24
    39aa:	31 f5       	brne	.+76     	; 0x39f8 <main+0x52c>
    39ac:	99 ad       	ldd	r25, Y+57	; 0x39
    39ae:	8c ad       	ldd	r24, Y+60	; 0x3c
    39b0:	98 17       	cp	r25, r24
    39b2:	11 f5       	brne	.+68     	; 0x39f8 <main+0x52c>
    39b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    39b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    39b8:	98 17       	cp	r25, r24
    39ba:	f1 f4       	brne	.+60     	; 0x39f8 <main+0x52c>
  	  {
	    CLCD_voidSendCmd(1);
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
		CLCD_u8SendString("DCM SW1-");
    39c2:	87 e8       	ldi	r24, 0x87	; 135
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
		CLCD_viodGoToXY(8,0);
    39ca:	88 e0       	ldi	r24, 0x08	; 8
    39cc:	60 e0       	ldi	r22, 0x00	; 0
    39ce:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
		CLCD_u8SendString("STM SW2");
    39d2:	80 e9       	ldi	r24, 0x90	; 144
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
		CLCD_viodGoToXY(0,1);
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	61 e0       	ldi	r22, 0x01	; 1
    39de:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
		CLCD_u8SendString("SERVO M SW3");
    39e2:	88 e9       	ldi	r24, 0x98	; 152
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
  		  while(1)
  		  {
            APPlication(&DCM_Type);
    39ea:	ce 01       	movw	r24, r28
    39ec:	cf 96       	adiw	r24, 0x3f	; 63
    39ee:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <APPlication>
	        ResetSystem();
    39f2:	0e 94 b0 21 	call	0x4360	; 0x4360 <ResetSystem>
    39f6:	f9 cf       	rjmp	.-14     	; 0x39ea <main+0x51e>
  		  }
  	  }
  	  else
  	  {
  		  for(Local_u8WrongPass=0;Local_u8WrongPass<2;Local_u8WrongPass++)
    39f8:	1d a2       	std	Y+37, r1	; 0x25
    39fa:	70 c0       	rjmp	.+224    	; 0x3adc <main+0x610>
  		  {
  			  if((Local_u8NumArr[0]==Local_u8PassArr[3])&&(Local_u8NumArr[1]==Local_u8PassArr[2])&&(Local_u8NumArr[2]==Local_u8PassArr[1])&&(Local_u8NumArr[3]==Local_u8PassArr[0]))
    39fc:	9f a9       	ldd	r25, Y+55	; 0x37
    39fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a00:	98 17       	cp	r25, r24
    3a02:	69 f4       	brne	.+26     	; 0x3a1e <main+0x552>
    3a04:	98 ad       	ldd	r25, Y+56	; 0x38
    3a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a08:	98 17       	cp	r25, r24
    3a0a:	49 f4       	brne	.+18     	; 0x3a1e <main+0x552>
    3a0c:	99 ad       	ldd	r25, Y+57	; 0x39
    3a0e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3a10:	98 17       	cp	r25, r24
    3a12:	29 f4       	brne	.+10     	; 0x3a1e <main+0x552>
    3a14:	9a ad       	ldd	r25, Y+58	; 0x3a
    3a16:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a18:	98 17       	cp	r25, r24
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <main+0x552>
    3a1c:	63 c0       	rjmp	.+198    	; 0x3ae4 <main+0x618>
  			  {
  				  break;
  			  }
  			  else
  			  {
  				  Local_u16Temp=0;
    3a1e:	1a a2       	std	Y+34, r1	; 0x22
    3a20:	19 a2       	std	Y+33, r1	; 0x21
	  		      CLCD_voidSendCmd(1);
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	  		      CLCD_u8SendString("Enter Password");
    3a28:	88 e7       	ldi	r24, 0x78	; 120
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>

  	  		  	  for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    3a30:	1e a2       	std	Y+38, r1	; 0x26
    3a32:	4d c0       	rjmp	.+154    	; 0x3ace <main+0x602>
  	  		  	  {
  	  		      	CLCD_viodGoToXY(Local_LoopCounter1,1);
    3a34:	8e a1       	ldd	r24, Y+38	; 0x26
    3a36:	61 e0       	ldi	r22, 0x01	; 1
    3a38:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
  	  		    	  switch(Local_LoopCounter1)
    3a3c:	8e a1       	ldd	r24, Y+38	; 0x26
    3a3e:	e8 2f       	mov	r30, r24
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	26 96       	adiw	r28, 0x06	; 6
    3a44:	ff af       	std	Y+63, r31	; 0x3f
    3a46:	ee af       	std	Y+62, r30	; 0x3e
    3a48:	26 97       	sbiw	r28, 0x06	; 6
    3a4a:	26 96       	adiw	r28, 0x06	; 6
    3a4c:	2e ad       	ldd	r18, Y+62	; 0x3e
    3a4e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a50:	26 97       	sbiw	r28, 0x06	; 6
    3a52:	21 30       	cpi	r18, 0x01	; 1
    3a54:	31 05       	cpc	r19, r1
    3a56:	21 f1       	breq	.+72     	; 0x3aa0 <main+0x5d4>
    3a58:	26 96       	adiw	r28, 0x06	; 6
    3a5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a5e:	26 97       	sbiw	r28, 0x06	; 6
    3a60:	82 30       	cpi	r24, 0x02	; 2
    3a62:	91 05       	cpc	r25, r1
    3a64:	3c f4       	brge	.+14     	; 0x3a74 <main+0x5a8>
    3a66:	26 96       	adiw	r28, 0x06	; 6
    3a68:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a6c:	26 97       	sbiw	r28, 0x06	; 6
    3a6e:	30 97       	sbiw	r30, 0x00	; 0
    3a70:	81 f0       	breq	.+32     	; 0x3a92 <main+0x5c6>
    3a72:	2a c0       	rjmp	.+84     	; 0x3ac8 <main+0x5fc>
    3a74:	26 96       	adiw	r28, 0x06	; 6
    3a76:	2e ad       	ldd	r18, Y+62	; 0x3e
    3a78:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a7a:	26 97       	sbiw	r28, 0x06	; 6
    3a7c:	22 30       	cpi	r18, 0x02	; 2
    3a7e:	31 05       	cpc	r19, r1
    3a80:	b1 f0       	breq	.+44     	; 0x3aae <main+0x5e2>
    3a82:	26 96       	adiw	r28, 0x06	; 6
    3a84:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a86:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a88:	26 97       	sbiw	r28, 0x06	; 6
    3a8a:	83 30       	cpi	r24, 0x03	; 3
    3a8c:	91 05       	cpc	r25, r1
    3a8e:	b1 f0       	breq	.+44     	; 0x3abc <main+0x5f0>
    3a90:	1b c0       	rjmp	.+54     	; 0x3ac8 <main+0x5fc>
  	  		    	  {
  	  		    	  case 0 :
  	  		    	  {
  	  		    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3a92:	ce 01       	movw	r24, r28
    3a94:	cb 96       	adiw	r24, 0x3b	; 59
    3a96:	64 e0       	ldi	r22, 0x04	; 4
    3a98:	4e a1       	ldd	r20, Y+38	; 0x26
    3a9a:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <main+0x5fc>
                      }break;
  	  		    	  case 1 :
  	  		    	  {
  	  		    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	cb 96       	adiw	r24, 0x3b	; 59
    3aa4:	64 e0       	ldi	r22, 0x04	; 4
    3aa6:	4e a1       	ldd	r20, Y+38	; 0x26
    3aa8:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3aac:	0d c0       	rjmp	.+26     	; 0x3ac8 <main+0x5fc>
                      }break;
  	  		    	  case 2 :
  	  		    	  {
  	  		    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3aae:	ce 01       	movw	r24, r28
    3ab0:	cb 96       	adiw	r24, 0x3b	; 59
    3ab2:	64 e0       	ldi	r22, 0x04	; 4
    3ab4:	4e a1       	ldd	r20, Y+38	; 0x26
    3ab6:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
    3aba:	06 c0       	rjmp	.+12     	; 0x3ac8 <main+0x5fc>
                      }break;
  	  		    	  case 3 :
  	  		    	  {
  	  		    		  EnterPass(Local_u8PassArr,4,Local_LoopCounter1);
    3abc:	ce 01       	movw	r24, r28
    3abe:	cb 96       	adiw	r24, 0x3b	; 59
    3ac0:	64 e0       	ldi	r22, 0x04	; 4
    3ac2:	4e a1       	ldd	r20, Y+38	; 0x26
    3ac4:	0e 94 70 20 	call	0x40e0	; 0x40e0 <EnterPass>
  			  {
  				  Local_u16Temp=0;
	  		      CLCD_voidSendCmd(1);
	  		      CLCD_u8SendString("Enter Password");

  	  		  	  for(Local_LoopCounter1=0;Local_LoopCounter1<4;Local_LoopCounter1++)
    3ac8:	8e a1       	ldd	r24, Y+38	; 0x26
    3aca:	8f 5f       	subi	r24, 0xFF	; 255
    3acc:	8e a3       	std	Y+38, r24	; 0x26
    3ace:	8e a1       	ldd	r24, Y+38	; 0x26
    3ad0:	84 30       	cpi	r24, 0x04	; 4
    3ad2:	08 f4       	brcc	.+2      	; 0x3ad6 <main+0x60a>
    3ad4:	af cf       	rjmp	.-162    	; 0x3a34 <main+0x568>
	        ResetSystem();
  		  }
  	  }
  	  else
  	  {
  		  for(Local_u8WrongPass=0;Local_u8WrongPass<2;Local_u8WrongPass++)
    3ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad8:	8f 5f       	subi	r24, 0xFF	; 255
    3ada:	8d a3       	std	Y+37, r24	; 0x25
    3adc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ade:	82 30       	cpi	r24, 0x02	; 2
    3ae0:	08 f4       	brcc	.+2      	; 0x3ae4 <main+0x618>
    3ae2:	8c cf       	rjmp	.-232    	; 0x39fc <main+0x530>
  	  		    	  }
  	  		  	  }
  			  }

  		  }
  		if(Local_u8WrongPass!=2)
    3ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae6:	82 30       	cpi	r24, 0x02	; 2
    3ae8:	f1 f0       	breq	.+60     	; 0x3b26 <main+0x65a>
  		{
	  		    CLCD_voidSendCmd(1);
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	  			CLCD_u8SendString("DCM SW1-");
    3af0:	87 e8       	ldi	r24, 0x87	; 135
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	  			CLCD_viodGoToXY(8,0);
    3af8:	88 e0       	ldi	r24, 0x08	; 8
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
	  			CLCD_u8SendString("STM SW2");
    3b00:	80 e9       	ldi	r24, 0x90	; 144
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	  			CLCD_viodGoToXY(0,1);
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
	  			CLCD_u8SendString("SERVO M SW3");
    3b10:	88 e9       	ldi	r24, 0x98	; 152
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
  	  		  while(1)
  	  		  {
  	            APPlication(&DCM_Type);
    3b18:	ce 01       	movw	r24, r28
    3b1a:	cf 96       	adiw	r24, 0x3f	; 63
    3b1c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <APPlication>
  	            ResetSystem();
    3b20:	0e 94 b0 21 	call	0x4360	; 0x4360 <ResetSystem>
    3b24:	f9 cf       	rjmp	.-14     	; 0x3b18 <main+0x64c>
  	  		  }
  		}
  		else
  		{
  			CLCD_voidSendCmd(1);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
  			CLCD_u8SendString("Fail Reset the system");
    3b2c:	84 ea       	ldi	r24, 0xA4	; 164
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
    3b34:	ff cf       	rjmp	.-2      	; 0x3b34 <main+0x668>

00003b36 <APPlication>:
  	  }

	}
}
void APPlication(DCM_cfg * Copy_DCM_Data)
{
    3b36:	af 92       	push	r10
    3b38:	bf 92       	push	r11
    3b3a:	cf 92       	push	r12
    3b3c:	df 92       	push	r13
    3b3e:	ef 92       	push	r14
    3b40:	ff 92       	push	r15
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	68 97       	sbiw	r28, 0x18	; 24
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	de bf       	out	0x3e, r29	; 62
    3b56:	0f be       	out	0x3f, r0	; 63
    3b58:	cd bf       	out	0x3d, r28	; 61
    3b5a:	98 8f       	std	Y+24, r25	; 0x18
    3b5c:	8f 8b       	std	Y+23, r24	; 0x17
    static uint8 Local_u8SWState=0,Local_u8RunFlag=0;
    uint16 Local_u16Angel=0,Local_u16ADCVal=0,Local_u16MappedVal=0,Local_u16Counter=0;
    3b5e:	1c 8a       	std	Y+20, r1	; 0x14
    3b60:	1b 8a       	std	Y+19, r1	; 0x13
    3b62:	1e 8a       	std	Y+22, r1	; 0x16
    3b64:	1d 8a       	std	Y+21, r1	; 0x15
    3b66:	1a 8a       	std	Y+18, r1	; 0x12
    3b68:	19 8a       	std	Y+17, r1	; 0x11
    3b6a:	18 8a       	std	Y+16, r1	; 0x10
    3b6c:	1f 86       	std	Y+15, r1	; 0x0f
    Local_u8SWState=KPD_GetPressedKey();
    3b6e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3b72:	80 93 5c 01 	sts	0x015C, r24
    if(Local_u8SWState==1 && Local_u8RunFlag==0)
    3b76:	80 91 5c 01 	lds	r24, 0x015C
    3b7a:	81 30       	cpi	r24, 0x01	; 1
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <APPlication+0x4a>
    3b7e:	51 c0       	rjmp	.+162    	; 0x3c22 <APPlication+0xec>
    3b80:	80 91 5b 01 	lds	r24, 0x015B
    3b84:	88 23       	and	r24, r24
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <APPlication+0x54>
    3b88:	4c c0       	rjmp	.+152    	; 0x3c22 <APPlication+0xec>
    {
    	Local_u8SWState=0xff;
    3b8a:	8f ef       	ldi	r24, 0xFF	; 255
    3b8c:	80 93 5c 01 	sts	0x015C, r24
    	CLCD_voidSendCmd(1);
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
    	CLCD_u8SendString("Conts Sp-SW1");
    3b96:	8a eb       	ldi	r24, 0xBA	; 186
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
    	CLCD_viodGoToXY(0,1);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	61 e0       	ldi	r22, 0x01	; 1
    3ba2:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
    	CLCD_u8SendString("Contr Sp-SW2");
    3ba6:	87 ec       	ldi	r24, 0xC7	; 199
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
        Local_u8RunFlag=1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	80 93 5b 01 	sts	0x015B, r24
    3bb4:	32 c0       	rjmp	.+100    	; 0x3c1a <APPlication+0xe4>
    	while(Local_u8SWState==0xff)
    	{
    		Local_u8SWState=KPD_GetPressedKey();
    3bb6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3bba:	80 93 5c 01 	sts	0x015C, r24
        	if(Local_u8SWState==1)
    3bbe:	80 91 5c 01 	lds	r24, 0x015C
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	79 f4       	brne	.+30     	; 0x3be4 <APPlication+0xae>
        	{
        		CLCD_voidSendCmd(1);
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
            	CLCD_u8SendString("Conts Sp-Run");
    3bcc:	84 ed       	ldi	r24, 0xD4	; 212
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
            	DCM_u8CW(Copy_DCM_Data);
    3bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <DCM_u8CW>
                Local_u8SWState=0xff;
    3bdc:	8f ef       	ldi	r24, 0xFF	; 255
    3bde:	80 93 5c 01 	sts	0x015C, r24
    3be2:	1b c0       	rjmp	.+54     	; 0x3c1a <APPlication+0xe4>
        	}
        	else if(Local_u8SWState==2)
    3be4:	80 91 5c 01 	lds	r24, 0x015C
    3be8:	82 30       	cpi	r24, 0x02	; 2
    3bea:	b9 f4       	brne	.+46     	; 0x3c1a <APPlication+0xe4>
        	{
        		Local_u8SWState=0xff;
    3bec:	8f ef       	ldi	r24, 0xFF	; 255
    3bee:	80 93 5c 01 	sts	0x015C, r24
        		CLCD_voidSendCmd(1);
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
        		TIMER0_voidInit();
    3bf8:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TIMER0_voidInit>
            	CLCD_u8SendString("Contr Sp-Run");
    3bfc:	81 ee       	ldi	r24, 0xE1	; 225
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
    3c04:	06 c0       	rjmp	.+12     	; 0x3c12 <APPlication+0xdc>
            	while(Local_u8SWState==0xff)
            	{
                    MotorSpeedControl();
    3c06:	0e 94 60 21 	call	0x42c0	; 0x42c0 <MotorSpeedControl>
                    Local_u8SWState=KPD_GetPressedKey();
    3c0a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3c0e:	80 93 5c 01 	sts	0x015C, r24
        	{
        		Local_u8SWState=0xff;
        		CLCD_voidSendCmd(1);
        		TIMER0_voidInit();
            	CLCD_u8SendString("Contr Sp-Run");
            	while(Local_u8SWState==0xff)
    3c12:	80 91 5c 01 	lds	r24, 0x015C
    3c16:	8f 3f       	cpi	r24, 0xFF	; 255
    3c18:	b1 f3       	breq	.-20     	; 0x3c06 <APPlication+0xd0>
    	CLCD_voidSendCmd(1);
    	CLCD_u8SendString("Conts Sp-SW1");
    	CLCD_viodGoToXY(0,1);
    	CLCD_u8SendString("Contr Sp-SW2");
        Local_u8RunFlag=1;
    	while(Local_u8SWState==0xff)
    3c1a:	80 91 5c 01 	lds	r24, 0x015C
    3c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c20:	51 f2       	breq	.-108    	; 0x3bb6 <APPlication+0x80>
                    Local_u8SWState=KPD_GetPressedKey();
            	}
        	}
    	}
    }
     if(Local_u8SWState==2 && Local_u8RunFlag==0)
    3c22:	80 91 5c 01 	lds	r24, 0x015C
    3c26:	82 30       	cpi	r24, 0x02	; 2
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <APPlication+0xf6>
    3c2a:	6b c0       	rjmp	.+214    	; 0x3d02 <APPlication+0x1cc>
    3c2c:	80 91 5b 01 	lds	r24, 0x015B
    3c30:	88 23       	and	r24, r24
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <APPlication+0x100>
    3c34:	66 c0       	rjmp	.+204    	; 0x3d02 <APPlication+0x1cc>
    {
    	CLCD_voidSendCmd(1);
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
    	CLCD_u8SendString("Enter Angel:");
    3c3c:	8e ee       	ldi	r24, 0xEE	; 238
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
    	Local_u8SWState=0xff;
    3c44:	8f ef       	ldi	r24, 0xFF	; 255
    3c46:	80 93 5c 01 	sts	0x015C, r24
    	Local_u8RunFlag=1;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	80 93 5b 01 	sts	0x015B, r24
    3c50:	34 c0       	rjmp	.+104    	; 0x3cba <APPlication+0x184>
    	while(Local_u8SWState!=11)
    	{
    		while(Local_u8SWState==0xff)
    		{
        		Local_u8SWState=KPD_GetPressedKey();
    3c52:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3c56:	80 93 5c 01 	sts	0x015C, r24
    	CLCD_u8SendString("Enter Angel:");
    	Local_u8SWState=0xff;
    	Local_u8RunFlag=1;
    	while(Local_u8SWState!=11)
    	{
    		while(Local_u8SWState==0xff)
    3c5a:	80 91 5c 01 	lds	r24, 0x015C
    3c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c60:	c1 f3       	breq	.-16     	; 0x3c52 <APPlication+0x11c>
    		{
        		Local_u8SWState=KPD_GetPressedKey();

    		}
    		if(Local_u8SWState==10)
    3c62:	80 91 5c 01 	lds	r24, 0x015C
    3c66:	8a 30       	cpi	r24, 0x0A	; 10
    3c68:	19 f4       	brne	.+6      	; 0x3c70 <APPlication+0x13a>
    		{
    			Local_u8SWState=0;
    3c6a:	10 92 5c 01 	sts	0x015C, r1
    3c6e:	04 c0       	rjmp	.+8      	; 0x3c78 <APPlication+0x142>
    		}
    		else if(Local_u8SWState==11)
    3c70:	80 91 5c 01 	lds	r24, 0x015C
    3c74:	8b 30       	cpi	r24, 0x0B	; 11
    3c76:	29 f1       	breq	.+74     	; 0x3cc2 <APPlication+0x18c>
    		{
    			break;
    		}
    		CLCD_voidSendNumber(Local_u8SWState);
    3c78:	80 91 5c 01 	lds	r24, 0x015C
    3c7c:	88 2f       	mov	r24, r24
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	a0 e0       	ldi	r26, 0x00	; 0
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
    		Local_u16Angel=Local_u16Angel*10+Local_u8SWState;
    3c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c90:	9c 01       	movw	r18, r24
    3c92:	22 0f       	add	r18, r18
    3c94:	33 1f       	adc	r19, r19
    3c96:	c9 01       	movw	r24, r18
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	28 0f       	add	r18, r24
    3ca2:	39 1f       	adc	r19, r25
    3ca4:	80 91 5c 01 	lds	r24, 0x015C
    3ca8:	88 2f       	mov	r24, r24
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	82 0f       	add	r24, r18
    3cae:	93 1f       	adc	r25, r19
    3cb0:	9c 8b       	std	Y+20, r25	; 0x14
    3cb2:	8b 8b       	std	Y+19, r24	; 0x13
        	Local_u8SWState=0xff;
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	80 93 5c 01 	sts	0x015C, r24
    {
    	CLCD_voidSendCmd(1);
    	CLCD_u8SendString("Enter Angel:");
    	Local_u8SWState=0xff;
    	Local_u8RunFlag=1;
    	while(Local_u8SWState!=11)
    3cba:	80 91 5c 01 	lds	r24, 0x015C
    3cbe:	8b 30       	cpi	r24, 0x0B	; 11
    3cc0:	61 f6       	brne	.-104    	; 0x3c5a <APPlication+0x124>
    		}
    		CLCD_voidSendNumber(Local_u8SWState);
    		Local_u16Angel=Local_u16Angel*10+Local_u8SWState;
        	Local_u8SWState=0xff;
    	}
    	Local_u8SWState=0xff;
    3cc2:	8f ef       	ldi	r24, 0xFF	; 255
    3cc4:	80 93 5c 01 	sts	0x015C, r24
    	CLCD_viodGoToXY(0,1);
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	61 e0       	ldi	r22, 0x01	; 1
    3ccc:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
    	CLCD_voidSendNumber(Local_u16Angel);
    3cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd4:	cc 01       	movw	r24, r24
    3cd6:	a0 e0       	ldi	r26, 0x00	; 0
    3cd8:	b0 e0       	ldi	r27, 0x00	; 0
    3cda:	bc 01       	movw	r22, r24
    3cdc:	cd 01       	movw	r24, r26
    3cde:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
        STM_CW(&Stepper_One,Local_u16Angel);
    3ce2:	83 e2       	ldi	r24, 0x23	; 35
    3ce4:	91 e0       	ldi	r25, 0x01	; 1
    3ce6:	2b 89       	ldd	r18, Y+19	; 0x13
    3ce8:	3c 89       	ldd	r19, Y+20	; 0x14
    3cea:	b9 01       	movw	r22, r18
    3cec:	0e 94 ee 13 	call	0x27dc	; 0x27dc <STM_CW>
    3cf0:	04 c0       	rjmp	.+8      	; 0x3cfa <APPlication+0x1c4>
        while(Local_u8SWState==0xff)
        {
        	Local_u8SWState=KPD_GetPressedKey();
    3cf2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3cf6:	80 93 5c 01 	sts	0x015C, r24
    	}
    	Local_u8SWState=0xff;
    	CLCD_viodGoToXY(0,1);
    	CLCD_voidSendNumber(Local_u16Angel);
        STM_CW(&Stepper_One,Local_u16Angel);
        while(Local_u8SWState==0xff)
    3cfa:	80 91 5c 01 	lds	r24, 0x015C
    3cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    3d00:	c1 f3       	breq	.-16     	; 0x3cf2 <APPlication+0x1bc>
        {
        	Local_u8SWState=KPD_GetPressedKey();
        }
    }
     if(Local_u8SWState==3 && Local_u8RunFlag==0)
    3d02:	80 91 5c 01 	lds	r24, 0x015C
    3d06:	83 30       	cpi	r24, 0x03	; 3
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <APPlication+0x1d6>
    3d0a:	11 c1       	rjmp	.+546    	; 0x3f2e <APPlication+0x3f8>
    3d0c:	80 91 5b 01 	lds	r24, 0x015B
    3d10:	88 23       	and	r24, r24
    3d12:	09 f0       	breq	.+2      	; 0x3d16 <APPlication+0x1e0>
    3d14:	0c c1       	rjmp	.+536    	; 0x3f2e <APPlication+0x3f8>
    {
    	Local_u8SWState=0xff;
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	80 93 5c 01 	sts	0x015C, r24
    	CLCD_voidSendCmd(1);
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
    	CLCD_u8SendString("Angel:");
    3d22:	8b ef       	ldi	r24, 0xFB	; 251
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
        TIMER1_voidInit();
    3d2a:	0e 94 a4 19 	call	0x3348	; 0x3348 <TIMER1_voidInit>
        Local_u8RunFlag=1;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	80 93 5b 01 	sts	0x015B, r24
    3d34:	f7 c0       	rjmp	.+494    	; 0x3f24 <APPlication+0x3ee>
    	while(Local_u8SWState==0xff)
    	{
            ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADCVal);
    3d36:	9e 01       	movw	r18, r28
    3d38:	2b 5e       	subi	r18, 0xEB	; 235
    3d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	b9 01       	movw	r22, r18
    3d40:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
            Local_u16MappedVal=MAP(0,1023,1000,5000,Local_u16ADCVal);
    3d44:	8d 89       	ldd	r24, Y+21	; 0x15
    3d46:	9e 89       	ldd	r25, Y+22	; 0x16
    3d48:	cc 01       	movw	r24, r24
    3d4a:	a0 e0       	ldi	r26, 0x00	; 0
    3d4c:	b0 e0       	ldi	r27, 0x00	; 0
    3d4e:	00 d0       	rcall	.+0      	; 0x3d50 <APPlication+0x21a>
    3d50:	00 d0       	rcall	.+0      	; 0x3d52 <APPlication+0x21c>
    3d52:	ed b7       	in	r30, 0x3d	; 61
    3d54:	fe b7       	in	r31, 0x3e	; 62
    3d56:	31 96       	adiw	r30, 0x01	; 1
    3d58:	80 83       	st	Z, r24
    3d5a:	91 83       	std	Z+1, r25	; 0x01
    3d5c:	a2 83       	std	Z+2, r26	; 0x02
    3d5e:	b3 83       	std	Z+3, r27	; 0x03
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	2f ef       	ldi	r18, 0xFF	; 255
    3d6a:	33 e0       	ldi	r19, 0x03	; 3
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	0f 2e       	mov	r0, r31
    3d72:	f8 ee       	ldi	r31, 0xE8	; 232
    3d74:	ef 2e       	mov	r14, r31
    3d76:	f3 e0       	ldi	r31, 0x03	; 3
    3d78:	ff 2e       	mov	r15, r31
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	0f 2f       	mov	r16, r31
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	1f 2f       	mov	r17, r31
    3d82:	f0 2d       	mov	r31, r0
    3d84:	0f 2e       	mov	r0, r31
    3d86:	f8 e8       	ldi	r31, 0x88	; 136
    3d88:	af 2e       	mov	r10, r31
    3d8a:	f3 e1       	ldi	r31, 0x13	; 19
    3d8c:	bf 2e       	mov	r11, r31
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	cf 2e       	mov	r12, r31
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	df 2e       	mov	r13, r31
    3d96:	f0 2d       	mov	r31, r0
    3d98:	0e 94 ed 20 	call	0x41da	; 0x41da <MAP>
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9a 8b       	std	Y+18, r25	; 0x12
    3daa:	89 8b       	std	Y+17, r24	; 0x11
            Local_u16Angel=(uint16)(((sint32)Local_u16MappedVal*45u/1000u)-45u);
    3dac:	89 89       	ldd	r24, Y+17	; 0x11
    3dae:	9a 89       	ldd	r25, Y+18	; 0x12
    3db0:	cc 01       	movw	r24, r24
    3db2:	a0 e0       	ldi	r26, 0x00	; 0
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	2d e2       	ldi	r18, 0x2D	; 45
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	40 e0       	ldi	r20, 0x00	; 0
    3dbc:	50 e0       	ldi	r21, 0x00	; 0
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__mulsi3>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	28 ee       	ldi	r18, 0xE8	; 232
    3dcc:	33 e0       	ldi	r19, 0x03	; 3
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	bc 01       	movw	r22, r24
    3dd4:	cd 01       	movw	r24, r26
    3dd6:	0e 94 1c 22 	call	0x4438	; 0x4438 <__divmodsi4>
    3dda:	da 01       	movw	r26, r20
    3ddc:	c9 01       	movw	r24, r18
    3dde:	8d 97       	sbiw	r24, 0x2d	; 45
    3de0:	9c 8b       	std	Y+20, r25	; 0x14
    3de2:	8b 8b       	std	Y+19, r24	; 0x13
            CLCD_viodGoToXY(7,0);
    3de4:	87 e0       	ldi	r24, 0x07	; 7
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
            CLCD_voidSendNumber(Local_u16Angel);
    3dec:	8b 89       	ldd	r24, Y+19	; 0x13
    3dee:	9c 89       	ldd	r25, Y+20	; 0x14
    3df0:	cc 01       	movw	r24, r24
    3df2:	a0 e0       	ldi	r26, 0x00	; 0
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	bc 01       	movw	r22, r24
    3df8:	cd 01       	movw	r24, r26
    3dfa:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
            for(Local_u16Counter=1000;Local_u16Counter<=Local_u16MappedVal;Local_u16Counter++)
    3dfe:	88 ee       	ldi	r24, 0xE8	; 232
    3e00:	93 e0       	ldi	r25, 0x03	; 3
    3e02:	98 8b       	std	Y+16, r25	; 0x10
    3e04:	8f 87       	std	Y+15, r24	; 0x0f
    3e06:	86 c0       	rjmp	.+268    	; 0x3f14 <APPlication+0x3de>
            {
                TIMER1_void_Set_CompValue(40000,Local_u16Counter);
    3e08:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e0a:	38 89       	ldd	r19, Y+16	; 0x10
    3e0c:	80 e4       	ldi	r24, 0x40	; 64
    3e0e:	9c e9       	ldi	r25, 0x9C	; 156
    3e10:	b9 01       	movw	r22, r18
    3e12:	0e 94 16 1a 	call	0x342c	; 0x342c <TIMER1_void_Set_CompValue>
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	a0 e8       	ldi	r26, 0x80	; 128
    3e1c:	bf e3       	ldi	r27, 0x3F	; 63
    3e1e:	8b 87       	std	Y+11, r24	; 0x0b
    3e20:	9c 87       	std	Y+12, r25	; 0x0c
    3e22:	ad 87       	std	Y+13, r26	; 0x0d
    3e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	4a e7       	ldi	r20, 0x7A	; 122
    3e34:	55 e4       	ldi	r21, 0x45	; 69
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	8f 83       	std	Y+7, r24	; 0x07
    3e40:	98 87       	std	Y+8, r25	; 0x08
    3e42:	a9 87       	std	Y+9, r26	; 0x09
    3e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e46:	6f 81       	ldd	r22, Y+7	; 0x07
    3e48:	78 85       	ldd	r23, Y+8	; 0x08
    3e4a:	89 85       	ldd	r24, Y+9	; 0x09
    3e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	5f e3       	ldi	r21, 0x3F	; 63
    3e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e5a:	88 23       	and	r24, r24
    3e5c:	2c f4       	brge	.+10     	; 0x3e68 <APPlication+0x332>
		__ticks = 1;
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	9e 83       	std	Y+6, r25	; 0x06
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	3f c0       	rjmp	.+126    	; 0x3ee6 <APPlication+0x3b0>
	else if (__tmp > 65535)
    3e68:	6f 81       	ldd	r22, Y+7	; 0x07
    3e6a:	78 85       	ldd	r23, Y+8	; 0x08
    3e6c:	89 85       	ldd	r24, Y+9	; 0x09
    3e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e70:	20 e0       	ldi	r18, 0x00	; 0
    3e72:	3f ef       	ldi	r19, 0xFF	; 255
    3e74:	4f e7       	ldi	r20, 0x7F	; 127
    3e76:	57 e4       	ldi	r21, 0x47	; 71
    3e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e7c:	18 16       	cp	r1, r24
    3e7e:	4c f5       	brge	.+82     	; 0x3ed2 <APPlication+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	bc 01       	movw	r22, r24
    3e9a:	cd 01       	movw	r24, r26
    3e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	9e 83       	std	Y+6, r25	; 0x06
    3ea6:	8d 83       	std	Y+5, r24	; 0x05
    3ea8:	0f c0       	rjmp	.+30     	; 0x3ec8 <APPlication+0x392>
    3eaa:	80 e9       	ldi	r24, 0x90	; 144
    3eac:	91 e0       	ldi	r25, 0x01	; 1
    3eae:	9c 83       	std	Y+4, r25	; 0x04
    3eb0:	8b 83       	std	Y+3, r24	; 0x03
    3eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <APPlication+0x380>
    3eba:	9c 83       	std	Y+4, r25	; 0x04
    3ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	9e 83       	std	Y+6, r25	; 0x06
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	69 f7       	brne	.-38     	; 0x3eaa <APPlication+0x374>
    3ed0:	14 c0       	rjmp	.+40     	; 0x3efa <APPlication+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed4:	78 85       	ldd	r23, Y+8	; 0x08
    3ed6:	89 85       	ldd	r24, Y+9	; 0x09
    3ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	9e 83       	std	Y+6, r25	; 0x06
    3ee4:	8d 83       	std	Y+5, r24	; 0x05
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eea:	9a 83       	std	Y+2, r25	; 0x02
    3eec:	89 83       	std	Y+1, r24	; 0x01
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <APPlication+0x3bc>
    3ef6:	9a 83       	std	Y+2, r25	; 0x02
    3ef8:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(1);
                Local_u8SWState=KPD_GetPressedKey();
    3efa:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3efe:	80 93 5c 01 	sts	0x015C, r24
                if(Local_u8SWState==5)
    3f02:	80 91 5c 01 	lds	r24, 0x015C
    3f06:	85 30       	cpi	r24, 0x05	; 5
    3f08:	69 f0       	breq	.+26     	; 0x3f24 <APPlication+0x3ee>
            ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADCVal);
            Local_u16MappedVal=MAP(0,1023,1000,5000,Local_u16ADCVal);
            Local_u16Angel=(uint16)(((sint32)Local_u16MappedVal*45u/1000u)-45u);
            CLCD_viodGoToXY(7,0);
            CLCD_voidSendNumber(Local_u16Angel);
            for(Local_u16Counter=1000;Local_u16Counter<=Local_u16MappedVal;Local_u16Counter++)
    3f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0c:	98 89       	ldd	r25, Y+16	; 0x10
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	98 8b       	std	Y+16, r25	; 0x10
    3f12:	8f 87       	std	Y+15, r24	; 0x0f
    3f14:	2f 85       	ldd	r18, Y+15	; 0x0f
    3f16:	38 89       	ldd	r19, Y+16	; 0x10
    3f18:	89 89       	ldd	r24, Y+17	; 0x11
    3f1a:	9a 89       	ldd	r25, Y+18	; 0x12
    3f1c:	82 17       	cp	r24, r18
    3f1e:	93 07       	cpc	r25, r19
    3f20:	08 f0       	brcs	.+2      	; 0x3f24 <APPlication+0x3ee>
    3f22:	72 cf       	rjmp	.-284    	; 0x3e08 <APPlication+0x2d2>
    	Local_u8SWState=0xff;
    	CLCD_voidSendCmd(1);
    	CLCD_u8SendString("Angel:");
        TIMER1_voidInit();
        Local_u8RunFlag=1;
    	while(Local_u8SWState==0xff)
    3f24:	80 91 5c 01 	lds	r24, 0x015C
    3f28:	8f 3f       	cpi	r24, 0xFF	; 255
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <APPlication+0x3f8>
    3f2c:	04 cf       	rjmp	.-504    	; 0x3d36 <APPlication+0x200>
            }

    	}

    }
     if(Local_u8SWState==5 && Local_u8RunFlag==1)
    3f2e:	80 91 5c 01 	lds	r24, 0x015C
    3f32:	85 30       	cpi	r24, 0x05	; 5
    3f34:	f9 f4       	brne	.+62     	; 0x3f74 <APPlication+0x43e>
    3f36:	80 91 5b 01 	lds	r24, 0x015B
    3f3a:	81 30       	cpi	r24, 0x01	; 1
    3f3c:	d9 f4       	brne	.+54     	; 0x3f74 <APPlication+0x43e>
    {
    	Local_u8RunFlag=0;
    3f3e:	10 92 5b 01 	sts	0x015B, r1
		CLCD_voidSendCmd(1);
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	    CLCD_u8SendString("DCM SW1-");
    3f48:	87 e8       	ldi	r24, 0x87	; 135
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
		CLCD_viodGoToXY(8,0);
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
		CLCD_u8SendString("STM SW2");
    3f58:	80 e9       	ldi	r24, 0x90	; 144
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
		CLCD_viodGoToXY(0,1);
    3f60:	80 e0       	ldi	r24, 0x00	; 0
    3f62:	61 e0       	ldi	r22, 0x01	; 1
    3f64:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
		CLCD_u8SendString("SERVO M SW3");
    3f68:	88 e9       	ldi	r24, 0x98	; 152
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
		PORT_voidInit();
    3f70:	0e 94 c9 13 	call	0x2792	; 0x2792 <PORT_voidInit>
		return;
    }
}
    3f74:	68 96       	adiw	r28, 0x18	; 24
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	cf 91       	pop	r28
    3f82:	df 91       	pop	r29
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	ff 90       	pop	r15
    3f8a:	ef 90       	pop	r14
    3f8c:	df 90       	pop	r13
    3f8e:	cf 90       	pop	r12
    3f90:	bf 90       	pop	r11
    3f92:	af 90       	pop	r10
    3f94:	08 95       	ret

00003f96 <EnterID>:
void EnterID(uint8 Copy_NumArr[],uint8 Copy_Size,uint8 Copy_counter)
{
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <EnterID+0x6>
    3f9c:	00 d0       	rcall	.+0      	; 0x3f9e <EnterID+0x8>
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	6b 83       	std	Y+3, r22	; 0x03
    3fa8:	4c 83       	std	Y+4, r20	; 0x04
	static uint8 Local_SWNum=0,Local_NotPressed=0;
	Local_NotPressed=0;
    3faa:	10 92 5d 01 	sts	0x015D, r1
    3fae:	8c c0       	rjmp	.+280    	; 0x40c8 <EnterID+0x132>
	  while(Local_NotPressed!=1)
	  {
          Local_SWNum=KPD_GetPressedKey();
    3fb0:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    3fb4:	80 93 5e 01 	sts	0x015E, r24
		  if(Local_SWNum==1)
    3fb8:	80 91 5e 01 	lds	r24, 0x015E
    3fbc:	81 30       	cpi	r24, 0x01	; 1
    3fbe:	f1 f4       	brne	.+60     	; 0x3ffc <EnterID+0x66>
		  {
			  Copy_NumArr[Copy_counter]=1;
    3fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	fc 01       	movw	r30, r24
    3fcc:	e2 0f       	add	r30, r18
    3fce:	f3 1f       	adc	r31, r19
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	80 83       	st	Z, r24
			  CLCD_voidSendNumber( Copy_NumArr[Copy_counter]);
    3fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd6:	28 2f       	mov	r18, r24
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fde:	fc 01       	movw	r30, r24
    3fe0:	e2 0f       	add	r30, r18
    3fe2:	f3 1f       	adc	r31, r19
    3fe4:	80 81       	ld	r24, Z
    3fe6:	88 2f       	mov	r24, r24
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	a0 e0       	ldi	r26, 0x00	; 0
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	bc 01       	movw	r22, r24
    3ff0:	cd 01       	movw	r24, r26
    3ff2:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
			  Local_NotPressed=1;
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	80 93 5d 01 	sts	0x015D, r24
		  }
		  if(Local_SWNum==2)
    3ffc:	80 91 5e 01 	lds	r24, 0x015E
    4000:	82 30       	cpi	r24, 0x02	; 2
    4002:	f1 f4       	brne	.+60     	; 0x4040 <EnterID+0xaa>
		  {
			  Copy_NumArr[Copy_counter]=2;
    4004:	8c 81       	ldd	r24, Y+4	; 0x04
    4006:	28 2f       	mov	r18, r24
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	89 81       	ldd	r24, Y+1	; 0x01
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	fc 01       	movw	r30, r24
    4010:	e2 0f       	add	r30, r18
    4012:	f3 1f       	adc	r31, r19
    4014:	82 e0       	ldi	r24, 0x02	; 2
    4016:	80 83       	st	Z, r24
			  CLCD_voidSendNumber( Copy_NumArr[Copy_counter]);
    4018:	8c 81       	ldd	r24, Y+4	; 0x04
    401a:	28 2f       	mov	r18, r24
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	fc 01       	movw	r30, r24
    4024:	e2 0f       	add	r30, r18
    4026:	f3 1f       	adc	r31, r19
    4028:	80 81       	ld	r24, Z
    402a:	88 2f       	mov	r24, r24
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a0 e0       	ldi	r26, 0x00	; 0
    4030:	b0 e0       	ldi	r27, 0x00	; 0
    4032:	bc 01       	movw	r22, r24
    4034:	cd 01       	movw	r24, r26
    4036:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
			  Local_NotPressed=1;
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	80 93 5d 01 	sts	0x015D, r24
		  }
		  if(Local_SWNum==3)
    4040:	80 91 5e 01 	lds	r24, 0x015E
    4044:	83 30       	cpi	r24, 0x03	; 3
    4046:	f1 f4       	brne	.+60     	; 0x4084 <EnterID+0xee>
		  {
			  Copy_NumArr[Copy_counter]=3;
    4048:	8c 81       	ldd	r24, Y+4	; 0x04
    404a:	28 2f       	mov	r18, r24
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	9a 81       	ldd	r25, Y+2	; 0x02
    4052:	fc 01       	movw	r30, r24
    4054:	e2 0f       	add	r30, r18
    4056:	f3 1f       	adc	r31, r19
    4058:	83 e0       	ldi	r24, 0x03	; 3
    405a:	80 83       	st	Z, r24
			  CLCD_voidSendNumber( Copy_NumArr[Copy_counter]);
    405c:	8c 81       	ldd	r24, Y+4	; 0x04
    405e:	28 2f       	mov	r18, r24
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	fc 01       	movw	r30, r24
    4068:	e2 0f       	add	r30, r18
    406a:	f3 1f       	adc	r31, r19
    406c:	80 81       	ld	r24, Z
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	a0 e0       	ldi	r26, 0x00	; 0
    4074:	b0 e0       	ldi	r27, 0x00	; 0
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
			  Local_NotPressed=1;
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	80 93 5d 01 	sts	0x015D, r24
		  }
		  if(Local_SWNum==4)
    4084:	80 91 5e 01 	lds	r24, 0x015E
    4088:	84 30       	cpi	r24, 0x04	; 4
    408a:	f1 f4       	brne	.+60     	; 0x40c8 <EnterID+0x132>
		  {
			  Copy_NumArr[Copy_counter]=4;
    408c:	8c 81       	ldd	r24, Y+4	; 0x04
    408e:	28 2f       	mov	r18, r24
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	9a 81       	ldd	r25, Y+2	; 0x02
    4096:	fc 01       	movw	r30, r24
    4098:	e2 0f       	add	r30, r18
    409a:	f3 1f       	adc	r31, r19
    409c:	84 e0       	ldi	r24, 0x04	; 4
    409e:	80 83       	st	Z, r24
			  CLCD_voidSendNumber( Copy_NumArr[Copy_counter]);
    40a0:	8c 81       	ldd	r24, Y+4	; 0x04
    40a2:	28 2f       	mov	r18, r24
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	9a 81       	ldd	r25, Y+2	; 0x02
    40aa:	fc 01       	movw	r30, r24
    40ac:	e2 0f       	add	r30, r18
    40ae:	f3 1f       	adc	r31, r19
    40b0:	80 81       	ld	r24, Z
    40b2:	88 2f       	mov	r24, r24
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	a0 e0       	ldi	r26, 0x00	; 0
    40b8:	b0 e0       	ldi	r27, 0x00	; 0
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
			  Local_NotPressed=1;
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	80 93 5d 01 	sts	0x015D, r24
}
void EnterID(uint8 Copy_NumArr[],uint8 Copy_Size,uint8 Copy_counter)
{
	static uint8 Local_SWNum=0,Local_NotPressed=0;
	Local_NotPressed=0;
	  while(Local_NotPressed!=1)
    40c8:	80 91 5d 01 	lds	r24, 0x015D
    40cc:	81 30       	cpi	r24, 0x01	; 1
    40ce:	09 f0       	breq	.+2      	; 0x40d2 <EnterID+0x13c>
    40d0:	6f cf       	rjmp	.-290    	; 0x3fb0 <EnterID+0x1a>
			  Copy_NumArr[Copy_counter]=4;
			  CLCD_voidSendNumber( Copy_NumArr[Copy_counter]);
			  Local_NotPressed=1;
		  }
	  }
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	cf 91       	pop	r28
    40dc:	df 91       	pop	r29
    40de:	08 95       	ret

000040e0 <EnterPass>:
void EnterPass(uint8 Copy_PassArr[],uint8 Copy_Size,uint8 Copy_counter)
{
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	00 d0       	rcall	.+0      	; 0x40e6 <EnterPass+0x6>
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <EnterPass+0x8>
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	9a 83       	std	Y+2, r25	; 0x02
    40ee:	89 83       	std	Y+1, r24	; 0x01
    40f0:	6b 83       	std	Y+3, r22	; 0x03
    40f2:	4c 83       	std	Y+4, r20	; 0x04
	static uint8 Local_PassNum=0,Local_NotPressed=0;
	Local_NotPressed=0;
    40f4:	10 92 5f 01 	sts	0x015F, r1
    40f8:	64 c0       	rjmp	.+200    	; 0x41c2 <EnterPass+0xe2>
	  while(Local_NotPressed!=1)
	  {
          Local_PassNum=KPD_GetPressedKey();
    40fa:	0e 94 51 13 	call	0x26a2	; 0x26a2 <KPD_GetPressedKey>
    40fe:	80 93 60 01 	sts	0x0160, r24
		  if(Local_PassNum==1)
    4102:	80 91 60 01 	lds	r24, 0x0160
    4106:	81 30       	cpi	r24, 0x01	; 1
    4108:	a1 f4       	brne	.+40     	; 0x4132 <EnterPass+0x52>
		  {
			  Copy_PassArr[Copy_counter]=1;
    410a:	8c 81       	ldd	r24, Y+4	; 0x04
    410c:	28 2f       	mov	r18, r24
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	fc 01       	movw	r30, r24
    4116:	e2 0f       	add	r30, r18
    4118:	f3 1f       	adc	r31, r19
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	80 83       	st	Z, r24
			  CLCD_viodGoToXY(Copy_counter,1);
    411e:	8c 81       	ldd	r24, Y+4	; 0x04
    4120:	61 e0       	ldi	r22, 0x01	; 1
    4122:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
			  CLCD_voidSendData('*');
    4126:	8a e2       	ldi	r24, 0x2A	; 42
    4128:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			  Local_NotPressed=1;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	80 93 5f 01 	sts	0x015F, r24
		  }
		  if(Local_PassNum==2)
    4132:	80 91 60 01 	lds	r24, 0x0160
    4136:	82 30       	cpi	r24, 0x02	; 2
    4138:	a1 f4       	brne	.+40     	; 0x4162 <EnterPass+0x82>
		  {
			  Copy_PassArr[Copy_counter]=2;
    413a:	8c 81       	ldd	r24, Y+4	; 0x04
    413c:	28 2f       	mov	r18, r24
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	9a 81       	ldd	r25, Y+2	; 0x02
    4144:	fc 01       	movw	r30, r24
    4146:	e2 0f       	add	r30, r18
    4148:	f3 1f       	adc	r31, r19
    414a:	82 e0       	ldi	r24, 0x02	; 2
    414c:	80 83       	st	Z, r24
			  CLCD_viodGoToXY(Copy_counter,1);
    414e:	8c 81       	ldd	r24, Y+4	; 0x04
    4150:	61 e0       	ldi	r22, 0x01	; 1
    4152:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
			  CLCD_voidSendData('*');
    4156:	8a e2       	ldi	r24, 0x2A	; 42
    4158:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			  Local_NotPressed=1;
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	80 93 5f 01 	sts	0x015F, r24
		  }
		  if(Local_PassNum==3)
    4162:	80 91 60 01 	lds	r24, 0x0160
    4166:	83 30       	cpi	r24, 0x03	; 3
    4168:	a1 f4       	brne	.+40     	; 0x4192 <EnterPass+0xb2>
		  {
			  Copy_PassArr[Copy_counter]=3;
    416a:	8c 81       	ldd	r24, Y+4	; 0x04
    416c:	28 2f       	mov	r18, r24
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	9a 81       	ldd	r25, Y+2	; 0x02
    4174:	fc 01       	movw	r30, r24
    4176:	e2 0f       	add	r30, r18
    4178:	f3 1f       	adc	r31, r19
    417a:	83 e0       	ldi	r24, 0x03	; 3
    417c:	80 83       	st	Z, r24
			  CLCD_viodGoToXY(Copy_counter,1);
    417e:	8c 81       	ldd	r24, Y+4	; 0x04
    4180:	61 e0       	ldi	r22, 0x01	; 1
    4182:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
			  CLCD_voidSendData('*');
    4186:	8a e2       	ldi	r24, 0x2A	; 42
    4188:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			  Local_NotPressed=1;
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	80 93 5f 01 	sts	0x015F, r24
		  }
		  if(Local_PassNum==4)
    4192:	80 91 60 01 	lds	r24, 0x0160
    4196:	84 30       	cpi	r24, 0x04	; 4
    4198:	a1 f4       	brne	.+40     	; 0x41c2 <EnterPass+0xe2>
		  {
			  Copy_PassArr[Copy_counter]=4;
    419a:	8c 81       	ldd	r24, Y+4	; 0x04
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	fc 01       	movw	r30, r24
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	84 e0       	ldi	r24, 0x04	; 4
    41ac:	80 83       	st	Z, r24
			  CLCD_viodGoToXY(Copy_counter,1);
    41ae:	8c 81       	ldd	r24, Y+4	; 0x04
    41b0:	61 e0       	ldi	r22, 0x01	; 1
    41b2:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>
			  CLCD_voidSendData('*');
    41b6:	8a e2       	ldi	r24, 0x2A	; 42
    41b8:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			  Local_NotPressed=1;
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	80 93 5f 01 	sts	0x015F, r24
}
void EnterPass(uint8 Copy_PassArr[],uint8 Copy_Size,uint8 Copy_counter)
{
	static uint8 Local_PassNum=0,Local_NotPressed=0;
	Local_NotPressed=0;
	  while(Local_NotPressed!=1)
    41c2:	80 91 5f 01 	lds	r24, 0x015F
    41c6:	81 30       	cpi	r24, 0x01	; 1
    41c8:	09 f0       	breq	.+2      	; 0x41cc <EnterPass+0xec>
    41ca:	97 cf       	rjmp	.-210    	; 0x40fa <EnterPass+0x1a>
			  CLCD_voidSendData('*');
			  Local_NotPressed=1;

		  }
	  }
}
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	0f 90       	pop	r0
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <MAP>:
sint32 MAP(sint32 InputRangeMin,sint32 InputRangeMax,sint32 OutputRangeMin,sint32 OutputRangeMax,sint32 InputValu)
{
    41da:	af 92       	push	r10
    41dc:	bf 92       	push	r11
    41de:	cf 92       	push	r12
    41e0:	df 92       	push	r13
    41e2:	ef 92       	push	r14
    41e4:	ff 92       	push	r15
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	df 93       	push	r29
    41ec:	cf 93       	push	r28
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	64 97       	sbiw	r28, 0x14	; 20
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	6d 83       	std	Y+5, r22	; 0x05
    4200:	7e 83       	std	Y+6, r23	; 0x06
    4202:	8f 83       	std	Y+7, r24	; 0x07
    4204:	98 87       	std	Y+8, r25	; 0x08
    4206:	29 87       	std	Y+9, r18	; 0x09
    4208:	3a 87       	std	Y+10, r19	; 0x0a
    420a:	4b 87       	std	Y+11, r20	; 0x0b
    420c:	5c 87       	std	Y+12, r21	; 0x0c
    420e:	ed 86       	std	Y+13, r14	; 0x0d
    4210:	fe 86       	std	Y+14, r15	; 0x0e
    4212:	0f 87       	std	Y+15, r16	; 0x0f
    4214:	18 8b       	std	Y+16, r17	; 0x10
    4216:	a9 8a       	std	Y+17, r10	; 0x11
    4218:	ba 8a       	std	Y+18, r11	; 0x12
    421a:	cb 8a       	std	Y+19, r12	; 0x13
    421c:	dc 8a       	std	Y+20, r13	; 0x14
	sint32 Local_Output=0;
    421e:	19 82       	std	Y+1, r1	; 0x01
    4220:	1a 82       	std	Y+2, r1	; 0x02
    4222:	1b 82       	std	Y+3, r1	; 0x03
    4224:	1c 82       	std	Y+4, r1	; 0x04
	Local_Output=((OutputRangeMax-OutputRangeMin)*(InputValu-InputRangeMax))/(InputRangeMin-InputRangeMax);
    4226:	29 89       	ldd	r18, Y+17	; 0x11
    4228:	3a 89       	ldd	r19, Y+18	; 0x12
    422a:	4b 89       	ldd	r20, Y+19	; 0x13
    422c:	5c 89       	ldd	r21, Y+20	; 0x14
    422e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4230:	9e 85       	ldd	r25, Y+14	; 0x0e
    4232:	af 85       	ldd	r26, Y+15	; 0x0f
    4234:	b8 89       	ldd	r27, Y+16	; 0x10
    4236:	79 01       	movw	r14, r18
    4238:	8a 01       	movw	r16, r20
    423a:	e8 1a       	sub	r14, r24
    423c:	f9 0a       	sbc	r15, r25
    423e:	0a 0b       	sbc	r16, r26
    4240:	1b 0b       	sbc	r17, r27
    4242:	29 a1       	ldd	r18, Y+33	; 0x21
    4244:	3a a1       	ldd	r19, Y+34	; 0x22
    4246:	4b a1       	ldd	r20, Y+35	; 0x23
    4248:	5c a1       	ldd	r21, Y+36	; 0x24
    424a:	89 85       	ldd	r24, Y+9	; 0x09
    424c:	9a 85       	ldd	r25, Y+10	; 0x0a
    424e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4250:	bc 85       	ldd	r27, Y+12	; 0x0c
    4252:	28 1b       	sub	r18, r24
    4254:	39 0b       	sbc	r19, r25
    4256:	4a 0b       	sbc	r20, r26
    4258:	5b 0b       	sbc	r21, r27
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <__mulsi3>
    4262:	7b 01       	movw	r14, r22
    4264:	8c 01       	movw	r16, r24
    4266:	2d 81       	ldd	r18, Y+5	; 0x05
    4268:	3e 81       	ldd	r19, Y+6	; 0x06
    426a:	4f 81       	ldd	r20, Y+7	; 0x07
    426c:	58 85       	ldd	r21, Y+8	; 0x08
    426e:	89 85       	ldd	r24, Y+9	; 0x09
    4270:	9a 85       	ldd	r25, Y+10	; 0x0a
    4272:	ab 85       	ldd	r26, Y+11	; 0x0b
    4274:	bc 85       	ldd	r27, Y+12	; 0x0c
    4276:	28 1b       	sub	r18, r24
    4278:	39 0b       	sbc	r19, r25
    427a:	4a 0b       	sbc	r20, r26
    427c:	5b 0b       	sbc	r21, r27
    427e:	c8 01       	movw	r24, r16
    4280:	b7 01       	movw	r22, r14
    4282:	0e 94 1c 22 	call	0x4438	; 0x4438 <__divmodsi4>
    4286:	da 01       	movw	r26, r20
    4288:	c9 01       	movw	r24, r18
    428a:	89 83       	std	Y+1, r24	; 0x01
    428c:	9a 83       	std	Y+2, r25	; 0x02
    428e:	ab 83       	std	Y+3, r26	; 0x03
    4290:	bc 83       	std	Y+4, r27	; 0x04
	return Local_Output;
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	9a 81       	ldd	r25, Y+2	; 0x02
    4296:	ab 81       	ldd	r26, Y+3	; 0x03
    4298:	bc 81       	ldd	r27, Y+4	; 0x04
}
    429a:	bc 01       	movw	r22, r24
    429c:	cd 01       	movw	r24, r26
    429e:	64 96       	adiw	r28, 0x14	; 20
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	ff 90       	pop	r15
    42b4:	ef 90       	pop	r14
    42b6:	df 90       	pop	r13
    42b8:	cf 90       	pop	r12
    42ba:	bf 90       	pop	r11
    42bc:	af 90       	pop	r10
    42be:	08 95       	ret

000042c0 <MotorSpeedControl>:
void MotorSpeedControl(void)
{
    42c0:	af 92       	push	r10
    42c2:	bf 92       	push	r11
    42c4:	cf 92       	push	r12
    42c6:	df 92       	push	r13
    42c8:	ef 92       	push	r14
    42ca:	ff 92       	push	r15
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
	static uint8 LOcal_u8MappedVal=0;
	static uint16 Local_u16ADCVal=0;
	ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADCVal);
    42d8:	21 e6       	ldi	r18, 0x61	; 97
    42da:	31 e0       	ldi	r19, 0x01	; 1
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	b9 01       	movw	r22, r18
    42e0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    LOcal_u8MappedVal=MAP(0,1023,0,255,Local_u16ADCVal);
    42e4:	80 91 61 01 	lds	r24, 0x0161
    42e8:	90 91 62 01 	lds	r25, 0x0162
    42ec:	cc 01       	movw	r24, r24
    42ee:	a0 e0       	ldi	r26, 0x00	; 0
    42f0:	b0 e0       	ldi	r27, 0x00	; 0
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <MotorSpeedControl+0x34>
    42f4:	00 d0       	rcall	.+0      	; 0x42f6 <MotorSpeedControl+0x36>
    42f6:	ed b7       	in	r30, 0x3d	; 61
    42f8:	fe b7       	in	r31, 0x3e	; 62
    42fa:	31 96       	adiw	r30, 0x01	; 1
    42fc:	80 83       	st	Z, r24
    42fe:	91 83       	std	Z+1, r25	; 0x01
    4300:	a2 83       	std	Z+2, r26	; 0x02
    4302:	b3 83       	std	Z+3, r27	; 0x03
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	70 e0       	ldi	r23, 0x00	; 0
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	2f ef       	ldi	r18, 0xFF	; 255
    430e:	33 e0       	ldi	r19, 0x03	; 3
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	ee 24       	eor	r14, r14
    4316:	ff 24       	eor	r15, r15
    4318:	87 01       	movw	r16, r14
    431a:	0f 2e       	mov	r0, r31
    431c:	ff ef       	ldi	r31, 0xFF	; 255
    431e:	af 2e       	mov	r10, r31
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	bf 2e       	mov	r11, r31
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	cf 2e       	mov	r12, r31
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	df 2e       	mov	r13, r31
    432c:	f0 2d       	mov	r31, r0
    432e:	0e 94 ed 20 	call	0x41da	; 0x41da <MAP>
    4332:	0f 90       	pop	r0
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	dc 01       	movw	r26, r24
    433c:	cb 01       	movw	r24, r22
    433e:	80 93 63 01 	sts	0x0163, r24
    TIMER0_void_Set_CompValue(LOcal_u8MappedVal);
    4342:	80 91 63 01 	lds	r24, 0x0163
    4346:	0e 94 08 1a 	call	0x3410	; 0x3410 <TIMER0_void_Set_CompValue>
}
    434a:	cf 91       	pop	r28
    434c:	df 91       	pop	r29
    434e:	1f 91       	pop	r17
    4350:	0f 91       	pop	r16
    4352:	ff 90       	pop	r15
    4354:	ef 90       	pop	r14
    4356:	df 90       	pop	r13
    4358:	cf 90       	pop	r12
    435a:	bf 90       	pop	r11
    435c:	af 90       	pop	r10
    435e:	08 95       	ret

00004360 <ResetSystem>:
void ResetSystem(void)
{
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TCCR0,4);
    4368:	a3 e5       	ldi	r26, 0x53	; 83
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	e3 e5       	ldi	r30, 0x53	; 83
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	8f 7e       	andi	r24, 0xEF	; 239
    4374:	8c 93       	st	X, r24
    CLR_BIT(TCCR0,5);
    4376:	a3 e5       	ldi	r26, 0x53	; 83
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e3 e5       	ldi	r30, 0x53	; 83
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	8f 7d       	andi	r24, 0xDF	; 223
    4382:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCr1A_COM1A1);
    4384:	af e4       	ldi	r26, 0x4F	; 79
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	ef e4       	ldi	r30, 0x4F	; 79
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	8f 77       	andi	r24, 0x7F	; 127
    4390:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCr1A_COM1A0);
    4392:	af e4       	ldi	r26, 0x4F	; 79
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	ef e4       	ldi	r30, 0x4F	; 79
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	8f 7b       	andi	r24, 0xBF	; 191
    439e:	8c 93       	st	X, r24
    PORT_voidInit();
    43a0:	0e 94 c9 13 	call	0x2792	; 0x2792 <PORT_voidInit>
	APPlication(DCM_pType);
    43a4:	80 91 59 01 	lds	r24, 0x0159
    43a8:	90 91 5a 01 	lds	r25, 0x015A
    43ac:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <APPlication>

}
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	08 95       	ret

000043b6 <__mulsi3>:
    43b6:	62 9f       	mul	r22, r18
    43b8:	d0 01       	movw	r26, r0
    43ba:	73 9f       	mul	r23, r19
    43bc:	f0 01       	movw	r30, r0
    43be:	82 9f       	mul	r24, r18
    43c0:	e0 0d       	add	r30, r0
    43c2:	f1 1d       	adc	r31, r1
    43c4:	64 9f       	mul	r22, r20
    43c6:	e0 0d       	add	r30, r0
    43c8:	f1 1d       	adc	r31, r1
    43ca:	92 9f       	mul	r25, r18
    43cc:	f0 0d       	add	r31, r0
    43ce:	83 9f       	mul	r24, r19
    43d0:	f0 0d       	add	r31, r0
    43d2:	74 9f       	mul	r23, r20
    43d4:	f0 0d       	add	r31, r0
    43d6:	65 9f       	mul	r22, r21
    43d8:	f0 0d       	add	r31, r0
    43da:	99 27       	eor	r25, r25
    43dc:	72 9f       	mul	r23, r18
    43de:	b0 0d       	add	r27, r0
    43e0:	e1 1d       	adc	r30, r1
    43e2:	f9 1f       	adc	r31, r25
    43e4:	63 9f       	mul	r22, r19
    43e6:	b0 0d       	add	r27, r0
    43e8:	e1 1d       	adc	r30, r1
    43ea:	f9 1f       	adc	r31, r25
    43ec:	bd 01       	movw	r22, r26
    43ee:	cf 01       	movw	r24, r30
    43f0:	11 24       	eor	r1, r1
    43f2:	08 95       	ret

000043f4 <__udivmodsi4>:
    43f4:	a1 e2       	ldi	r26, 0x21	; 33
    43f6:	1a 2e       	mov	r1, r26
    43f8:	aa 1b       	sub	r26, r26
    43fa:	bb 1b       	sub	r27, r27
    43fc:	fd 01       	movw	r30, r26
    43fe:	0d c0       	rjmp	.+26     	; 0x441a <__udivmodsi4_ep>

00004400 <__udivmodsi4_loop>:
    4400:	aa 1f       	adc	r26, r26
    4402:	bb 1f       	adc	r27, r27
    4404:	ee 1f       	adc	r30, r30
    4406:	ff 1f       	adc	r31, r31
    4408:	a2 17       	cp	r26, r18
    440a:	b3 07       	cpc	r27, r19
    440c:	e4 07       	cpc	r30, r20
    440e:	f5 07       	cpc	r31, r21
    4410:	20 f0       	brcs	.+8      	; 0x441a <__udivmodsi4_ep>
    4412:	a2 1b       	sub	r26, r18
    4414:	b3 0b       	sbc	r27, r19
    4416:	e4 0b       	sbc	r30, r20
    4418:	f5 0b       	sbc	r31, r21

0000441a <__udivmodsi4_ep>:
    441a:	66 1f       	adc	r22, r22
    441c:	77 1f       	adc	r23, r23
    441e:	88 1f       	adc	r24, r24
    4420:	99 1f       	adc	r25, r25
    4422:	1a 94       	dec	r1
    4424:	69 f7       	brne	.-38     	; 0x4400 <__udivmodsi4_loop>
    4426:	60 95       	com	r22
    4428:	70 95       	com	r23
    442a:	80 95       	com	r24
    442c:	90 95       	com	r25
    442e:	9b 01       	movw	r18, r22
    4430:	ac 01       	movw	r20, r24
    4432:	bd 01       	movw	r22, r26
    4434:	cf 01       	movw	r24, r30
    4436:	08 95       	ret

00004438 <__divmodsi4>:
    4438:	97 fb       	bst	r25, 7
    443a:	09 2e       	mov	r0, r25
    443c:	05 26       	eor	r0, r21
    443e:	0e d0       	rcall	.+28     	; 0x445c <__divmodsi4_neg1>
    4440:	57 fd       	sbrc	r21, 7
    4442:	04 d0       	rcall	.+8      	; 0x444c <__divmodsi4_neg2>
    4444:	d7 df       	rcall	.-82     	; 0x43f4 <__udivmodsi4>
    4446:	0a d0       	rcall	.+20     	; 0x445c <__divmodsi4_neg1>
    4448:	00 1c       	adc	r0, r0
    444a:	38 f4       	brcc	.+14     	; 0x445a <__divmodsi4_exit>

0000444c <__divmodsi4_neg2>:
    444c:	50 95       	com	r21
    444e:	40 95       	com	r20
    4450:	30 95       	com	r19
    4452:	21 95       	neg	r18
    4454:	3f 4f       	sbci	r19, 0xFF	; 255
    4456:	4f 4f       	sbci	r20, 0xFF	; 255
    4458:	5f 4f       	sbci	r21, 0xFF	; 255

0000445a <__divmodsi4_exit>:
    445a:	08 95       	ret

0000445c <__divmodsi4_neg1>:
    445c:	f6 f7       	brtc	.-4      	; 0x445a <__divmodsi4_exit>
    445e:	90 95       	com	r25
    4460:	80 95       	com	r24
    4462:	70 95       	com	r23
    4464:	61 95       	neg	r22
    4466:	7f 4f       	sbci	r23, 0xFF	; 255
    4468:	8f 4f       	sbci	r24, 0xFF	; 255
    446a:	9f 4f       	sbci	r25, 0xFF	; 255
    446c:	08 95       	ret

0000446e <__prologue_saves__>:
    446e:	2f 92       	push	r2
    4470:	3f 92       	push	r3
    4472:	4f 92       	push	r4
    4474:	5f 92       	push	r5
    4476:	6f 92       	push	r6
    4478:	7f 92       	push	r7
    447a:	8f 92       	push	r8
    447c:	9f 92       	push	r9
    447e:	af 92       	push	r10
    4480:	bf 92       	push	r11
    4482:	cf 92       	push	r12
    4484:	df 92       	push	r13
    4486:	ef 92       	push	r14
    4488:	ff 92       	push	r15
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	ca 1b       	sub	r28, r26
    4498:	db 0b       	sbc	r29, r27
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	f8 94       	cli
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	0f be       	out	0x3f, r0	; 63
    44a2:	cd bf       	out	0x3d, r28	; 61
    44a4:	09 94       	ijmp

000044a6 <__epilogue_restores__>:
    44a6:	2a 88       	ldd	r2, Y+18	; 0x12
    44a8:	39 88       	ldd	r3, Y+17	; 0x11
    44aa:	48 88       	ldd	r4, Y+16	; 0x10
    44ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    44ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    44b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    44b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    44b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    44b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    44b8:	b9 84       	ldd	r11, Y+9	; 0x09
    44ba:	c8 84       	ldd	r12, Y+8	; 0x08
    44bc:	df 80       	ldd	r13, Y+7	; 0x07
    44be:	ee 80       	ldd	r14, Y+6	; 0x06
    44c0:	fd 80       	ldd	r15, Y+5	; 0x05
    44c2:	0c 81       	ldd	r16, Y+4	; 0x04
    44c4:	1b 81       	ldd	r17, Y+3	; 0x03
    44c6:	aa 81       	ldd	r26, Y+2	; 0x02
    44c8:	b9 81       	ldd	r27, Y+1	; 0x01
    44ca:	ce 0f       	add	r28, r30
    44cc:	d1 1d       	adc	r29, r1
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	ed 01       	movw	r28, r26
    44da:	08 95       	ret

000044dc <_exit>:
    44dc:	f8 94       	cli

000044de <__stop_program>:
    44de:	ff cf       	rjmp	.-2      	; 0x44de <__stop_program>
