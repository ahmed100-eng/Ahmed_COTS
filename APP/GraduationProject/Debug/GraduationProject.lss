
GraduationProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  00005e7a  00005f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  0080020a  0080020a  000060b8  2**0
                  ALLOC
  3 .stab         000066c0  00000000  00000000  000060b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c09  00000000  00000000  0000c778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000f381  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000f4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000f631  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012165  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00012f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013301  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__vector_4>
      14:	0c 94 6f 22 	jmp	0x44de	; 0x44de <__vector_5>
      18:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__vector_6>
      1c:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__vector_7>
      20:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__vector_8>
      24:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__vector_9>
      28:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__vector_10>
      2c:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__vector_15>
      40:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 37       	cpi	r26, 0x71	; 113
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <main>
      8a:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 2f 	jmp	0x5e08	; 0x5e08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 2f 	jmp	0x5e28	; 0x5e28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 2f 	jmp	0x5e60	; 0x5e60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static uint8 ADC_u8ChainCounter=0u;
static uint8 ADC_u8ChainSize=0u;
static uint8 ADC_u8Chose=0u;
static ADC_Chain_t *pADC_Chain_t=NULL;
void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Reference selection*/
#if ADC_u8REF_VOLT  == AREF_REF
	   CLR_BIT(ADMUX,ADMUX_REFS0);
	   CLR_BIT(ADMUX,ADMUX_REFS1);
#elif ADC_u8REF_VOLT ==  AVCC_REF
   SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
   CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
   /*Enable left adjusting*/
#if ADC_RESOLUTION  == EIGHT_BITS
   /*Enable left adjusting*/
   SET_BIT(ADMUX,ADMUX_ADLAR);
#elif ADC_RESOLUTION  == TEN_BITS
   CLR_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#else #error wrong ADC_RESOLUTION configuration
#endif
#if ADC_u8INT_ENABLE  ==  DISABLED
   CLR_BIT(ADCSRA,ADCSRA_ADIE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24
#elif ADC_u8INT_ENABLE  ==  ENABLED
   SET_BIT(ADCSRA,ADCSRA_ADIE);
#else #error wrong ADC_u8INT_ENABLE configuration
#endif
   /*configure Prescaler setting*/
   ADCSRA &= PRESCALER_MASK;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
   ADCSRA |= ADC_u8PRESCALER_VAL;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	87 60       	ori	r24, 0x07	; 7
     ba0:	8c 93       	st	X, r24

   /*Enable ADC*/
   SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:
uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel,uint16* Copy_pu16Result)

{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
   uint8 Local_u8ErrorState=OK;
     bd0:	1d 82       	std	Y+5, r1	; 0x05

   if(Copy_pu16Result!= NULL)
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	09 f4       	brne	.+2      	; 0xbdc <ADC_u8StartConversionSynch+0x26>
     bda:	69 c0       	rjmp	.+210    	; 0xcae <ADC_u8StartConversionSynch+0xf8>
   {
	   /*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     bdc:	80 91 6a 01 	lds	r24, 0x016A
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ADC_u8StartConversionSynch+0x30>
     be4:	61 c0       	rjmp	.+194    	; 0xca8 <ADC_u8StartConversionSynch+0xf2>
	   {
		   uint32 Local_u32TimeoutCounter= 0u;
     be6:	19 82       	std	Y+1, r1	; 0x01
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	1c 82       	std	Y+4, r1	; 0x04
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     bee:	10 92 6a 01 	sts	0x016A, r1



	   /*configure the analog Channel */
		ADMUX &= CHANNEL_MASK;
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	8c 93       	st	X, r24
		ADMUX|=Copy_u8Channel;
     c00:	a7 e2       	ldi	r26, 0x27	; 39
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e2       	ldi	r30, 0x27	; 39
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	90 81       	ld	r25, Z
     c0a:	8e 81       	ldd	r24, Y+6	; 0x06
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <ADC_u8StartConversionSynch+0x80>
		//SET_BIT(ADCSRA,ADCSRA_ADIE);

		/*Wait until ADC conversion complete*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && Local_u32TimeoutCounter < ADC_u32TIMEOUT)
			{
			  Local_u32TimeoutCounter++;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	ab 81       	ldd	r26, Y+3	; 0x03
     c26:	bc 81       	ldd	r27, Y+4	; 0x04
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	a1 1d       	adc	r26, r1
     c2c:	b1 1d       	adc	r27, r1
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	ab 83       	std	Y+3, r26	; 0x03
     c34:	bc 83       	std	Y+4, r27	; 0x04
		/*Enable interrupt flag*/
		//GIE_voidEnable();
		//SET_BIT(ADCSRA,ADCSRA_ADIE);

		/*Wait until ADC conversion complete*/
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && Local_u32TimeoutCounter < ADC_u32TIMEOUT)
     c36:	e6 e2       	ldi	r30, 0x26	; 38
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 95       	swap	r24
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	61 f4       	brne	.+24     	; 0xc64 <ADC_u8StartConversionSynch+0xae>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	ab 81       	ldd	r26, Y+3	; 0x03
     c52:	bc 81       	ldd	r27, Y+4	; 0x04
     c54:	80 35       	cpi	r24, 0x50	; 80
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	92 07       	cpc	r25, r18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	a2 07       	cpc	r26, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	b2 07       	cpc	r27, r18
     c62:	f0 f2       	brcs	.-68     	; 0xc20 <ADC_u8StartConversionSynch+0x6a>
			{
			  Local_u32TimeoutCounter++;
			}
		if(Local_u32TimeoutCounter>=ADC_u32TIMEOUT)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	ab 81       	ldd	r26, Y+3	; 0x03
     c6a:	bc 81       	ldd	r27, Y+4	; 0x04
     c6c:	80 35       	cpi	r24, 0x50	; 80
     c6e:	23 ec       	ldi	r18, 0xC3	; 195
     c70:	92 07       	cpc	r25, r18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	a2 07       	cpc	r26, r18
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	b2 07       	cpc	r27, r18
     c7a:	18 f0       	brcs	.+6      	; 0xc82 <ADC_u8StartConversionSynch+0xcc>
		{
			/*Loop is broken because flag isn't raised until timeout is passed*/
			Local_u8ErrorState=TIMEOUT_ERR;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	18 c0       	rjmp	.+48     	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
		else
		{
			/*Loop is broken because flag is raised befor timeout is passed*/

		/*Clear The conversion complete flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIF);
     c82:	a6 e2       	ldi	r26, 0x26	; 38
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e6 e2       	ldi	r30, 0x26	; 38
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 61       	ori	r24, 0x10	; 16
     c8e:	8c 93       	st	X, r24
		/*Read the data*/
	#if ADC_RESOLUTION == EIGHT_BITS
		*Copy_pu16Result= ADCH;
	#elif ADC_RESOLUTION == TEN_BITS
		*Copy_pu16Result= ADC;
     c90:	e4 e2       	ldi	r30, 0x24	; 36
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	ef 81       	ldd	r30, Y+7	; 0x07
     c9a:	f8 85       	ldd	r31, Y+8	; 0x08
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
	#endif
		/*ADC is now IDLE*/
		ADC_u8BusyFlag = IDLE;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 6a 01 	sts	0x016A, r24
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
		}
     }
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	8d 83       	std	Y+5, r24	; 0x05
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <ADC_u8StartConversionSynch+0xfc>
	   }
   }
   else
   {
	   Local_u8ErrorState=NULL_PTR_ERR;
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	8d 83       	std	Y+5, r24	; 0x05
   }


	return Local_u8ErrorState;
     cb2:	8d 81       	ldd	r24, Y+5	; 0x05

}
     cb4:	28 96       	adiw	r28, 0x08	; 8
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <ADC_u8StartConversionAsynch>:
uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel,uint16* Copypu16Result,void (*Copy_pvNotficationFunc)(void))
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <ADC_u8StartConversionAsynch+0x6>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <ADC_u8StartConversionAsynch+0x8>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <ADC_u8StartConversionAsynch+0xa>
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	7c 83       	std	Y+4, r23	; 0x04
     cd8:	6b 83       	std	Y+3, r22	; 0x03
     cda:	5e 83       	std	Y+6, r21	; 0x06
     cdc:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState = OK;
     cde:	19 82       	std	Y+1, r1	; 0x01
	if((Copypu16Result != NULL) && (Copy_pvNotficationFunc != NULL))
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	c9 f1       	breq	.+114    	; 0xd5a <ADC_u8StartConversionAsynch+0x94>
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	9e 81       	ldd	r25, Y+6	; 0x06
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	a9 f1       	breq	.+106    	; 0xd5a <ADC_u8StartConversionAsynch+0x94>
	{
		/*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     cf0:	80 91 6a 01 	lds	r24, 0x016A
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	71 f5       	brne	.+92     	; 0xd54 <ADC_u8StartConversionAsynch+0x8e>
	   {
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     cf8:	10 92 6a 01 	sts	0x016A, r1
		   /*Start conversion Asynch is the choose*/
		   ADC_u8Chose=0u;
     cfc:	10 92 12 02 	sts	0x0212, r1

		/*initialize the result pointer globally*/
		ADC_pu16ConversionResult = Copypu16Result;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	90 93 0b 02 	sts	0x020B, r25
     d08:	80 93 0a 02 	sts	0x020A, r24
		/*initialize the notification function pointer globally*/
		ADC_pvNotificationFunc = Copy_pvNotficationFunc;
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	90 93 0d 02 	sts	0x020D, r25
     d14:	80 93 0c 02 	sts	0x020C, r24
		/*configure the analoge Channel */
		ADMUX &= CHANNEL_MASK;
     d18:	a7 e2       	ldi	r26, 0x27	; 39
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e2       	ldi	r30, 0x27	; 39
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 7e       	andi	r24, 0xE0	; 224
     d24:	8c 93       	st	X, r24
		ADMUX|=Copy_u8Channel;
     d26:	a7 e2       	ldi	r26, 0x27	; 39
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e2       	ldi	r30, 0x27	; 39
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	90 81       	ld	r25, Z
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	89 2b       	or	r24, r25
     d34:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     d36:	a6 e2       	ldi	r26, 0x26	; 38
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e6 e2       	ldi	r30, 0x26	; 38
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	8c 93       	st	X, r24

		/*Enable interrupt flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     d44:	a6 e2       	ldi	r26, 0x26	; 38
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	88 60       	ori	r24, 0x08	; 8
     d50:	8c 93       	st	X, r24
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <ADC_u8StartConversionAsynch+0x98>

		}
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <ADC_u8StartConversionAsynch+0x98>
	   }
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <ADC_u8StartChainingConvAsynch>:
uint8 ADC_u8StartChainingConvAsynch(ADC_Chain_t*Copy_Data)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <ADC_u8StartChainingConvAsynch+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
     d82:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Data!=NULL)
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <ADC_u8StartChainingConvAsynch+0x1c>
     d8c:	5b c0       	rjmp	.+182    	; 0xe44 <ADC_u8StartChainingConvAsynch+0xd2>
	{
		/*Check if ADC is not busy*/
	   if(ADC_u8BusyFlag == IDLE)
     d8e:	80 91 6a 01 	lds	r24, 0x016A
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <ADC_u8StartChainingConvAsynch+0x26>
     d96:	53 c0       	rjmp	.+166    	; 0xe3e <ADC_u8StartChainingConvAsynch+0xcc>
	   {
		   /*ADC is now busy*/
		   ADC_u8BusyFlag = BUSY;
     d98:	10 92 6a 01 	sts	0x016A, r1
		   /*Start Chain conversion Asynch is the choose*/
		   ADC_u8Chose=1u;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 12 02 	sts	0x0212, r24

	       ADC_pvNotificationFunc=Copy_Data->ADC_pvNotificationFunc;
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	85 81       	ldd	r24, Z+5	; 0x05
     da8:	96 81       	ldd	r25, Z+6	; 0x06
     daa:	90 93 0d 02 	sts	0x020D, r25
     dae:	80 93 0c 02 	sts	0x020C, r24
	       ADC_pu16ConversionResult=Copy_Data->ADC_pu8ResultArr;
     db2:	ea 81       	ldd	r30, Y+2	; 0x02
     db4:	fb 81       	ldd	r31, Y+3	; 0x03
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	94 81       	ldd	r25, Z+4	; 0x04
     dba:	90 93 0b 02 	sts	0x020B, r25
     dbe:	80 93 0a 02 	sts	0x020A, r24
	       ADC_pu8ChannelARR=Copy_Data->ADC_pu8ChannelArr;
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	92 81       	ldd	r25, Z+2	; 0x02
     dca:	90 93 0f 02 	sts	0x020F, r25
     dce:	80 93 0e 02 	sts	0x020E, r24
	       ADC_u8ChainSize=Copy_Data->ADC_u8ChainSize;
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	80 81       	ld	r24, Z
     dd8:	80 93 11 02 	sts	0x0211, r24
	       pADC_Chain_t=Copy_Data->pADC_chain;
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	87 81       	ldd	r24, Z+7	; 0x07
     de2:	90 85       	ldd	r25, Z+8	; 0x08
     de4:	90 93 14 02 	sts	0x0214, r25
     de8:	80 93 13 02 	sts	0x0213, r24
			/*configure the analog Channel */
			ADMUX &= CHANNEL_MASK;
     dec:	a7 e2       	ldi	r26, 0x27	; 39
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e2       	ldi	r30, 0x27	; 39
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 7e       	andi	r24, 0xE0	; 224
     df8:	8c 93       	st	X, r24
			ADMUX|=ADC_pu8ChannelARR[ADC_u8ChainCounter];
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	40 81       	ld	r20, Z
     e04:	20 91 0e 02 	lds	r18, 0x020E
     e08:	30 91 0f 02 	lds	r19, 0x020F
     e0c:	80 91 10 02 	lds	r24, 0x0210
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	f9 01       	movw	r30, r18
     e16:	e8 0f       	add	r30, r24
     e18:	f9 1f       	adc	r31, r25
     e1a:	80 81       	ld	r24, Z
     e1c:	84 2b       	or	r24, r20
     e1e:	8c 93       	st	X, r24
			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     e20:	a6 e2       	ldi	r26, 0x26	; 38
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 64       	ori	r24, 0x40	; 64
     e2c:	8c 93       	st	X, r24

			/*Enable interrupt flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	88 60       	ori	r24, 0x08	; 8
     e3a:	8c 93       	st	X, r24
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <ADC_u8StartChainingConvAsynch+0xd6>
	   }
	   else
	   {
		   /*ADC was busy, assign the error state*/
		   Local_u8ErrorState = BUSY_STATE_ERR;
     e3e:	84 e0       	ldi	r24, 0x04	; 4
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <ADC_u8StartChainingConvAsynch+0xd6>
	   }
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_u8ErrorState;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <__vector_16>:
 * @brief ADC conversion complete ISR
 *
 */
void __vector_16 (void)    __attribute__((signal));
void __vector_16 (void)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pu16ConversionResult != NULL)
     e80:	80 91 0a 02 	lds	r24, 0x020A
     e84:	90 91 0b 02 	lds	r25, 0x020B
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	09 f4       	brne	.+2      	; 0xe8e <__vector_16+0x38>
     e8c:	65 c0       	rjmp	.+202    	; 0xf58 <__vector_16+0x102>
	{
		if(ADC_u8Chose==0)
     e8e:	80 91 12 02 	lds	r24, 0x0212
     e92:	88 23       	and	r24, r24
     e94:	09 f5       	brne	.+66     	; 0xed8 <__vector_16+0x82>
		{
#if ADC_RESOLUTION == EIGHT_BITS
	*ADC_pu16ConversionResult= ADCH;
#elif ADC_RESOLUTION == TEN_BITS
	*ADC_pu16ConversionResult= ADC;
     e96:	a0 91 0a 02 	lds	r26, 0x020A
     e9a:	b0 91 0b 02 	lds	r27, 0x020B
     e9e:	e4 e2       	ldi	r30, 0x24	; 36
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	8d 93       	st	X+, r24
     ea8:	9c 93       	st	X, r25
#endif
	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     eaa:	a6 e2       	ldi	r26, 0x26	; 38
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e2       	ldi	r30, 0x26	; 38
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	8c 93       	st	X, r24
	/*ADC is now IDLE*/
	ADC_u8BusyFlag = IDLE;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 6a 01 	sts	0x016A, r24
	/*Invoke the application notification function */
	if(ADC_pvNotificationFunc !=NULL)
     ebe:	80 91 0c 02 	lds	r24, 0x020C
     ec2:	90 91 0d 02 	lds	r25, 0x020D
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <__vector_16+0x76>
     eca:	46 c0       	rjmp	.+140    	; 0xf58 <__vector_16+0x102>
	{
		ADC_pvNotificationFunc();
     ecc:	e0 91 0c 02 	lds	r30, 0x020C
     ed0:	f0 91 0d 02 	lds	r31, 0x020D
     ed4:	09 95       	icall
     ed6:	40 c0       	rjmp	.+128    	; 0xf58 <__vector_16+0x102>
	else
	{
		/*Notification function pointer is NULL*/
	}
		}
		else if(ADC_u8Chose==1)
     ed8:	80 91 12 02 	lds	r24, 0x0212
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	e1 f5       	brne	.+120    	; 0xf58 <__vector_16+0x102>
		{
#if ADC_RESOLUTION == EIGHT_BITS
	ADC_pu16ConversionResult[ADC_u8ChainCounter]= ADCH;
#elif ADC_RESOLUTION == TEN_BITS
	ADC_pu16ConversionResult[ADC_u8ChainCounter]= ADC;
     ee0:	20 91 0a 02 	lds	r18, 0x020A
     ee4:	30 91 0b 02 	lds	r19, 0x020B
     ee8:	80 91 10 02 	lds	r24, 0x0210
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	d9 01       	movw	r26, r18
     ef6:	a8 0f       	add	r26, r24
     ef8:	b9 1f       	adc	r27, r25
     efa:	e4 e2       	ldi	r30, 0x24	; 36
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	8d 93       	st	X+, r24
     f04:	9c 93       	st	X, r25
#endif
	/*Increase counter*/
	ADC_u8ChainCounter++;
     f06:	80 91 10 02 	lds	r24, 0x0210
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 10 02 	sts	0x0210, r24
	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f10:	a6 e2       	ldi	r26, 0x26	; 38
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e2       	ldi	r30, 0x26	; 38
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	8c 93       	st	X, r24
	/*ADC is now IDLE*/
	ADC_u8BusyFlag = IDLE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 6a 01 	sts	0x016A, r24
	if(ADC_u8ChainCounter!=ADC_u8ChainSize)
     f24:	90 91 10 02 	lds	r25, 0x0210
     f28:	80 91 11 02 	lds	r24, 0x0211
     f2c:	98 17       	cp	r25, r24
     f2e:	39 f0       	breq	.+14     	; 0xf3e <__vector_16+0xe8>
	{
       ADC_u8StartChainingConvAsynch(pADC_Chain_t);
     f30:	80 91 13 02 	lds	r24, 0x0213
     f34:	90 91 14 02 	lds	r25, 0x0214
     f38:	0e 94 b9 06 	call	0xd72	; 0xd72 <ADC_u8StartChainingConvAsynch>
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <__vector_16+0x102>
	}
	else
	{
		/*Invoke the application notification function */
		if(ADC_pvNotificationFunc !=NULL)
     f3e:	80 91 0c 02 	lds	r24, 0x020C
     f42:	90 91 0d 02 	lds	r25, 0x020D
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	39 f0       	breq	.+14     	; 0xf58 <__vector_16+0x102>
		{
			ADC_u8ChainCounter=0;
     f4a:	10 92 10 02 	sts	0x0210, r1
			ADC_pvNotificationFunc();
     f4e:	e0 91 0c 02 	lds	r30, 0x020C
     f52:	f0 91 0d 02 	lds	r31, 0x020D
     f56:	09 95       	icall
	}
	else
	{
		/*Conversion result pointer is NULL*/
	}
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	2e 97       	sbiw	r28, 0x0e	; 14
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	41 e0       	ldi	r20, 0x01	; 1
     f98:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e4       	ldi	r27, 0x40	; 64
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a e7       	ldi	r20, 0x7A	; 122
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	8f 83       	std	Y+7, r24	; 0x07
     fc6:	98 87       	std	Y+8, r25	; 0x08
     fc8:	a9 87       	std	Y+9, r26	; 0x09
     fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <voidSendEnablePulse+0x70>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3f c0       	rjmp	.+126    	; 0x106c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0f c0       	rjmp	.+30     	; 0x104e <voidSendEnablePulse+0xd0>
    1030:	89 e1       	ldi	r24, 0x19	; 25
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <voidSendEnablePulse+0xbe>
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <voidSendEnablePulse+0xb2>
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <voidSendEnablePulse+0xfa>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
}
    108a:	2e 96       	adiw	r28, 0x0e	; 14
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <voidSetLCDHalfDataPort>:

static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN,GET_BIT(Copy_u8Nipple,0));
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	98 2f       	mov	r25, r24
    10ac:	91 70       	andi	r25, 0x01	; 1
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	63 e0       	ldi	r22, 0x03	; 3
    10b2:	49 2f       	mov	r20, r25
    10b4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN,GET_BIT(Copy_u8Nipple,1));
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	86 95       	lsr	r24
    10bc:	98 2f       	mov	r25, r24
    10be:	91 70       	andi	r25, 0x01	; 1
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	64 e0       	ldi	r22, 0x04	; 4
    10c4:	49 2f       	mov	r20, r25
    10c6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	86 95       	lsr	r24
    10ce:	86 95       	lsr	r24
    10d0:	98 2f       	mov	r25, r24
    10d2:	91 70       	andi	r25, 0x01	; 1
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	65 e0       	ldi	r22, 0x05	; 5
    10d8:	49 2f       	mov	r20, r25
    10da:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	86 95       	lsr	r24
    10e2:	86 95       	lsr	r24
    10e4:	86 95       	lsr	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	91 70       	andi	r25, 0x01	; 1
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	66 e0       	ldi	r22, 0x06	; 6
    10ee:	49 2f       	mov	r20, r25
    10f0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
}
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Cmd>>4);	/*send the most 4 bits to the LCD*/
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	82 95       	swap	r24
    1116:	8f 70       	andi	r24, 0x0F	; 15
    1118:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    111c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1126:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif
}
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>

	voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE

	voidSetLCDHalfDataPort(Copy_u8Data>>4);	/*send the most 4 bits to the LCD*/
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	82 95       	swap	r24
    114c:	8f 70       	andi	r24, 0x0F	; 15
    114e:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1152:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    115c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif

}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	2e 97       	sbiw	r28, 0x0e	; 14
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e2       	ldi	r26, 0x20	; 32
    1182:	b2 e4       	ldi	r27, 0x42	; 66
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	9c 87       	std	Y+12, r25	; 0x0c
    1188:	ad 87       	std	Y+13, r26	; 0x0d
    118a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a e7       	ldi	r20, 0x7A	; 122
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8f 83       	std	Y+7, r24	; 0x07
    11a6:	98 87       	std	Y+8, r25	; 0x08
    11a8:	a9 87       	std	Y+9, r26	; 0x09
    11aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <CLCD_voidInit+0x66>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	0f c0       	rjmp	.+30     	; 0x122e <CLCD_voidInit+0xc6>
    1210:	89 e1       	ldi	r24, 0x19	; 25
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <CLCD_voidInit+0xb4>
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <CLCD_voidInit+0xa8>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <CLCD_voidInit+0xf0>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1266:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1270:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1274:	88 e0       	ldi	r24, 0x08	; 8
    1276:	0e 94 4e 08 	call	0x109c	; 0x109c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    127a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <voidSendEnablePulse>
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    127e:	8c e0       	ldi	r24, 0x0C	; 12
    1280:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    128a:	2e 96       	adiw	r28, 0x0e	; 14
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <CLCD_u8SendString+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <CLCD_u8SendString+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9c 83       	std	Y+4, r25	; 0x04
    12aa:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
    12ac:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	e1 f0       	breq	.+56     	; 0x12ee <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
    12b6:	19 82       	std	Y+1, r1	; 0x01
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	80 81       	ld	r24, Z
    12cc:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
			Local_u8Counter++;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	fc 01       	movw	r30, r24
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	39 f7       	brne	.-50     	; 0x12ba <CLCD_u8SendString+0x1e>
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	61 97       	sbiw	r28, 0x11	; 17
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	6e 87       	std	Y+14, r22	; 0x0e
    1318:	7f 87       	std	Y+15, r23	; 0x0f
    131a:	88 8b       	std	Y+16, r24	; 0x10
    131c:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
    131e:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if (Copy_s32Number == 0)
    1320:	8e 85       	ldd	r24, Y+14	; 0x0e
    1322:	9f 85       	ldd	r25, Y+15	; 0x0f
    1324:	a8 89       	ldd	r26, Y+16	; 0x10
    1326:	b9 89       	ldd	r27, Y+17	; 0x11
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	a1 05       	cpc	r26, r1
    132c:	b1 05       	cpc	r27, r1
    132e:	21 f4       	brne	.+8      	; 0x1338 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
    1330:	80 e3       	ldi	r24, 0x30	; 48
    1332:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
    1336:	69 c0       	rjmp	.+210    	; 0x140a <CLCD_voidSendNumber+0x108>
		return ;
	}
	else if(Copy_s32Number < 0)
    1338:	8e 85       	ldd	r24, Y+14	; 0x0e
    133a:	9f 85       	ldd	r25, Y+15	; 0x0f
    133c:	a8 89       	ldd	r26, Y+16	; 0x10
    133e:	b9 89       	ldd	r27, Y+17	; 0x11
    1340:	bb 23       	and	r27, r27
    1342:	0c f0       	brlt	.+2      	; 0x1346 <CLCD_voidSendNumber+0x44>
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
    1346:	8d e2       	ldi	r24, 0x2D	; 45
    1348:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Copy_s32Number *= -1;
    134c:	8e 85       	ldd	r24, Y+14	; 0x0e
    134e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1350:	a8 89       	ldd	r26, Y+16	; 0x10
    1352:	b9 89       	ldd	r27, Y+17	; 0x11
    1354:	b0 95       	com	r27
    1356:	a0 95       	com	r26
    1358:	90 95       	com	r25
    135a:	81 95       	neg	r24
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	af 4f       	sbci	r26, 0xFF	; 255
    1360:	bf 4f       	sbci	r27, 0xFF	; 255
    1362:	8e 87       	std	Y+14, r24	; 0x0e
    1364:	9f 87       	std	Y+15, r25	; 0x0f
    1366:	a8 8b       	std	Y+16, r26	; 0x10
    1368:	b9 8b       	std	Y+17, r27	; 0x11
    136a:	30 c0       	rjmp	.+96     	; 0x13cc <CLCD_voidSendNumber+0xca>
	}
	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
    136c:	8e 85       	ldd	r24, Y+14	; 0x0e
    136e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1370:	a8 89       	ldd	r26, Y+16	; 0x10
    1372:	b9 89       	ldd	r27, Y+17	; 0x11
    1374:	2a e0       	ldi	r18, 0x0A	; 10
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__divmodsi4>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
    138a:	8e 85       	ldd	r24, Y+14	; 0x0e
    138c:	9f 85       	ldd	r25, Y+15	; 0x0f
    138e:	a8 89       	ldd	r26, Y+16	; 0x10
    1390:	b9 89       	ldd	r27, Y+17	; 0x11
    1392:	2a e0       	ldi	r18, 0x0A	; 10
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	50 e0       	ldi	r21, 0x00	; 0
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__divmodsi4>
    13a2:	da 01       	movw	r26, r20
    13a4:	c9 01       	movw	r24, r18
    13a6:	8e 87       	std	Y+14, r24	; 0x0e
    13a8:	9f 87       	std	Y+15, r25	; 0x0f
    13aa:	a8 8b       	std	Y+16, r26	; 0x10
    13ac:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ASCII value*/
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	48 2f       	mov	r20, r24
    13b8:	40 5d       	subi	r20, 0xD0	; 208
    13ba:	ce 01       	movw	r24, r28
    13bc:	04 96       	adiw	r24, 0x04	; 4
    13be:	fc 01       	movw	r30, r24
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	40 83       	st	Z, r20
		Local_u8Counter++;
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	else if(Copy_s32Number < 0)
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}
	while(Copy_s32Number != 0)
    13cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d0:	a8 89       	ldd	r26, Y+16	; 0x10
    13d2:	b9 89       	ldd	r27, Y+17	; 0x11
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	41 f6       	brne	.-112    	; 0x136c <CLCD_voidSendNumber+0x6a>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ASCII value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	81 50       	subi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	33 27       	eor	r19, r19
    13ea:	27 fd       	sbrc	r18, 7
    13ec:	30 95       	com	r19
    13ee:	ce 01       	movw	r24, r28
    13f0:	04 96       	adiw	r24, 0x04	; 4
    13f2:	fc 01       	movw	r30, r24
    13f4:	e2 0f       	add	r30, r18
    13f6:	f3 1f       	adc	r31, r19
    13f8:	80 81       	ld	r24, Z
    13fa:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ASCII value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	88 23       	and	r24, r24
    1408:	6c f7       	brge	.-38     	; 0x13e4 <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
    140a:	61 96       	adiw	r28, 0x11	; 17
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <CLCD_viodGoToXY>:
void CLCD_viodGoToXY(uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <CLCD_viodGoToXY+0x6>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	88 23       	and	r24, r24
    1430:	19 f4       	brne	.+6      	; 0x1438 <CLCD_viodGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	06 c0       	rjmp	.+12     	; 0x1444 <CLCD_viodGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	19 f4       	brne	.+6      	; 0x1444 <CLCD_viodGoToXY+0x28>
	{
		Local_u8DDRamAdd= 0x40+ Copy_u8XPos;
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	80 5c       	subi	r24, 0xC0	; 192
    1442:	89 83       	std	Y+1, r24	; 0x01
	}
	Local_u8DDRamAdd |= 1<<7u;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <CLCD_voidSendSpecialCharacter>:
void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_PatternNumber,uint8 Copy_u8XPos,uint8 Copy_u8YPos)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	27 97       	sbiw	r28, 0x07	; 7
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	6d 83       	std	Y+5, r22	; 0x05
    1476:	4e 83       	std	Y+6, r20	; 0x06
    1478:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd= Copy_PatternNumber * 8u;
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 64       	ori	r24, 0x40	; 64
    1492:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    149a:	19 82       	std	Y+1, r1	; 0x01
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	fc 01       	movw	r30, r24
    14aa:	e2 0f       	add	r30, r18
    14ac:	f3 1f       	adc	r31, r19
    14ae:	80 81       	ld	r24, Z
    14b0:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	uint8 Local_u8LoopCounter;
	/*Set bit number 6 for set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6;
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	for(Local_u8LoopCounter=0;Local_u8LoopCounter<8u;Local_u8LoopCounter++)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	88 30       	cpi	r24, 0x08	; 8
    14be:	78 f3       	brcs	.-34     	; 0x149e <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display*/
	CLCD_viodGoToXY(Copy_u8XPos, Copy_u8YPos);
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	6f 81       	ldd	r22, Y+7	; 0x07
    14c4:	0e 94 0e 0a 	call	0x141c	; 0x141c <CLCD_viodGoToXY>

	CLCD_voidSendData(Copy_PatternNumber);
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    14ce:	27 96       	adiw	r28, 0x07	; 7
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <CLCD_voidSendBinary>:
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2b 97       	sbiw	r28, 0x0b	; 11
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    14f6:	1a 82       	std	Y+2, r1	; 0x02
    14f8:	88 e0       	ldi	r24, 0x08	; 8
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	20 c0       	rjmp	.+64     	; 0x153e <CLCD_voidSendBinary+0x5e>
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	81 50       	subi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	48 2f       	mov	r20, r24
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	8b 85       	ldd	r24, Y+11	; 0x0b
    150c:	28 2f       	mov	r18, r24
    150e:	33 27       	eor	r19, r19
    1510:	27 fd       	sbrc	r18, 7
    1512:	30 95       	com	r19
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	b9 01       	movw	r22, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <CLCD_voidSendBinary+0x42>
    151e:	75 95       	asr	r23
    1520:	67 95       	ror	r22
    1522:	8a 95       	dec	r24
    1524:	e2 f7       	brpl	.-8      	; 0x151e <CLCD_voidSendBinary+0x3e>
    1526:	cb 01       	movw	r24, r22
    1528:	28 2f       	mov	r18, r24
    152a:	21 70       	andi	r18, 0x01	; 1
    152c:	ce 01       	movw	r24, r28
    152e:	03 96       	adiw	r24, 0x03	; 3
    1530:	fc 01       	movw	r30, r24
    1532:	e4 0f       	add	r30, r20
    1534:	f5 1f       	adc	r31, r21
    1536:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	8a 83       	std	Y+2, r24	; 0x02
}
void CLCD_voidSendBinary(sint8 Copy_s8Number)
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	while(Local_u8LoopCounter2!=0)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 23       	and	r24, r24
    1542:	e9 f6       	brne	.-70     	; 0x14fe <CLCD_voidSendBinary+0x1e>
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
    1544:	80 e6       	ldi	r24, 0x60	; 96
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    154c:	1a 82       	std	Y+2, r1	; 0x02
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <CLCD_voidSendBinary+0x98>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	ce 01       	movw	r24, r28
    1558:	03 96       	adiw	r24, 0x03	; 3
    155a:	fc 01       	movw	r30, r24
    155c:	e2 0f       	add	r30, r18
    155e:	f3 1f       	adc	r31, r19
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	bc 01       	movw	r22, r24
    156c:	cd 01       	movw	r24, r26
    156e:	0e 94 81 09 	call	0x1302	; 0x1302 <CLCD_voidSendNumber>
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;

	}
	CLCD_u8SendString("0b");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	48 f3       	brcs	.-46     	; 0x1550 <CLCD_voidSendBinary+0x70>
	{
		CLCD_voidSendNumber(Local_u8BinarryArr[Local_u8LoopCounter1]);
	}
}
    157e:	2b 96       	adiw	r28, 0x0b	; 11
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <CLCD_voidSendHex>:
void CLCD_voidSendHex(sint8 Copy_s8Number)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	62 97       	sbiw	r28, 0x12	; 18
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	8e 87       	std	Y+14, r24	; 0x0e
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
    15a6:	1d 82       	std	Y+5, r1	; 0x05
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;
    15ac:	1b 82       	std	Y+3, r1	; 0x03
    15ae:	1a 82       	std	Y+2, r1	; 0x02
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	20 c0       	rjmp	.+64     	; 0x15f4 <CLCD_voidSendHex+0x64>

	while(Local_u8LoopCounter2!=0)
	{
		Local_u8LoopCounter2--;
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	81 50       	subi	r24, 0x01	; 1
    15b8:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	48 2f       	mov	r20, r24
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c2:	28 2f       	mov	r18, r24
    15c4:	33 27       	eor	r19, r19
    15c6:	27 fd       	sbrc	r18, 7
    15c8:	30 95       	com	r19
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <CLCD_voidSendHex+0x48>
    15d4:	75 95       	asr	r23
    15d6:	67 95       	ror	r22
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <CLCD_voidSendHex+0x44>
    15dc:	cb 01       	movw	r24, r22
    15de:	28 2f       	mov	r18, r24
    15e0:	21 70       	andi	r18, 0x01	; 1
    15e2:	ce 01       	movw	r24, r28
    15e4:	06 96       	adiw	r24, 0x06	; 6
    15e6:	fc 01       	movw	r30, r24
    15e8:	e4 0f       	add	r30, r20
    15ea:	f5 1f       	adc	r31, r21
    15ec:	20 83       	st	Z, r18
		Local_u8LoopCounter1++;
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	8d 83       	std	Y+5, r24	; 0x05
{
	uint8 Local_u8LoopCounter1=0,Local_u8LoopCounter2=8;
	uint8 Local_u8BinarryArr[8];
	uint8 Local_u8FirstDigit=0,Local_u8SecondDigit=0,Local_u8Temp=0;

	while(Local_u8LoopCounter2!=0)
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 23       	and	r24, r24
    15f8:	e9 f6       	brne	.-70     	; 0x15b4 <CLCD_voidSendHex+0x24>
	{
		Local_u8LoopCounter2--;
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	8c 83       	std	Y+4, r24	; 0x04
	CLCD_u8SendString("0x");
    15fe:	83 e6       	ldi	r24, 0x63	; 99
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_u8SendString>
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	1f c0       	rjmp	.+62     	; 0x1648 <CLCD_voidSendHex+0xb8>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	06 96       	adiw	r24, 0x06	; 6
    1614:	fc 01       	movw	r30, r24
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <CLCD_voidSendHex+0x9e>
    162a:	44 0f       	add	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <CLCD_voidSendHex+0x9a>
    1632:	ca 01       	movw	r24, r20
    1634:	98 2f       	mov	r25, r24
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	89 2b       	or	r24, r25
    163a:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8BinarryArr[Local_u8LoopCounter1]=GET_BIT(Copy_s8Number,Local_u8LoopCounter2);
		Local_u8LoopCounter1++;
	}
	Local_u8LoopCounter2=3;
	CLCD_u8SendString("0x");
	for(Local_u8LoopCounter1=0;Local_u8LoopCounter1<=3;Local_u8LoopCounter1++)
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	f0 f2       	brcs	.-68     	; 0x160a <CLCD_voidSendHex+0x7a>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	68 2f       	mov	r22, r24
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	7a 8b       	std	Y+18, r23	; 0x12
    1656:	69 8b       	std	Y+17, r22	; 0x11
    1658:	89 89       	ldd	r24, Y+17	; 0x11
    165a:	9a 89       	ldd	r25, Y+18	; 0x12
    165c:	8c 30       	cpi	r24, 0x0C	; 12
    165e:	91 05       	cpc	r25, r1
    1660:	31 f1       	breq	.+76     	; 0x16ae <CLCD_voidSendHex+0x11e>
    1662:	29 89       	ldd	r18, Y+17	; 0x11
    1664:	3a 89       	ldd	r19, Y+18	; 0x12
    1666:	2d 30       	cpi	r18, 0x0D	; 13
    1668:	31 05       	cpc	r19, r1
    166a:	5c f4       	brge	.+22     	; 0x1682 <CLCD_voidSendHex+0xf2>
    166c:	49 89       	ldd	r20, Y+17	; 0x11
    166e:	5a 89       	ldd	r21, Y+18	; 0x12
    1670:	4a 30       	cpi	r20, 0x0A	; 10
    1672:	51 05       	cpc	r21, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <CLCD_voidSendHex+0x112>
    1676:	69 89       	ldd	r22, Y+17	; 0x11
    1678:	7a 89       	ldd	r23, Y+18	; 0x12
    167a:	6b 30       	cpi	r22, 0x0B	; 11
    167c:	71 05       	cpc	r23, r1
    167e:	a1 f0       	breq	.+40     	; 0x16a8 <CLCD_voidSendHex+0x118>
    1680:	22 c0       	rjmp	.+68     	; 0x16c6 <CLCD_voidSendHex+0x136>
    1682:	89 89       	ldd	r24, Y+17	; 0x11
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	8e 30       	cpi	r24, 0x0E	; 14
    1688:	91 05       	cpc	r25, r1
    168a:	b9 f0       	breq	.+46     	; 0x16ba <CLCD_voidSendHex+0x12a>
    168c:	29 89       	ldd	r18, Y+17	; 0x11
    168e:	3a 89       	ldd	r19, Y+18	; 0x12
    1690:	2e 30       	cpi	r18, 0x0E	; 14
    1692:	31 05       	cpc	r19, r1
    1694:	7c f0       	brlt	.+30     	; 0x16b4 <CLCD_voidSendHex+0x124>
    1696:	49 89       	ldd	r20, Y+17	; 0x11
    1698:	5a 89       	ldd	r21, Y+18	; 0x12
    169a:	4f 30       	cpi	r20, 0x0F	; 15
    169c:	51 05       	cpc	r21, r1
    169e:	81 f0       	breq	.+32     	; 0x16c0 <CLCD_voidSendHex+0x130>
    16a0:	12 c0       	rjmp	.+36     	; 0x16c6 <CLCD_voidSendHex+0x136>
	{
	   case 10:Local_u8FirstDigit='A'; break;
    16a2:	81 e4       	ldi	r24, 0x41	; 65
    16a4:	8b 83       	std	Y+3, r24	; 0x03
    16a6:	12 c0       	rjmp	.+36     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 11:Local_u8FirstDigit='B'; break;
    16a8:	82 e4       	ldi	r24, 0x42	; 66
    16aa:	8b 83       	std	Y+3, r24	; 0x03
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 12:Local_u8FirstDigit='C'; break;
    16ae:	83 e4       	ldi	r24, 0x43	; 67
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	0c c0       	rjmp	.+24     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 13:Local_u8FirstDigit='D'; break;
    16b4:	84 e4       	ldi	r24, 0x44	; 68
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 14:Local_u8FirstDigit='E'; break;
    16ba:	85 e4       	ldi	r24, 0x45	; 69
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <CLCD_voidSendHex+0x13c>
	   case 15:Local_u8FirstDigit='F'; break;
    16c0:	86 e4       	ldi	r24, 0x46	; 70
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <CLCD_voidSendHex+0x13c>
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	80 5d       	subi	r24, 0xD0	; 208
    16ca:	8b 83       	std	Y+3, r24	; 0x03
	}
	Local_u8LoopCounter2=3;
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	8c 83       	std	Y+4, r24	; 0x04
	Local_u8Temp=0;
    16d0:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    16d2:	84 e0       	ldi	r24, 0x04	; 4
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	1f c0       	rjmp	.+62     	; 0x1716 <CLCD_voidSendHex+0x186>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	ce 01       	movw	r24, r28
    16e0:	06 96       	adiw	r24, 0x06	; 6
    16e2:	fc 01       	movw	r30, r24
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b9 01       	movw	r22, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <CLCD_voidSendHex+0x16c>
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	8a 95       	dec	r24
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <CLCD_voidSendHex+0x168>
    1700:	cb 01       	movw	r24, r22
    1702:	98 2f       	mov	r25, r24
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	89 2b       	or	r24, r25
    1708:	89 83       	std	Y+1, r24	; 0x01
		Local_u8LoopCounter2--;
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	8c 83       	std	Y+4, r24	; 0x04
	   case 15:Local_u8FirstDigit='F'; break;
	   default:Local_u8FirstDigit=Local_u8Temp+'0';break;
	}
	Local_u8LoopCounter2=3;
	Local_u8Temp=0;
	for(Local_u8LoopCounter1=4;Local_u8LoopCounter1<=7;Local_u8LoopCounter1++)
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	8f 5f       	subi	r24, 0xFF	; 255
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	f0 f2       	brcs	.-68     	; 0x16d8 <CLCD_voidSendHex+0x148>
	{
		Local_u8Temp|=(Local_u8BinarryArr[Local_u8LoopCounter1]<<Local_u8LoopCounter2);
		Local_u8LoopCounter2--;
	}
	switch(Local_u8Temp)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	38 8b       	std	Y+16, r19	; 0x10
    1724:	2f 87       	std	Y+15, r18	; 0x0f
    1726:	4f 85       	ldd	r20, Y+15	; 0x0f
    1728:	58 89       	ldd	r21, Y+16	; 0x10
    172a:	4c 30       	cpi	r20, 0x0C	; 12
    172c:	51 05       	cpc	r21, r1
    172e:	31 f1       	breq	.+76     	; 0x177c <CLCD_voidSendHex+0x1ec>
    1730:	6f 85       	ldd	r22, Y+15	; 0x0f
    1732:	78 89       	ldd	r23, Y+16	; 0x10
    1734:	6d 30       	cpi	r22, 0x0D	; 13
    1736:	71 05       	cpc	r23, r1
    1738:	5c f4       	brge	.+22     	; 0x1750 <CLCD_voidSendHex+0x1c0>
    173a:	8f 85       	ldd	r24, Y+15	; 0x0f
    173c:	98 89       	ldd	r25, Y+16	; 0x10
    173e:	8a 30       	cpi	r24, 0x0A	; 10
    1740:	91 05       	cpc	r25, r1
    1742:	b1 f0       	breq	.+44     	; 0x1770 <CLCD_voidSendHex+0x1e0>
    1744:	2f 85       	ldd	r18, Y+15	; 0x0f
    1746:	38 89       	ldd	r19, Y+16	; 0x10
    1748:	2b 30       	cpi	r18, 0x0B	; 11
    174a:	31 05       	cpc	r19, r1
    174c:	a1 f0       	breq	.+40     	; 0x1776 <CLCD_voidSendHex+0x1e6>
    174e:	22 c0       	rjmp	.+68     	; 0x1794 <CLCD_voidSendHex+0x204>
    1750:	4f 85       	ldd	r20, Y+15	; 0x0f
    1752:	58 89       	ldd	r21, Y+16	; 0x10
    1754:	4e 30       	cpi	r20, 0x0E	; 14
    1756:	51 05       	cpc	r21, r1
    1758:	b9 f0       	breq	.+46     	; 0x1788 <CLCD_voidSendHex+0x1f8>
    175a:	6f 85       	ldd	r22, Y+15	; 0x0f
    175c:	78 89       	ldd	r23, Y+16	; 0x10
    175e:	6e 30       	cpi	r22, 0x0E	; 14
    1760:	71 05       	cpc	r23, r1
    1762:	7c f0       	brlt	.+30     	; 0x1782 <CLCD_voidSendHex+0x1f2>
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	8f 30       	cpi	r24, 0x0F	; 15
    176a:	91 05       	cpc	r25, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <CLCD_voidSendHex+0x1fe>
    176e:	12 c0       	rjmp	.+36     	; 0x1794 <CLCD_voidSendHex+0x204>
	{
	   case 10:Local_u8SecondDigit='A'; break;
    1770:	81 e4       	ldi	r24, 0x41	; 65
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	12 c0       	rjmp	.+36     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 11:Local_u8SecondDigit='B'; break;
    1776:	82 e4       	ldi	r24, 0x42	; 66
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	0f c0       	rjmp	.+30     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 12:Local_u8SecondDigit='C'; break;
    177c:	83 e4       	ldi	r24, 0x43	; 67
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	0c c0       	rjmp	.+24     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 13:Local_u8SecondDigit='D'; break;
    1782:	84 e4       	ldi	r24, 0x44	; 68
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	09 c0       	rjmp	.+18     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 14:Local_u8SecondDigit='E'; break;
    1788:	85 e4       	ldi	r24, 0x45	; 69
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	06 c0       	rjmp	.+12     	; 0x179a <CLCD_voidSendHex+0x20a>
	   case 15:Local_u8SecondDigit='F'; break;
    178e:	86 e4       	ldi	r24, 0x46	; 70
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	03 c0       	rjmp	.+6      	; 0x179a <CLCD_voidSendHex+0x20a>
	   default:Local_u8SecondDigit=Local_u8Temp+'0';break;
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	80 5d       	subi	r24, 0xD0	; 208
    1798:	8a 83       	std	Y+2, r24	; 0x02
	}
	CLCD_voidSendData(Local_u8FirstDigit);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	CLCD_voidSendData(Local_u8SecondDigit);
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    17a6:	62 96       	adiw	r28, 0x12	; 18
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <DIO_u8SetPinDirection>:
#include "DIO_reg.h"



uint8 DIO_u8SetPinDirection(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Direction)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	28 97       	sbiw	r28, 0x08	; 8
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	6b 83       	std	Y+3, r22	; 0x03
    17d0:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    17d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	88 30       	cpi	r24, 0x08	; 8
    17d8:	08 f0       	brcs	.+2      	; 0x17dc <DIO_u8SetPinDirection+0x24>
    17da:	f4 c0       	rjmp	.+488    	; 0x19c4 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	88 23       	and	r24, r24
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <DIO_u8SetPinDirection+0x2c>
    17e2:	77 c0       	rjmp	.+238    	; 0x18d2 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	38 87       	std	Y+8, r19	; 0x08
    17ec:	2f 83       	std	Y+7, r18	; 0x07
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
    17f0:	98 85       	ldd	r25, Y+8	; 0x08
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	59 f1       	breq	.+86     	; 0x184e <DIO_u8SetPinDirection+0x96>
    17f8:	2f 81       	ldd	r18, Y+7	; 0x07
    17fa:	38 85       	ldd	r19, Y+8	; 0x08
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	2c f4       	brge	.+10     	; 0x180c <DIO_u8SetPinDirection+0x54>
    1802:	8f 81       	ldd	r24, Y+7	; 0x07
    1804:	98 85       	ldd	r25, Y+8	; 0x08
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f0       	breq	.+26     	; 0x1824 <DIO_u8SetPinDirection+0x6c>
    180a:	60 c0       	rjmp	.+192    	; 0x18cc <DIO_u8SetPinDirection+0x114>
    180c:	2f 81       	ldd	r18, Y+7	; 0x07
    180e:	38 85       	ldd	r19, Y+8	; 0x08
    1810:	22 30       	cpi	r18, 0x02	; 2
    1812:	31 05       	cpc	r19, r1
    1814:	89 f1       	breq	.+98     	; 0x1878 <DIO_u8SetPinDirection+0xc0>
    1816:	8f 81       	ldd	r24, Y+7	; 0x07
    1818:	98 85       	ldd	r25, Y+8	; 0x08
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <DIO_u8SetPinDirection+0x6a>
    1820:	40 c0       	rjmp	.+128    	; 0x18a2 <DIO_u8SetPinDirection+0xea>
    1822:	54 c0       	rjmp	.+168    	; 0x18cc <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1824:	aa e3       	ldi	r26, 0x3A	; 58
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ea e3       	ldi	r30, 0x3A	; 58
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_u8SetPinDirection+0x8a>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_u8SetPinDirection+0x86>
    1846:	80 95       	com	r24
    1848:	84 23       	and	r24, r20
    184a:	8c 93       	st	X, r24
    184c:	bd c0       	rjmp	.+378    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    184e:	a7 e3       	ldi	r26, 0x37	; 55
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e7 e3       	ldi	r30, 0x37	; 55
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 2e       	mov	r0, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_u8SetPinDirection+0xb4>
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <DIO_u8SetPinDirection+0xb0>
    1870:	80 95       	com	r24
    1872:	84 23       	and	r24, r20
    1874:	8c 93       	st	X, r24
    1876:	a8 c0       	rjmp	.+336    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1878:	a4 e3       	ldi	r26, 0x34	; 52
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e4 e3       	ldi	r30, 0x34	; 52
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	48 2f       	mov	r20, r24
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	02 2e       	mov	r0, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_u8SetPinDirection+0xde>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	0a 94       	dec	r0
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_u8SetPinDirection+0xda>
    189a:	80 95       	com	r24
    189c:	84 23       	and	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	93 c0       	rjmp	.+294    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    18a2:	a1 e3       	ldi	r26, 0x31	; 49
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e1 e3       	ldi	r30, 0x31	; 49
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_u8SetPinDirection+0x108>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_u8SetPinDirection+0x104>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	7e c0       	rjmp	.+252    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	7b c0       	rjmp	.+246    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	09 f0       	breq	.+2      	; 0x18da <DIO_u8SetPinDirection+0x122>
    18d8:	72 c0       	rjmp	.+228    	; 0x19be <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3e 83       	std	Y+6, r19	; 0x06
    18e2:	2d 83       	std	Y+5, r18	; 0x05
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	91 05       	cpc	r25, r1
    18ec:	49 f1       	breq	.+82     	; 0x1940 <DIO_u8SetPinDirection+0x188>
    18ee:	2d 81       	ldd	r18, Y+5	; 0x05
    18f0:	3e 81       	ldd	r19, Y+6	; 0x06
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	2c f4       	brge	.+10     	; 0x1902 <DIO_u8SetPinDirection+0x14a>
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	61 f0       	breq	.+24     	; 0x1918 <DIO_u8SetPinDirection+0x160>
    1900:	5b c0       	rjmp	.+182    	; 0x19b8 <DIO_u8SetPinDirection+0x200>
    1902:	2d 81       	ldd	r18, Y+5	; 0x05
    1904:	3e 81       	ldd	r19, Y+6	; 0x06
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	71 f1       	breq	.+92     	; 0x1968 <DIO_u8SetPinDirection+0x1b0>
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	e9 f1       	breq	.+122    	; 0x1990 <DIO_u8SetPinDirection+0x1d8>
    1916:	50 c0       	rjmp	.+160    	; 0x19b8 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1918:	aa e3       	ldi	r26, 0x3A	; 58
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	ea e3       	ldi	r30, 0x3A	; 58
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_u8SetPinDirection+0x17e>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_u8SetPinDirection+0x17a>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1940:	a7 e3       	ldi	r26, 0x37	; 55
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e7 e3       	ldi	r30, 0x37	; 55
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_u8SetPinDirection+0x1a6>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_u8SetPinDirection+0x1a2>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
    1966:	30 c0       	rjmp	.+96     	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1968:	a4 e3       	ldi	r26, 0x34	; 52
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e4 e3       	ldi	r30, 0x34	; 52
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_u8SetPinDirection+0x1ce>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_u8SetPinDirection+0x1ca>
    198a:	84 2b       	or	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	1c c0       	rjmp	.+56     	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1990:	a1 e3       	ldi	r26, 0x31	; 49
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e1 e3       	ldi	r30, 0x31	; 49
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8SetPinDirection+0x1f6>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8SetPinDirection+0x1f2>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState= NOK; break;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <DIO_u8SetPinDirection+0x210>
			}
	   }
		else
		{
			Local_u8ErrorState = NOK;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	28 96       	adiw	r28, 0x08	; 8
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <DIO_u8SetPinValue>:
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8 Copy_u8Value)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	28 97       	sbiw	r28, 0x08	; 8
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	6b 83       	std	Y+3, r22	; 0x03
    19f4:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    19f6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=7)
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	88 30       	cpi	r24, 0x08	; 8
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <DIO_u8SetPinValue+0x24>
    19fe:	f4 c0       	rjmp	.+488    	; 0x1be8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	88 23       	and	r24, r24
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <DIO_u8SetPinValue+0x2c>
    1a06:	77 c0       	rjmp	.+238    	; 0x1af6 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	38 87       	std	Y+8, r19	; 0x08
    1a10:	2f 83       	std	Y+7, r18	; 0x07
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	59 f1       	breq	.+86     	; 0x1a72 <DIO_u8SetPinValue+0x96>
    1a1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a1e:	38 85       	ldd	r19, Y+8	; 0x08
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	2c f4       	brge	.+10     	; 0x1a30 <DIO_u8SetPinValue+0x54>
    1a26:	8f 81       	ldd	r24, Y+7	; 0x07
    1a28:	98 85       	ldd	r25, Y+8	; 0x08
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f0       	breq	.+26     	; 0x1a48 <DIO_u8SetPinValue+0x6c>
    1a2e:	60 c0       	rjmp	.+192    	; 0x1af0 <DIO_u8SetPinValue+0x114>
    1a30:	2f 81       	ldd	r18, Y+7	; 0x07
    1a32:	38 85       	ldd	r19, Y+8	; 0x08
    1a34:	22 30       	cpi	r18, 0x02	; 2
    1a36:	31 05       	cpc	r19, r1
    1a38:	89 f1       	breq	.+98     	; 0x1a9c <DIO_u8SetPinValue+0xc0>
    1a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a3c:	98 85       	ldd	r25, Y+8	; 0x08
    1a3e:	83 30       	cpi	r24, 0x03	; 3
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <DIO_u8SetPinValue+0x6a>
    1a44:	40 c0       	rjmp	.+128    	; 0x1ac6 <DIO_u8SetPinValue+0xea>
    1a46:	54 c0       	rjmp	.+168    	; 0x1af0 <DIO_u8SetPinValue+0x114>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_u8SetPinValue+0x8a>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_u8SetPinValue+0x86>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	bd c0       	rjmp	.+378    	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1a72:	a8 e3       	ldi	r26, 0x38	; 56
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e8 e3       	ldi	r30, 0x38	; 56
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_u8SetPinValue+0xb4>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_u8SetPinValue+0xb0>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	a8 c0       	rjmp	.+336    	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1a9c:	a5 e3       	ldi	r26, 0x35	; 53
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e5 e3       	ldi	r30, 0x35	; 53
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_u8SetPinValue+0xde>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_u8SetPinValue+0xda>
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	93 c0       	rjmp	.+294    	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1ac6:	a2 e3       	ldi	r26, 0x32	; 50
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e2 e3       	ldi	r30, 0x32	; 50
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_u8SetPinValue+0x108>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_u8SetPinValue+0x104>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	7e c0       	rjmp	.+252    	; 0x1bec <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState= NOK; break;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	7b c0       	rjmp	.+246    	; 0x1bec <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <DIO_u8SetPinValue+0x122>
    1afc:	72 c0       	rjmp	.+228    	; 0x1be2 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	3e 83       	std	Y+6, r19	; 0x06
    1b06:	2d 83       	std	Y+5, r18	; 0x05
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	91 05       	cpc	r25, r1
    1b10:	49 f1       	breq	.+82     	; 0x1b64 <DIO_u8SetPinValue+0x188>
    1b12:	2d 81       	ldd	r18, Y+5	; 0x05
    1b14:	3e 81       	ldd	r19, Y+6	; 0x06
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <DIO_u8SetPinValue+0x14a>
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <DIO_u8SetPinValue+0x160>
    1b24:	5b c0       	rjmp	.+182    	; 0x1bdc <DIO_u8SetPinValue+0x200>
    1b26:	2d 81       	ldd	r18, Y+5	; 0x05
    1b28:	3e 81       	ldd	r19, Y+6	; 0x06
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	71 f1       	breq	.+92     	; 0x1b8c <DIO_u8SetPinValue+0x1b0>
    1b30:	8d 81       	ldd	r24, Y+5	; 0x05
    1b32:	9e 81       	ldd	r25, Y+6	; 0x06
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	91 05       	cpc	r25, r1
    1b38:	e9 f1       	breq	.+122    	; 0x1bb4 <DIO_u8SetPinValue+0x1d8>
    1b3a:	50 c0       	rjmp	.+160    	; 0x1bdc <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1b3c:	ab e3       	ldi	r26, 0x3B	; 59
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 2e       	mov	r0, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <DIO_u8SetPinValue+0x17e>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <DIO_u8SetPinValue+0x17a>
    1b5e:	84 2b       	or	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	44 c0       	rjmp	.+136    	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1b64:	a8 e3       	ldi	r26, 0x38	; 56
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e8 e3       	ldi	r30, 0x38	; 56
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_u8SetPinValue+0x1a6>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_u8SetPinValue+0x1a2>
    1b86:	84 2b       	or	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	30 c0       	rjmp	.+96     	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1b8c:	a5 e3       	ldi	r26, 0x35	; 53
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e3       	ldi	r30, 0x35	; 53
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_u8SetPinValue+0x1ce>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_u8SetPinValue+0x1ca>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	1c c0       	rjmp	.+56     	; 0x1bec <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1bb4:	a2 e3       	ldi	r26, 0x32	; 50
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e2 e3       	ldi	r30, 0x32	; 50
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8SetPinValue+0x1f6>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8SetPinValue+0x1f2>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	08 c0       	rjmp	.+16     	; 0x1bec <DIO_u8SetPinValue+0x210>
				default: Local_u8ErrorState= NOK; break;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bee:	28 96       	adiw	r28, 0x08	; 8
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <DIO_u8GetPinValue>:
uint8 DIO_u8GetPinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin,uint8* Copy_pu8Value)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	27 97       	sbiw	r28, 0x07	; 7
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	6b 83       	std	Y+3, r22	; 0x03
    1c18:	5d 83       	std	Y+5, r21	; 0x05
    1c1a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState=OK;
    1c1c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value==NULL)
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	19 f4       	brne	.+6      	; 0x1c2c <DIO_u8GetPinValue+0x2c>
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	7a c0       	rjmp	.+244    	; 0x1d20 <DIO_u8GetPinValue+0x120>
	}
	else
	{
		if(Copy_u8Pin<=7)
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	88 30       	cpi	r24, 0x08	; 8
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <DIO_u8GetPinValue+0x34>
    1c32:	74 c0       	rjmp	.+232    	; 0x1d1c <DIO_u8GetPinValue+0x11c>
		{
	    	switch(Copy_u8Port)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3f 83       	std	Y+7, r19	; 0x07
    1c3c:	2e 83       	std	Y+6, r18	; 0x06
    1c3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c40:	5f 81       	ldd	r21, Y+7	; 0x07
    1c42:	41 30       	cpi	r20, 0x01	; 1
    1c44:	51 05       	cpc	r21, r1
    1c46:	59 f1       	breq	.+86     	; 0x1c9e <DIO_u8GetPinValue+0x9e>
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	91 05       	cpc	r25, r1
    1c50:	34 f4       	brge	.+12     	; 0x1c5e <DIO_u8GetPinValue+0x5e>
    1c52:	2e 81       	ldd	r18, Y+6	; 0x06
    1c54:	3f 81       	ldd	r19, Y+7	; 0x07
    1c56:	21 15       	cp	r18, r1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	69 f0       	breq	.+26     	; 0x1c76 <DIO_u8GetPinValue+0x76>
    1c5c:	5c c0       	rjmp	.+184    	; 0x1d16 <DIO_u8GetPinValue+0x116>
    1c5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c60:	5f 81       	ldd	r21, Y+7	; 0x07
    1c62:	42 30       	cpi	r20, 0x02	; 2
    1c64:	51 05       	cpc	r21, r1
    1c66:	79 f1       	breq	.+94     	; 0x1cc6 <DIO_u8GetPinValue+0xc6>
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <DIO_u8GetPinValue+0x74>
    1c72:	3d c0       	rjmp	.+122    	; 0x1cee <DIO_u8GetPinValue+0xee>
    1c74:	50 c0       	rjmp	.+160    	; 0x1d16 <DIO_u8GetPinValue+0x116>
			{
			   	case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1c76:	e9 e3       	ldi	r30, 0x39	; 57
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_u8GetPinValue+0x8e>
    1c8a:	55 95       	asr	r21
    1c8c:	47 95       	ror	r20
    1c8e:	8a 95       	dec	r24
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_u8GetPinValue+0x8a>
    1c92:	ca 01       	movw	r24, r20
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	ec 81       	ldd	r30, Y+4	; 0x04
    1c98:	fd 81       	ldd	r31, Y+5	; 0x05
    1c9a:	80 83       	st	Z, r24
    1c9c:	41 c0       	rjmp	.+130    	; 0x1d20 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    1c9e:	e6 e3       	ldi	r30, 0x36	; 54
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_u8GetPinValue+0xb6>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_u8GetPinValue+0xb2>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc2:	80 83       	st	Z, r24
    1cc4:	2d c0       	rjmp	.+90     	; 0x1d20 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    1cc6:	e3 e3       	ldi	r30, 0x33	; 51
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_u8GetPinValue+0xde>
    1cda:	55 95       	asr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_u8GetPinValue+0xda>
    1ce2:	ca 01       	movw	r24, r20
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cea:	80 83       	st	Z, r24
    1cec:	19 c0       	rjmp	.+50     	; 0x1d20 <DIO_u8GetPinValue+0x120>
				case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    1cee:	e0 e3       	ldi	r30, 0x30	; 48
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a9 01       	movw	r20, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <DIO_u8GetPinValue+0x106>
    1d02:	55 95       	asr	r21
    1d04:	47 95       	ror	r20
    1d06:	8a 95       	dec	r24
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <DIO_u8GetPinValue+0x102>
    1d0a:	ca 01       	movw	r24, r20
    1d0c:	81 70       	andi	r24, 0x01	; 1
    1d0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d10:	fd 81       	ldd	r31, Y+5	; 0x05
    1d12:	80 83       	st	Z, r24
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <DIO_u8GetPinValue+0x120>
				default: Local_u8ErrorState= NOK; break;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <DIO_u8GetPinValue+0x120>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		return Local_u8ErrorState;
    1d20:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d22:	27 96       	adiw	r28, 0x07	; 7
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <DIO_u8SetPortDirection>:
uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port,uint8 Copy_u8Direction)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <DIO_u8SetPortDirection+0x6>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <DIO_u8SetPortDirection+0x8>
    1d3c:	0f 92       	push	r0
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	8a 83       	std	Y+2, r24	; 0x02
    1d44:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1d46:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	b0 f5       	brcc	.+108    	; 0x1dba <DIO_u8SetPortDirection+0x86>
	{
		switch(Copy_u8Port)
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3d 83       	std	Y+5, r19	; 0x05
    1d56:	2c 83       	std	Y+4, r18	; 0x04
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	d1 f0       	breq	.+52     	; 0x1d96 <DIO_u8SetPortDirection+0x62>
    1d62:	2c 81       	ldd	r18, Y+4	; 0x04
    1d64:	3d 81       	ldd	r19, Y+5	; 0x05
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <DIO_u8SetPortDirection+0x42>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <DIO_u8SetPortDirection+0x58>
    1d74:	1f c0       	rjmp	.+62     	; 0x1db4 <DIO_u8SetPortDirection+0x80>
    1d76:	2c 81       	ldd	r18, Y+4	; 0x04
    1d78:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	81 f0       	breq	.+32     	; 0x1da0 <DIO_u8SetPortDirection+0x6c>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	91 05       	cpc	r25, r1
    1d88:	81 f0       	breq	.+32     	; 0x1daa <DIO_u8SetPortDirection+0x76>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <DIO_u8SetPortDirection+0x80>
		{
		case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
    1d8c:	ea e3       	ldi	r30, 0x3A	; 58
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	80 83       	st	Z, r24
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
    1d96:	e7 e3       	ldi	r30, 0x37	; 55
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	80 83       	st	Z, r24
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
    1da0:	e4 e3       	ldi	r30, 0x34	; 52
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	80 83       	st	Z, r24
    1da8:	0a c0       	rjmp	.+20     	; 0x1dbe <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
    1daa:	e1 e3       	ldi	r30, 0x31	; 49
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	80 83       	st	Z, r24
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <DIO_u8SetPortDirection+0x8a>
		default : Local_u8ErrorState=NOK; break;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <DIO_u8SetPortDirection+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <DIO_u8SetPortValue>:
uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Value)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <DIO_u8SetPortValue+0x6>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <DIO_u8SetPortValue+0x8>
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1de2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Port<=DIO_u8PORTD)
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	84 30       	cpi	r24, 0x04	; 4
    1de8:	b0 f5       	brcc	.+108    	; 0x1e56 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8Port)
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	d1 f0       	breq	.+52     	; 0x1e32 <DIO_u8SetPortValue+0x62>
    1dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1e00:	3d 81       	ldd	r19, Y+5	; 0x05
    1e02:	22 30       	cpi	r18, 0x02	; 2
    1e04:	31 05       	cpc	r19, r1
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <DIO_u8SetPortValue+0x42>
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	61 f0       	breq	.+24     	; 0x1e28 <DIO_u8SetPortValue+0x58>
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <DIO_u8SetPortValue+0x80>
    1e12:	2c 81       	ldd	r18, Y+4	; 0x04
    1e14:	3d 81       	ldd	r19, Y+5	; 0x05
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	81 f0       	breq	.+32     	; 0x1e3c <DIO_u8SetPortValue+0x6c>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	91 05       	cpc	r25, r1
    1e24:	81 f0       	breq	.+32     	; 0x1e46 <DIO_u8SetPortValue+0x76>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <DIO_u8SetPortValue+0x80>
		{
	    	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    1e28:	eb e3       	ldi	r30, 0x3B	; 59
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	80 83       	st	Z, r24
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	80 83       	st	Z, r24
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    1e3c:	e5 e3       	ldi	r30, 0x35	; 53
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	80 83       	st	Z, r24
    1e44:	0a c0       	rjmp	.+20     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	80 83       	st	Z, r24
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		    default : Local_u8ErrorState=NOK; break;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <DIO_u8TogglePinValue>:
uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8Pin)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_u8TogglePinValue+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <DIO_u8TogglePinValue+0x8>
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState=OK;
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	88 30       	cpi	r24, 0x08	; 8
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <DIO_u8TogglePinValue+0x1c>
    1e86:	72 c0       	rjmp	.+228    	; 0x1f6c <DIO_u8TogglePinValue+0x100>
	{
		switch(Copy_u8Port)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	91 05       	cpc	r25, r1
    1e9a:	49 f1       	breq	.+82     	; 0x1eee <DIO_u8TogglePinValue+0x82>
    1e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <DIO_u8TogglePinValue+0x44>
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <DIO_u8TogglePinValue+0x5a>
    1eae:	5b c0       	rjmp	.+182    	; 0x1f66 <DIO_u8TogglePinValue+0xfa>
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	71 f1       	breq	.+92     	; 0x1f16 <DIO_u8TogglePinValue+0xaa>
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	e9 f1       	breq	.+122    	; 0x1f3e <DIO_u8TogglePinValue+0xd2>
    1ec4:	50 c0       	rjmp	.+160    	; 0x1f66 <DIO_u8TogglePinValue+0xfa>
		{
		case DIO_u8PORTA :TOG_BIT(PORTA,Copy_u8Pin); break;
    1ec6:	ab e3       	ldi	r26, 0x3B	; 59
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	eb e3       	ldi	r30, 0x3B	; 59
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 2e       	mov	r0, r18
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_u8TogglePinValue+0x78>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	0a 94       	dec	r0
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_u8TogglePinValue+0x74>
    1ee8:	84 27       	eor	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	41 c0       	rjmp	.+130    	; 0x1f70 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTB :TOG_BIT(PORTB,Copy_u8Pin); break;
    1eee:	a8 e3       	ldi	r26, 0x38	; 56
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e8 e3       	ldi	r30, 0x38	; 56
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_u8TogglePinValue+0xa0>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <DIO_u8TogglePinValue+0x9c>
    1f10:	84 27       	eor	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	2d c0       	rjmp	.+90     	; 0x1f70 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTC :TOG_BIT(PORTC,Copy_u8Pin); break;
    1f16:	a5 e3       	ldi	r26, 0x35	; 53
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e5 e3       	ldi	r30, 0x35	; 53
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_u8TogglePinValue+0xc8>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_u8TogglePinValue+0xc4>
    1f38:	84 27       	eor	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	19 c0       	rjmp	.+50     	; 0x1f70 <DIO_u8TogglePinValue+0x104>
		case DIO_u8PORTD :TOG_BIT(PORTD,Copy_u8Pin); break;
    1f3e:	a2 e3       	ldi	r26, 0x32	; 50
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e2 e3       	ldi	r30, 0x32	; 50
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <DIO_u8TogglePinValue+0xf0>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <DIO_u8TogglePinValue+0xec>
    1f60:	84 27       	eor	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	05 c0       	rjmp	.+10     	; 0x1f70 <DIO_u8TogglePinValue+0x104>
		default :Local_u8ErrorState=NOK; break;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <DIO_u8TogglePinValue+0x104>
		}

	}
	else
	{
		Local_u8ErrorState=NOK;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <EEPROM_voidWriteDataByte>:
#include "EEPROM_interface.h"
#include "EEPROM_cfg.h"
#include "EEPROM_priv.h"

uint8 EEPROM_voidWriteDataByte(uint16 Copy_u16LocAddress,uint8 Copy_u8DataByte)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	63 97       	sbiw	r28, 0x13	; 19
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	9a 8b       	std	Y+18, r25	; 0x12
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 Local_u8ErrorState = OK;
    1f9c:	18 8a       	std	Y+16, r1	; 0x10

	if(Copy_u16LocAddress <= EEPROM_MAX_ADDRESS)
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa2:	24 e0       	ldi	r18, 0x04	; 4
    1fa4:	80 30       	cpi	r24, 0x00	; 0
    1fa6:	92 07       	cpc	r25, r18
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <EEPROM_voidWriteDataByte+0x2a>
    1faa:	86 c0       	rjmp	.+268    	; 0x20b8 <EEPROM_voidWriteDataByte+0x136>
	{
       uint8 Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (EEPROM_A2_CONNECTION<<2u | (uint8)((Copy_u16LocAddress)>>8u));
    1fac:	89 89       	ldd	r24, Y+17	; 0x11
    1fae:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	99 27       	eor	r25, r25
    1fb4:	80 65       	ori	r24, 0x50	; 80
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
       TWI_SendStartCondition();
    1fb8:	0e 94 53 23 	call	0x46a6	; 0x46a6 <TWI_SendStartCondition>

       /*Send the address packet with the fixed address and the A2 connection*/
       TWI_SendSlaveAdressWithWrite(Local_u8AddressPacket);
    1fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbe:	0e 94 a7 23 	call	0x474e	; 0x474e <TWI_SendSlaveAdressWithWrite>

       /*Send a data packet with the least 8 bits of the location address*/
       TWI_MstrWriteDataByte((uint8) Copy_u16LocAddress);
    1fc2:	89 89       	ldd	r24, Y+17	; 0x11
    1fc4:	0e 94 17 24 	call	0x482e	; 0x482e <TWI_MstrWriteDataByte>

       /*Send a data packet to the location address*/
       TWI_MstrWriteDataByte(Copy_u8DataByte);
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	0e 94 17 24 	call	0x482e	; 0x482e <TWI_MstrWriteDataByte>

       TWI_voidStopCondition();
    1fce:	0e 94 76 24 	call	0x48ec	; 0x48ec <TWI_voidStopCondition>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e2       	ldi	r26, 0x20	; 32
    1fd8:	b1 e4       	ldi	r27, 0x41	; 65
    1fda:	8b 87       	std	Y+11, r24	; 0x0b
    1fdc:	9c 87       	std	Y+12, r25	; 0x0c
    1fde:	ad 87       	std	Y+13, r26	; 0x0d
    1fe0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a e7       	ldi	r20, 0x7A	; 122
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8f 83       	std	Y+7, r24	; 0x07
    1ffc:	98 87       	std	Y+8, r25	; 0x08
    1ffe:	a9 87       	std	Y+9, r26	; 0x09
    2000:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2002:	6f 81       	ldd	r22, Y+7	; 0x07
    2004:	78 85       	ldd	r23, Y+8	; 0x08
    2006:	89 85       	ldd	r24, Y+9	; 0x09
    2008:	9a 85       	ldd	r25, Y+10	; 0x0a
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	2c f4       	brge	.+10     	; 0x2024 <EEPROM_voidWriteDataByte+0xa2>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <EEPROM_voidWriteDataByte+0x120>
	else if (__tmp > 65535)
    2024:	6f 81       	ldd	r22, Y+7	; 0x07
    2026:	78 85       	ldd	r23, Y+8	; 0x08
    2028:	89 85       	ldd	r24, Y+9	; 0x09
    202a:	9a 85       	ldd	r25, Y+10	; 0x0a
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	4c f5       	brge	.+82     	; 0x208e <EEPROM_voidWriteDataByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	6b 85       	ldd	r22, Y+11	; 0x0b
    203e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2040:	8d 85       	ldd	r24, Y+13	; 0x0d
    2042:	9e 85       	ldd	r25, Y+14	; 0x0e
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9e 83       	std	Y+6, r25	; 0x06
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <EEPROM_voidWriteDataByte+0x102>
    2066:	89 e1       	ldi	r24, 0x19	; 25
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9c 83       	std	Y+4, r25	; 0x04
    206c:	8b 83       	std	Y+3, r24	; 0x03
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <EEPROM_voidWriteDataByte+0xf0>
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f7       	brne	.-38     	; 0x2066 <EEPROM_voidWriteDataByte+0xe4>
    208c:	17 c0       	rjmp	.+46     	; 0x20bc <EEPROM_voidWriteDataByte+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	9a 81       	ldd	r25, Y+2	; 0x02
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <EEPROM_voidWriteDataByte+0x12c>
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <EEPROM_voidWriteDataByte+0x13a>
       /*wait for 10ms for EEPROM write cycle*/
       _delay_ms(10);
	}
	else
	{
		Local_u8ErrorState = NOK;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	88 8b       	std	Y+16, r24	; 0x10
	}

	return Local_u8ErrorState;
    20bc:	88 89       	ldd	r24, Y+16	; 0x10
}
    20be:	63 96       	adiw	r28, 0x13	; 19
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <EEPROM_voidReadDataByte>:
uint8 EEPROM_voidReadDataByte(uint16 Copy_u16LocAddress,uint8 *Copy_u8DataByte)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <EEPROM_voidReadDataByte+0x6>
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <EEPROM_voidReadDataByte+0x8>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <EEPROM_voidReadDataByte+0xa>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
    20e2:	7e 83       	std	Y+6, r23	; 0x06
    20e4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState= OK;
    20e6:	1a 82       	std	Y+2, r1	; 0x02


	if(Copy_u8DataByte != NULL)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	19 f1       	breq	.+70     	; 0x2136 <EEPROM_voidReadDataByte+0x66>
	{
		if(Copy_u16LocAddress <= EEPROM_MAX_ADDRESS)
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	24 e0       	ldi	r18, 0x04	; 4
    20f6:	80 30       	cpi	r24, 0x00	; 0
    20f8:	92 07       	cpc	r25, r18
    20fa:	d0 f4       	brcc	.+52     	; 0x2130 <EEPROM_voidReadDataByte+0x60>
		{
	       uint8 Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (EEPROM_A2_CONNECTION<<2u | (uint8)((Copy_u16LocAddress)>>8u));
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	89 2f       	mov	r24, r25
    2102:	99 27       	eor	r25, r25
    2104:	80 65       	ori	r24, 0x50	; 80
    2106:	89 83       	std	Y+1, r24	; 0x01
	       TWI_SendStartCondition();
    2108:	0e 94 53 23 	call	0x46a6	; 0x46a6 <TWI_SendStartCondition>

	       /*Send the address packet with the fixed address and the A2 connection*/
           TWI_SendSlaveAdressWithWrite(Local_u8AddressPacket);
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	0e 94 a7 23 	call	0x474e	; 0x474e <TWI_SendSlaveAdressWithWrite>

           /*Send a data packet with the least 8 bits of the location address*/
           TWI_MstrWriteDataByte((uint8) Copy_u16LocAddress);
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	0e 94 17 24 	call	0x482e	; 0x482e <TWI_MstrWriteDataByte>

           /*Send Repeated Start to read data*/
           TWI_SendReapeatedStart();
    2118:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TWI_SendReapeatedStart>

           /*Send Slave Address with read*/
           TWI_SendSlaveAdressWithRead(Local_u8AddressPacket);
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	0e 94 df 23 	call	0x47be	; 0x47be <TWI_SendSlaveAdressWithRead>


           /*Read a data packet from the location address*/
           TWI_MstrReadDataByte(Copy_u8DataByte);
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	0e 94 40 24 	call	0x4880	; 0x4880 <TWI_MstrReadDataByte>

           TWI_voidStopCondition();
    212a:	0e 94 76 24 	call	0x48ec	; 0x48ec <TWI_voidStopCondition>
    212e:	05 c0       	rjmp	.+10     	; 0x213a <EEPROM_voidReadDataByte+0x6a>
		}
		else
		{
			Local_u8ErrorState = NOK;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	02 c0       	rjmp	.+4      	; 0x213a <EEPROM_voidReadDataByte+0x6a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    213c:	26 96       	adiw	r28, 0x06	; 6
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <GIE_voidEnable>:
#include "GIE_reg.h"
#include "GIE_interface.h"


void GIE_voidEnable(void)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
	//SET_BIT(SREG,SREG_I);
	 __asm __volatile("SEI"); /*Inline assemble to set I bit*/
    2156:	78 94       	sei
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG,SREG_I);
	__asm __volatile("CLI"); /*Inline assemble to clear I bit*/
    2166:	f8 94       	cli
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_cfg.h"
#include "PORT_private.h"

void PORT_voidInit(void)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    2176:	ea e3       	ldi	r30, 0x3A	; 58
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	8e e7       	ldi	r24, 0x7E	; 126
    217c:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    217e:	e7 e3       	ldi	r30, 0x37	; 55
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2186:	e4 e3       	ldi	r30, 0x34	; 52
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	83 e2       	ldi	r24, 0x23	; 35
    218c:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    218e:	e1 e3       	ldi	r30, 0x31	; 49
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8c eb       	ldi	r24, 0xBC	; 188
    2194:	80 83       	st	Z, r24

	PORTA= PORTA_INITIAL_VAL;
    2196:	eb e3       	ldi	r30, 0x3B	; 59
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	10 82       	st	Z, r1
	PORTB= PORTB_INITIAL_VAL;
    219c:	e8 e3       	ldi	r30, 0x38	; 56
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	10 82       	st	Z, r1
	PORTC= PORTC_INITIAL_VAL;
    21a2:	e5 e3       	ldi	r30, 0x35	; 53
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	10 82       	st	Z, r1
	PORTD= PORTD_INITIAL_VAL;
    21a8:	e2 e3       	ldi	r30, 0x32	; 50
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	8c e1       	ldi	r24, 0x1C	; 28
    21ae:	80 83       	st	Z, r24

}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <PWM_voidSetFrequency_SetDutyCycle>:
static uint8 TIMER1_u8OVF_Counter=0;
static uint8  ICU_u8Flag=0;
void (*Schedul_ptFunc)(void)=NULL;
uint16 Schedul_u16PreloadVal=0,Schedul_u16NumberTicks=0;
void PWM_voidSetFrequency_SetDutyCycle(uint32 Copy_u8Freqency,uint8 Copy_u8DutyCycle)
{
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	2e 97       	sbiw	r28, 0x0e	; 14
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	68 87       	std	Y+8, r22	; 0x08
    21d0:	79 87       	std	Y+9, r23	; 0x09
    21d2:	8a 87       	std	Y+10, r24	; 0x0a
    21d4:	9b 87       	std	Y+11, r25	; 0x0b
    21d6:	4c 87       	std	Y+12, r20	; 0x0c
	TIMER1_cfg_t Timer1;
	Timer1.CHANNEL=TIMER1_CHANNEL_A;
    21d8:	1f 82       	std	Y+7, r1	; 0x07
	Timer1.FASTPWN_MODE=TIMER1_SET_TOP_CLR_COMP;
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	8d 83       	std	Y+5, r24	; 0x05
	Timer1.WFG_MODE=TIMER1_FAST_PWM_ICR1;
    21de:	8d e0       	ldi	r24, 0x0D	; 13
    21e0:	8b 83       	std	Y+3, r24	; 0x03
	TIMER1_voidInit(&Timer1);
    21e2:	ce 01       	movw	r24, r28
    21e4:	03 96       	adiw	r24, 0x03	; 3
    21e6:	0e 94 11 19 	call	0x3222	; 0x3222 <TIMER1_voidInit>

	switch(Global_u8Timer1Prescaler)
    21ea:	80 91 3e 02 	lds	r24, 0x023E
    21ee:	90 91 3f 02 	lds	r25, 0x023F
    21f2:	9e 87       	std	Y+14, r25	; 0x0e
    21f4:	8d 87       	std	Y+13, r24	; 0x0d
    21f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    21f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    21fa:	e3 30       	cpi	r30, 0x03	; 3
    21fc:	f1 05       	cpc	r31, r1
    21fe:	09 f4       	brne	.+2      	; 0x2202 <PWM_voidSetFrequency_SetDutyCycle+0x4c>
    2200:	45 c0       	rjmp	.+138    	; 0x228c <PWM_voidSetFrequency_SetDutyCycle+0xd6>
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	84 30       	cpi	r24, 0x04	; 4
    2208:	91 05       	cpc	r25, r1
    220a:	5c f4       	brge	.+22     	; 0x2222 <PWM_voidSetFrequency_SetDutyCycle+0x6c>
    220c:	ed 85       	ldd	r30, Y+13	; 0x0d
    220e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2210:	e1 30       	cpi	r30, 0x01	; 1
    2212:	f1 05       	cpc	r31, r1
    2214:	99 f0       	breq	.+38     	; 0x223c <PWM_voidSetFrequency_SetDutyCycle+0x86>
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	11 f1       	breq	.+68     	; 0x2264 <PWM_voidSetFrequency_SetDutyCycle+0xae>
    2220:	70 c0       	rjmp	.+224    	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
    2222:	ed 85       	ldd	r30, Y+13	; 0x0d
    2224:	fe 85       	ldd	r31, Y+14	; 0x0e
    2226:	e4 30       	cpi	r30, 0x04	; 4
    2228:	f1 05       	cpc	r31, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <PWM_voidSetFrequency_SetDutyCycle+0x78>
    222c:	43 c0       	rjmp	.+134    	; 0x22b4 <PWM_voidSetFrequency_SetDutyCycle+0xfe>
    222e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2230:	9e 85       	ldd	r25, Y+14	; 0x0e
    2232:	85 30       	cpi	r24, 0x05	; 5
    2234:	91 05       	cpc	r25, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <PWM_voidSetFrequency_SetDutyCycle+0x84>
    2238:	51 c0       	rjmp	.+162    	; 0x22dc <PWM_voidSetFrequency_SetDutyCycle+0x126>
    223a:	63 c0       	rjmp	.+198    	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
	{
	case DIVISION_BY_1 : ICR1=(uint16)(16000000u/((uint32)Copy_u8Freqency));break;
    223c:	06 e4       	ldi	r16, 0x46	; 70
    223e:	10 e0       	ldi	r17, 0x00	; 0
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	94 e2       	ldi	r25, 0x24	; 36
    2244:	a4 ef       	ldi	r26, 0xF4	; 244
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	28 85       	ldd	r18, Y+8	; 0x08
    224a:	39 85       	ldd	r19, Y+9	; 0x09
    224c:	4a 85       	ldd	r20, Y+10	; 0x0a
    224e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    2258:	da 01       	movw	r26, r20
    225a:	c9 01       	movw	r24, r18
    225c:	f8 01       	movw	r30, r16
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	4f c0       	rjmp	.+158    	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
	case DIVISION_BY_8 : ICR1=(uint16)(2000000u/((uint32)Copy_u8Freqency));break;
    2264:	06 e4       	ldi	r16, 0x46	; 70
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	80 e8       	ldi	r24, 0x80	; 128
    226a:	94 e8       	ldi	r25, 0x84	; 132
    226c:	ae e1       	ldi	r26, 0x1E	; 30
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	28 85       	ldd	r18, Y+8	; 0x08
    2272:	39 85       	ldd	r19, Y+9	; 0x09
    2274:	4a 85       	ldd	r20, Y+10	; 0x0a
    2276:	5b 85       	ldd	r21, Y+11	; 0x0b
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    2280:	da 01       	movw	r26, r20
    2282:	c9 01       	movw	r24, r18
    2284:	f8 01       	movw	r30, r16
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	3b c0       	rjmp	.+118    	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
	case DIVISION_BY_64 : ICR1=(uint16)(250000u/((uint32)Copy_u8Freqency));break;
    228c:	06 e4       	ldi	r16, 0x46	; 70
    228e:	10 e0       	ldi	r17, 0x00	; 0
    2290:	80 e9       	ldi	r24, 0x90	; 144
    2292:	90 ed       	ldi	r25, 0xD0	; 208
    2294:	a3 e0       	ldi	r26, 0x03	; 3
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	28 85       	ldd	r18, Y+8	; 0x08
    229a:	39 85       	ldd	r19, Y+9	; 0x09
    229c:	4a 85       	ldd	r20, Y+10	; 0x0a
    229e:	5b 85       	ldd	r21, Y+11	; 0x0b
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    22a8:	da 01       	movw	r26, r20
    22aa:	c9 01       	movw	r24, r18
    22ac:	f8 01       	movw	r30, r16
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    22b2:	27 c0       	rjmp	.+78     	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
	case DIVISION_BY_256 : ICR1=(uint16)(62500u/((uint32)Copy_u8Freqency));break;
    22b4:	06 e4       	ldi	r16, 0x46	; 70
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	84 e2       	ldi	r24, 0x24	; 36
    22ba:	94 ef       	ldi	r25, 0xF4	; 244
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	28 85       	ldd	r18, Y+8	; 0x08
    22c2:	39 85       	ldd	r19, Y+9	; 0x09
    22c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    22c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    22d0:	da 01       	movw	r26, r20
    22d2:	c9 01       	movw	r24, r18
    22d4:	f8 01       	movw	r30, r16
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	13 c0       	rjmp	.+38     	; 0x2302 <PWM_voidSetFrequency_SetDutyCycle+0x14c>
	case DIVISION_BY_1024 : ICR1=(uint16)(15625u/((uint32)Copy_u8Freqency));break;
    22dc:	06 e4       	ldi	r16, 0x46	; 70
    22de:	10 e0       	ldi	r17, 0x00	; 0
    22e0:	89 e0       	ldi	r24, 0x09	; 9
    22e2:	9d e3       	ldi	r25, 0x3D	; 61
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	28 85       	ldd	r18, Y+8	; 0x08
    22ea:	39 85       	ldd	r19, Y+9	; 0x09
    22ec:	4a 85       	ldd	r20, Y+10	; 0x0a
    22ee:	5b 85       	ldd	r21, Y+11	; 0x0b
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    22f8:	da 01       	movw	r26, r20
    22fa:	c9 01       	movw	r24, r18
    22fc:	f8 01       	movw	r30, r16
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
	}
	uint16 Local_u16PeriodTime=ICR1;
    2302:	e6 e4       	ldi	r30, 0x46	; 70
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    OCR1A= (uint16)(((uint32)Local_u16PeriodTime*Copy_u8DutyCycle/100u)-1u);
    230e:	0a e4       	ldi	r16, 0x4A	; 74
    2310:	10 e0       	ldi	r17, 0x00	; 0
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	cc 01       	movw	r24, r24
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	2c 85       	ldd	r18, Y+12	; 0x0c
    231e:	22 2f       	mov	r18, r18
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <__mulsi3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	24 e6       	ldi	r18, 0x64	; 100
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	50 e0       	ldi	r21, 0x00	; 0
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    2342:	da 01       	movw	r26, r20
    2344:	c9 01       	movw	r24, r18
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f8 01       	movw	r30, r16
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
}
    234e:	2e 96       	adiw	r28, 0x0e	; 14
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <PWM_u8Measure_Frequency_DutyCycle>:

uint8 PWM_u8Measure_Frequency_DutyCycle(uint32 *Copy_u8ON_Time,uint32 *Copy_PeriodTime)
{
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	2c 97       	sbiw	r28, 0x0c	; 12
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	9a 87       	std	Y+10, r25	; 0x0a
    2382:	89 87       	std	Y+9, r24	; 0x09
    2384:	7c 87       	std	Y+12, r23	; 0x0c
    2386:	6b 87       	std	Y+11, r22	; 0x0b
	uint8 Local_u8ErrorState=OK;
    2388:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u8TickTime=5u;
    238a:	85 e0       	ldi	r24, 0x05	; 5
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8ON_Time != NULL && Copy_PeriodTime != NULL)
    2392:	89 85       	ldd	r24, Y+9	; 0x09
    2394:	9a 85       	ldd	r25, Y+10	; 0x0a
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	09 f4       	brne	.+2      	; 0x239c <PWM_u8Measure_Frequency_DutyCycle+0x38>
    239a:	bf c0       	rjmp	.+382    	; 0x251a <PWM_u8Measure_Frequency_DutyCycle+0x1b6>
    239c:	8b 85       	ldd	r24, Y+11	; 0x0b
    239e:	9c 85       	ldd	r25, Y+12	; 0x0c
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <PWM_u8Measure_Frequency_DutyCycle+0x42>
    23a4:	ba c0       	rjmp	.+372    	; 0x251a <PWM_u8Measure_Frequency_DutyCycle+0x1b6>
	{
       TIMER1_cfg_t Timer1;
       Timer1.WFG_MODE=TIMER1_NORMAL_MODE;
    23a6:	1c 82       	std	Y+4, r1	; 0x04
       ICU_voidTrigger_CFG(ICU_TriggerSRC_RisingEdge);
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	0e 94 9d 12 	call	0x253a	; 0x253a <ICU_voidTrigger_CFG>
       TIMER1_voidInit(&Timer1);
    23ae:	ce 01       	movw	r24, r28
    23b0:	04 96       	adiw	r24, 0x04	; 4
    23b2:	0e 94 11 19 	call	0x3222	; 0x3222 <TIMER1_voidInit>
       TIMERS_u8SetCallBack(TIMER1_OVF,&TIMER1_OVF_Event);
    23b6:	28 ec       	ldi	r18, 0xC8	; 200
    23b8:	32 e1       	ldi	r19, 0x12	; 18
    23ba:	84 e0       	ldi	r24, 0x04	; 4
    23bc:	b9 01       	movw	r22, r18
    23be:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <TIMERS_u8SetCallBack>
       TIMERS_u8SetCallBack(TIMER1_CAPT,ICU_Process);
    23c2:	24 ed       	ldi	r18, 0xD4	; 212
    23c4:	32 e1       	ldi	r19, 0x12	; 18
    23c6:	87 e0       	ldi	r24, 0x07	; 7
    23c8:	b9 01       	movw	r22, r18
    23ca:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <TIMERS_u8SetCallBack>
       TIMERS_void_INT_Enable(TIMER1_OVF);
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <TIMERS_void_INT_Enable>
       TIMERS_void_INT_Enable(TIMER1_CAPT);
    23d4:	87 e0       	ldi	r24, 0x07	; 7
    23d6:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <TIMERS_void_INT_Enable>
       GIE_voidEnable();
    23da:	0e 94 a7 10 	call	0x214e	; 0x214e <GIE_voidEnable>
   	   while(ICU_u8Flag < 5u);
    23de:	80 91 22 02 	lds	r24, 0x0222
    23e2:	85 30       	cpi	r24, 0x05	; 5
    23e4:	e0 f3       	brcs	.-8      	; 0x23de <PWM_u8Measure_Frequency_DutyCycle+0x7a>
   	   GIE_voidDisable();
    23e6:	0e 94 af 10 	call	0x215e	; 0x215e <GIE_voidDisable>
   	   TIMERS_void_INT_Disable(TIMER1_CAPT);
    23ea:	87 e0       	ldi	r24, 0x07	; 7
    23ec:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <TIMERS_void_INT_Disable>
   	   TIMERS_void_INT_Disable(TIMER1_OVF);
    23f0:	84 e0       	ldi	r24, 0x04	; 4
    23f2:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <TIMERS_void_INT_Disable>
       *Copy_u8ON_Time = (TIMER1_u32Read3 - TIMER1_u32Read2) * (uint32)Local_u8TickTime/10u;
    23f6:	20 91 1d 02 	lds	r18, 0x021D
    23fa:	30 91 1e 02 	lds	r19, 0x021E
    23fe:	40 91 1f 02 	lds	r20, 0x021F
    2402:	50 91 20 02 	lds	r21, 0x0220
    2406:	80 91 19 02 	lds	r24, 0x0219
    240a:	90 91 1a 02 	lds	r25, 0x021A
    240e:	a0 91 1b 02 	lds	r26, 0x021B
    2412:	b0 91 1c 02 	lds	r27, 0x021C
    2416:	79 01       	movw	r14, r18
    2418:	8a 01       	movw	r16, r20
    241a:	e8 1a       	sub	r14, r24
    241c:	f9 0a       	sbc	r15, r25
    241e:	0a 0b       	sbc	r16, r26
    2420:	1b 0b       	sbc	r17, r27
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	9c 01       	movw	r18, r24
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	c8 01       	movw	r24, r16
    242e:	b7 01       	movw	r22, r14
    2430:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <__mulsi3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	2a e0       	ldi	r18, 0x0A	; 10
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    2448:	da 01       	movw	r26, r20
    244a:	c9 01       	movw	r24, r18
    244c:	e9 85       	ldd	r30, Y+9	; 0x09
    244e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2450:	80 83       	st	Z, r24
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	a2 83       	std	Z+2, r26	; 0x02
    2456:	b3 83       	std	Z+3, r27	; 0x03
       *Copy_PeriodTime = (TIMER1_u32Read2 - TIMER1_u32Read1) * (uint32)Local_u8TickTime/10u;
    2458:	20 91 19 02 	lds	r18, 0x0219
    245c:	30 91 1a 02 	lds	r19, 0x021A
    2460:	40 91 1b 02 	lds	r20, 0x021B
    2464:	50 91 1c 02 	lds	r21, 0x021C
    2468:	80 91 15 02 	lds	r24, 0x0215
    246c:	90 91 16 02 	lds	r25, 0x0216
    2470:	a0 91 17 02 	lds	r26, 0x0217
    2474:	b0 91 18 02 	lds	r27, 0x0218
    2478:	79 01       	movw	r14, r18
    247a:	8a 01       	movw	r16, r20
    247c:	e8 1a       	sub	r14, r24
    247e:	f9 0a       	sbc	r15, r25
    2480:	0a 0b       	sbc	r16, r26
    2482:	1b 0b       	sbc	r17, r27
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	9c 01       	movw	r18, r24
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	c8 01       	movw	r24, r16
    2490:	b7 01       	movw	r22, r14
    2492:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <__mulsi3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	2a e0       	ldi	r18, 0x0A	; 10
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    24aa:	da 01       	movw	r26, r20
    24ac:	c9 01       	movw	r24, r18
    24ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    24b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    24b2:	80 83       	st	Z, r24
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	a2 83       	std	Z+2, r26	; 0x02
    24b8:	b3 83       	std	Z+3, r27	; 0x03
       if(*Copy_u8ON_Time > *Copy_PeriodTime)
    24ba:	e9 85       	ldd	r30, Y+9	; 0x09
    24bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    24be:	20 81       	ld	r18, Z
    24c0:	31 81       	ldd	r19, Z+1	; 0x01
    24c2:	42 81       	ldd	r20, Z+2	; 0x02
    24c4:	53 81       	ldd	r21, Z+3	; 0x03
    24c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    24c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	a2 81       	ldd	r26, Z+2	; 0x02
    24d0:	b3 81       	ldd	r27, Z+3	; 0x03
    24d2:	82 17       	cp	r24, r18
    24d4:	93 07       	cpc	r25, r19
    24d6:	a4 07       	cpc	r26, r20
    24d8:	b5 07       	cpc	r27, r21
    24da:	d0 f4       	brcc	.+52     	; 0x2510 <PWM_u8Measure_Frequency_DutyCycle+0x1ac>
       {
    	   *Copy_u8ON_Time = *Copy_u8ON_Time - *Copy_PeriodTime;
    24dc:	e9 85       	ldd	r30, Y+9	; 0x09
    24de:	fa 85       	ldd	r31, Y+10	; 0x0a
    24e0:	20 81       	ld	r18, Z
    24e2:	31 81       	ldd	r19, Z+1	; 0x01
    24e4:	42 81       	ldd	r20, Z+2	; 0x02
    24e6:	53 81       	ldd	r21, Z+3	; 0x03
    24e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    24ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	a2 81       	ldd	r26, Z+2	; 0x02
    24f2:	b3 81       	ldd	r27, Z+3	; 0x03
    24f4:	79 01       	movw	r14, r18
    24f6:	8a 01       	movw	r16, r20
    24f8:	e8 1a       	sub	r14, r24
    24fa:	f9 0a       	sbc	r15, r25
    24fc:	0a 0b       	sbc	r16, r26
    24fe:	1b 0b       	sbc	r17, r27
    2500:	d8 01       	movw	r26, r16
    2502:	c7 01       	movw	r24, r14
    2504:	e9 85       	ldd	r30, Y+9	; 0x09
    2506:	fa 85       	ldd	r31, Y+10	; 0x0a
    2508:	80 83       	st	Z, r24
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	a2 83       	std	Z+2, r26	; 0x02
    250e:	b3 83       	std	Z+3, r27	; 0x03
       }
       ICU_u8Flag=0;
    2510:	10 92 22 02 	sts	0x0222, r1
       TIMER1_u8OVF_Counter=0;
    2514:	10 92 21 02 	sts	0x0221, r1
    2518:	02 c0       	rjmp	.+4      	; 0x251e <PWM_u8Measure_Frequency_DutyCycle+0x1ba>
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
    251a:	82 e0       	ldi	r24, 0x02	; 2
    251c:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_u8ErrorState;
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2520:	2c 96       	adiw	r28, 0x0c	; 12
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	ff 90       	pop	r15
    2536:	ef 90       	pop	r14
    2538:	08 95       	ret

0000253a <ICU_voidTrigger_CFG>:
void ICU_voidTrigger_CFG(ICU_cfg_t Copy_enTriggerCfg)
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <ICU_voidTrigger_CFG+0x6>
    2540:	0f 92       	push	r0
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enTriggerCfg)
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	3b 83       	std	Y+3, r19	; 0x03
    2550:	2a 83       	std	Y+2, r18	; 0x02
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	9b 81       	ldd	r25, Y+3	; 0x03
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	31 f0       	breq	.+12     	; 0x2566 <ICU_voidTrigger_CFG+0x2c>
    255a:	2a 81       	ldd	r18, Y+2	; 0x02
    255c:	3b 81       	ldd	r19, Y+3	; 0x03
    255e:	21 30       	cpi	r18, 0x01	; 1
    2560:	31 05       	cpc	r19, r1
    2562:	49 f0       	breq	.+18     	; 0x2576 <ICU_voidTrigger_CFG+0x3c>
    2564:	0f c0       	rjmp	.+30     	; 0x2584 <ICU_voidTrigger_CFG+0x4a>
	{
	case ICU_TriggerSRC_FallingEdge : CLR_BIT(TCCR1B,TCCR1B_ICES1);break;
    2566:	ae e4       	ldi	r26, 0x4E	; 78
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ee e4       	ldi	r30, 0x4E	; 78
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	8f 7b       	andi	r24, 0xBF	; 191
    2572:	8c 93       	st	X, r24
    2574:	07 c0       	rjmp	.+14     	; 0x2584 <ICU_voidTrigger_CFG+0x4a>
	case ICU_TriggerSRC_RisingEdge	: SET_BIT(TCCR1B,TCCR1B_ICES1);break;
    2576:	ae e4       	ldi	r26, 0x4E	; 78
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e4       	ldi	r30, 0x4E	; 78
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 64       	ori	r24, 0x40	; 64
    2582:	8c 93       	st	X, r24
	}
}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <TIMER1_OVF_Event>:
void TIMER1_OVF_Event(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
	TIMER1_u8OVF_Counter++;
    2598:	80 91 21 02 	lds	r24, 0x0221
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	80 93 21 02 	sts	0x0221, r24
}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <ICU_Process>:
void ICU_Process(void)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62

	static uint8 Local_u8Counter=0;
	Local_u8Counter++;
    25b0:	80 91 29 02 	lds	r24, 0x0229
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	80 93 29 02 	sts	0x0229, r24

	if(Local_u8Counter == 1)
    25ba:	80 91 29 02 	lds	r24, 0x0229
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	e9 f4       	brne	.+58     	; 0x25fc <ICU_Process+0x54>
	{
		TIMER1_u32Read1 = (uint32)ICR1 + ((uint32)TIMER1_u8OVF_Counter * 65536ul);
    25c2:	e6 e4       	ldi	r30, 0x46	; 70
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	91 81       	ldd	r25, Z+1	; 0x01
    25ca:	9c 01       	movw	r18, r24
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	80 91 21 02 	lds	r24, 0x0221
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	dc 01       	movw	r26, r24
    25de:	99 27       	eor	r25, r25
    25e0:	88 27       	eor	r24, r24
    25e2:	82 0f       	add	r24, r18
    25e4:	93 1f       	adc	r25, r19
    25e6:	a4 1f       	adc	r26, r20
    25e8:	b5 1f       	adc	r27, r21
    25ea:	80 93 15 02 	sts	0x0215, r24
    25ee:	90 93 16 02 	sts	0x0216, r25
    25f2:	a0 93 17 02 	sts	0x0217, r26
    25f6:	b0 93 18 02 	sts	0x0218, r27
    25fa:	4e c0       	rjmp	.+156    	; 0x2698 <ICU_Process+0xf0>
	}
	else if (Local_u8Counter == 2)
    25fc:	80 91 29 02 	lds	r24, 0x0229
    2600:	82 30       	cpi	r24, 0x02	; 2
    2602:	01 f5       	brne	.+64     	; 0x2644 <ICU_Process+0x9c>
	{
		TIMER1_u32Read2 = (uint32)ICR1 + ((uint32)TIMER1_u8OVF_Counter * 65536ul);
    2604:	e6 e4       	ldi	r30, 0x46	; 70
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	9c 01       	movw	r18, r24
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	80 91 21 02 	lds	r24, 0x0221
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	dc 01       	movw	r26, r24
    2620:	99 27       	eor	r25, r25
    2622:	88 27       	eor	r24, r24
    2624:	82 0f       	add	r24, r18
    2626:	93 1f       	adc	r25, r19
    2628:	a4 1f       	adc	r26, r20
    262a:	b5 1f       	adc	r27, r21
    262c:	80 93 19 02 	sts	0x0219, r24
    2630:	90 93 1a 02 	sts	0x021A, r25
    2634:	a0 93 1b 02 	sts	0x021B, r26
    2638:	b0 93 1c 02 	sts	0x021C, r27
		ICU_voidTrigger_CFG(ICU_TriggerSRC_FallingEdge);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	0e 94 9d 12 	call	0x253a	; 0x253a <ICU_voidTrigger_CFG>
    2642:	2a c0       	rjmp	.+84     	; 0x2698 <ICU_Process+0xf0>
	}
	else if (Local_u8Counter == 3)
    2644:	80 91 29 02 	lds	r24, 0x0229
    2648:	83 30       	cpi	r24, 0x03	; 3
    264a:	31 f5       	brne	.+76     	; 0x2698 <ICU_Process+0xf0>
	{
		TIMER1_u32Read3 = (uint32)ICR1 + ((uint32)TIMER1_u8OVF_Counter * 65536ul);
    264c:	e6 e4       	ldi	r30, 0x46	; 70
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	9c 01       	movw	r18, r24
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	80 91 21 02 	lds	r24, 0x0221
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	dc 01       	movw	r26, r24
    2668:	99 27       	eor	r25, r25
    266a:	88 27       	eor	r24, r24
    266c:	82 0f       	add	r24, r18
    266e:	93 1f       	adc	r25, r19
    2670:	a4 1f       	adc	r26, r20
    2672:	b5 1f       	adc	r27, r21
    2674:	80 93 1d 02 	sts	0x021D, r24
    2678:	90 93 1e 02 	sts	0x021E, r25
    267c:	a0 93 1f 02 	sts	0x021F, r26
    2680:	b0 93 20 02 	sts	0x0220, r27
		ICU_voidTrigger_CFG(ICU_TriggerSRC_RisingEdge);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 9d 12 	call	0x253a	; 0x253a <ICU_voidTrigger_CFG>
		Local_u8Counter=0;
    268a:	10 92 29 02 	sts	0x0229, r1
		ICU_u8Flag++;
    268e:	80 91 22 02 	lds	r24, 0x0222
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	80 93 22 02 	sts	0x0222, r24
	}
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <Schedule_u8Service>:
uint8 Schedule_u8Service(uint32 Copy_u32Time_ms,Schedule_t Copy_enPeriodic_Once,void(*Copy_pvCallBackFunc)(void))
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	61 97       	sbiw	r28, 0x11	; 17
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	6b 87       	std	Y+11, r22	; 0x0b
    26b4:	7c 87       	std	Y+12, r23	; 0x0c
    26b6:	8d 87       	std	Y+13, r24	; 0x0d
    26b8:	9e 87       	std	Y+14, r25	; 0x0e
    26ba:	4f 87       	std	Y+15, r20	; 0x0f
    26bc:	39 8b       	std	Y+17, r19	; 0x11
    26be:	28 8b       	std	Y+16, r18	; 0x10
   uint8 Local_u8ErrorState=OK;
    26c0:	19 82       	std	Y+1, r1	; 0x01
   if(Copy_pvCallBackFunc != NULL)
    26c2:	88 89       	ldd	r24, Y+16	; 0x10
    26c4:	99 89       	ldd	r25, Y+17	; 0x11
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	71 f1       	breq	.+92     	; 0x2726 <Schedule_u8Service+0x88>
   {
	   Schedul_ptFunc = Copy_pvCallBackFunc;
    26ca:	88 89       	ldd	r24, Y+16	; 0x10
    26cc:	99 89       	ldd	r25, Y+17	; 0x11
    26ce:	90 93 24 02 	sts	0x0224, r25
    26d2:	80 93 23 02 	sts	0x0223, r24
	   Schedul_u16NumberTicks = Copy_u32Time_ms ;
    26d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26da:	90 93 28 02 	sts	0x0228, r25
    26de:	80 93 27 02 	sts	0x0227, r24
	   TIMER1_cfg_t Timer1;
	   Timer1.WFG_MODE = TIMER1_CTC_OCR1A;
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	8a 83       	std	Y+2, r24	; 0x02
	   TIMERS_void_INT_Enable(TIMER1_COMP_CHA);
    26e6:	85 e0       	ldi	r24, 0x05	; 5
    26e8:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <TIMERS_void_INT_Enable>
	   //TIMERS_u8SetCallBack(TIMER1_COMP_CHA,&Schedul_voidOVF_Event);
	   TIMER1_void_Set_CompValue(250u,TIMER1_CHANNEL_A);
    26ec:	8a ef       	ldi	r24, 0xFA	; 250
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	0e 94 a1 20 	call	0x4142	; 0x4142 <TIMER1_void_Set_CompValue>
	   TIMER1_voidInit(&Timer1);
    26f6:	ce 01       	movw	r24, r28
    26f8:	02 96       	adiw	r24, 0x02	; 2
    26fa:	0e 94 11 19 	call	0x3222	; 0x3222 <TIMER1_voidInit>
	   TIMER0_2_Cfg_t Timer0;
	   Timer0.WFG_MODE=CTC;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	8f 83       	std	Y+7, r24	; 0x07
	   Timer0.CTC_MODE=NORMAL_CTC;
    2702:	18 86       	std	Y+8, r1	; 0x08
	   TIMER0_void_Set_CompValue(250);
    2704:	8a ef       	ldi	r24, 0xFA	; 250
    2706:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER0_void_Set_CompValue>
	   TIMERS_void_INT_Enable(TIMER0_COMP);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <TIMERS_void_INT_Enable>
	   TIMERS_u8SetCallBack(TIMER0_COMP,&Schedul_voidOVF_Event);
    2710:	2f e9       	ldi	r18, 0x9F	; 159
    2712:	33 e1       	ldi	r19, 0x13	; 19
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	b9 01       	movw	r22, r18
    2718:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <TIMERS_u8SetCallBack>
	   TIMER0_u8Init(&Timer0);
    271c:	ce 01       	movw	r24, r28
    271e:	07 96       	adiw	r24, 0x07	; 7
    2720:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TIMER0_u8Init>
    2724:	02 c0       	rjmp	.+4      	; 0x272a <Schedule_u8Service+0x8c>
   }
   else
   {
	   Local_u8ErrorState = NULL_PTR_ERR;
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	89 83       	std	Y+1, r24	; 0x01
   }
   return Local_u8ErrorState;
    272a:	89 81       	ldd	r24, Y+1	; 0x01
}
    272c:	61 96       	adiw	r28, 0x11	; 17
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <Schedul_voidOVF_Event>:
void Schedul_voidOVF_Event(void)
{
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
	static uint32 Local_u32Counter=0u;
	Local_u32Counter++;
    2746:	80 91 2a 02 	lds	r24, 0x022A
    274a:	90 91 2b 02 	lds	r25, 0x022B
    274e:	a0 91 2c 02 	lds	r26, 0x022C
    2752:	b0 91 2d 02 	lds	r27, 0x022D
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	a1 1d       	adc	r26, r1
    275a:	b1 1d       	adc	r27, r1
    275c:	80 93 2a 02 	sts	0x022A, r24
    2760:	90 93 2b 02 	sts	0x022B, r25
    2764:	a0 93 2c 02 	sts	0x022C, r26
    2768:	b0 93 2d 02 	sts	0x022D, r27
	if(Local_u32Counter == Schedul_u16NumberTicks)
    276c:	80 91 27 02 	lds	r24, 0x0227
    2770:	90 91 28 02 	lds	r25, 0x0228
    2774:	9c 01       	movw	r18, r24
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	80 91 2a 02 	lds	r24, 0x022A
    277e:	90 91 2b 02 	lds	r25, 0x022B
    2782:	a0 91 2c 02 	lds	r26, 0x022C
    2786:	b0 91 2d 02 	lds	r27, 0x022D
    278a:	28 17       	cp	r18, r24
    278c:	39 07       	cpc	r19, r25
    278e:	4a 07       	cpc	r20, r26
    2790:	5b 07       	cpc	r21, r27
    2792:	b1 f4       	brne	.+44     	; 0x27c0 <Schedul_voidOVF_Event+0x82>
	{
		TIMERS_void_INT_Disable(TIMER0_COMP);
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <TIMERS_void_INT_Disable>
		Local_u32Counter=0u;
    279a:	10 92 2a 02 	sts	0x022A, r1
    279e:	10 92 2b 02 	sts	0x022B, r1
    27a2:	10 92 2c 02 	sts	0x022C, r1
    27a6:	10 92 2d 02 	sts	0x022D, r1
		if(Schedul_ptFunc != NULL)
    27aa:	80 91 23 02 	lds	r24, 0x0223
    27ae:	90 91 24 02 	lds	r25, 0x0224
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	29 f0       	breq	.+10     	; 0x27c0 <Schedul_voidOVF_Event+0x82>
		{
			Schedul_ptFunc();
    27b6:	e0 91 23 02 	lds	r30, 0x0223
    27ba:	f0 91 24 02 	lds	r31, 0x0224
    27be:	09 95       	icall
		}
	}
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <TIMER0_u8Init>:
#include "TIMERS_reg.h"
#include "TIMERS_cfg.h"
static void (*TIMERS_pvCallBackFuncArr[8])(void)={NULL};
uint8 Global_u8Timer1Prescaler=0;
uint8 TIMER0_u8Init(TIMER0_2_Cfg_t *Copy_stCfg)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	2b 97       	sbiw	r28, 0x0b	; 11
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	9b 83       	std	Y+3, r25	; 0x03
    27dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_State=OK;
    27de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_stCfg!=NULL)
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	09 f4       	brne	.+2      	; 0x27ea <TIMER0_u8Init+0x24>
    27e8:	5e c1       	rjmp	.+700    	; 0x2aa6 <TIMER0_u8Init+0x2e0>
	{
		/*Select the wave form generation mode*/
		switch(Copy_stCfg->WFG_MODE)
    27ea:	ea 81       	ldd	r30, Y+2	; 0x02
    27ec:	fb 81       	ldd	r31, Y+3	; 0x03
    27ee:	80 81       	ld	r24, Z
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	3b 87       	std	Y+11, r19	; 0x0b
    27f6:	2a 87       	std	Y+10, r18	; 0x0a
    27f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	91 05       	cpc	r25, r1
    2800:	21 f1       	breq	.+72     	; 0x284a <TIMER0_u8Init+0x84>
    2802:	2a 85       	ldd	r18, Y+10	; 0x0a
    2804:	3b 85       	ldd	r19, Y+11	; 0x0b
    2806:	22 30       	cpi	r18, 0x02	; 2
    2808:	31 05       	cpc	r19, r1
    280a:	2c f4       	brge	.+10     	; 0x2816 <TIMER0_u8Init+0x50>
    280c:	8a 85       	ldd	r24, Y+10	; 0x0a
    280e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	61 f0       	breq	.+24     	; 0x282c <TIMER0_u8Init+0x66>
    2814:	46 c0       	rjmp	.+140    	; 0x28a2 <TIMER0_u8Init+0xdc>
    2816:	2a 85       	ldd	r18, Y+10	; 0x0a
    2818:	3b 85       	ldd	r19, Y+11	; 0x0b
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	31 05       	cpc	r19, r1
    281e:	21 f1       	breq	.+72     	; 0x2868 <TIMER0_u8Init+0xa2>
    2820:	8a 85       	ldd	r24, Y+10	; 0x0a
    2822:	9b 85       	ldd	r25, Y+11	; 0x0b
    2824:	83 30       	cpi	r24, 0x03	; 3
    2826:	91 05       	cpc	r25, r1
    2828:	71 f1       	breq	.+92     	; 0x2886 <TIMER0_u8Init+0xc0>
    282a:	3b c0       	rjmp	.+118    	; 0x28a2 <TIMER0_u8Init+0xdc>
		{
		case NORMAL_MODE : CLR_BIT(TCCR0,TCCR0_WGM00);CLR_BIT(TCCR0,TCCR0_COM01);break;/*Normal Mode configuration*/
    282c:	a3 e5       	ldi	r26, 0x53	; 83
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e3 e5       	ldi	r30, 0x53	; 83
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 7b       	andi	r24, 0xBF	; 191
    2838:	8c 93       	st	X, r24
    283a:	a3 e5       	ldi	r26, 0x53	; 83
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e3 e5       	ldi	r30, 0x53	; 83
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8f 7d       	andi	r24, 0xDF	; 223
    2846:	8c 93       	st	X, r24
    2848:	2c c0       	rjmp	.+88     	; 0x28a2 <TIMER0_u8Init+0xdc>
		case CTC : CLR_BIT(TCCR0,TCCR0_WGM00);SET_BIT(TCCR0,TCCR0_COM01);break;/*CTC Mode configuration*/
    284a:	a3 e5       	ldi	r26, 0x53	; 83
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e3 e5       	ldi	r30, 0x53	; 83
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	8f 7b       	andi	r24, 0xBF	; 191
    2856:	8c 93       	st	X, r24
    2858:	a3 e5       	ldi	r26, 0x53	; 83
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e3 e5       	ldi	r30, 0x53	; 83
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	80 62       	ori	r24, 0x20	; 32
    2864:	8c 93       	st	X, r24
    2866:	1d c0       	rjmp	.+58     	; 0x28a2 <TIMER0_u8Init+0xdc>
		case FAST_PWM : SET_BIT(TCCR0,TCCR0_WGM00);SET_BIT(TCCR0,TCCR0_COM01);break;/*Fast PWM configuration*/
    2868:	a3 e5       	ldi	r26, 0x53	; 83
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	e3 e5       	ldi	r30, 0x53	; 83
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	80 64       	ori	r24, 0x40	; 64
    2874:	8c 93       	st	X, r24
    2876:	a3 e5       	ldi	r26, 0x53	; 83
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e3 e5       	ldi	r30, 0x53	; 83
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 62       	ori	r24, 0x20	; 32
    2882:	8c 93       	st	X, r24
    2884:	0e c0       	rjmp	.+28     	; 0x28a2 <TIMER0_u8Init+0xdc>
		case PHASE_CORRECT : SET_BIT(TCCR0,TCCR0_WGM00);CLR_BIT(TCCR0,TCCR0_COM01);break;/*Phase correct Mode configuration*/
    2886:	a3 e5       	ldi	r26, 0x53	; 83
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e3 e5       	ldi	r30, 0x53	; 83
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	80 64       	ori	r24, 0x40	; 64
    2892:	8c 93       	st	X, r24
    2894:	a3 e5       	ldi	r26, 0x53	; 83
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e3 e5       	ldi	r30, 0x53	; 83
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7d       	andi	r24, 0xDF	; 223
    28a0:	8c 93       	st	X, r24
		}
		/*configure the CTC mode */
		if(Copy_stCfg->WFG_MODE==CTC)
    28a2:	ea 81       	ldd	r30, Y+2	; 0x02
    28a4:	fb 81       	ldd	r31, Y+3	; 0x03
    28a6:	80 81       	ld	r24, Z
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	09 f0       	breq	.+2      	; 0x28ae <TIMER0_u8Init+0xe8>
    28ac:	5d c0       	rjmp	.+186    	; 0x2968 <TIMER0_u8Init+0x1a2>
		{
           switch(Copy_stCfg->CTC_MODE)
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	fb 81       	ldd	r31, Y+3	; 0x03
    28b2:	81 81       	ldd	r24, Z+1	; 0x01
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	39 87       	std	Y+9, r19	; 0x09
    28ba:	28 87       	std	Y+8, r18	; 0x08
    28bc:	88 85       	ldd	r24, Y+8	; 0x08
    28be:	99 85       	ldd	r25, Y+9	; 0x09
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	91 05       	cpc	r25, r1
    28c4:	21 f1       	breq	.+72     	; 0x290e <TIMER0_u8Init+0x148>
    28c6:	28 85       	ldd	r18, Y+8	; 0x08
    28c8:	39 85       	ldd	r19, Y+9	; 0x09
    28ca:	22 30       	cpi	r18, 0x02	; 2
    28cc:	31 05       	cpc	r19, r1
    28ce:	2c f4       	brge	.+10     	; 0x28da <TIMER0_u8Init+0x114>
    28d0:	88 85       	ldd	r24, Y+8	; 0x08
    28d2:	99 85       	ldd	r25, Y+9	; 0x09
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <TIMER0_u8Init+0x12a>
    28d8:	d7 c0       	rjmp	.+430    	; 0x2a88 <TIMER0_u8Init+0x2c2>
    28da:	28 85       	ldd	r18, Y+8	; 0x08
    28dc:	39 85       	ldd	r19, Y+9	; 0x09
    28de:	22 30       	cpi	r18, 0x02	; 2
    28e0:	31 05       	cpc	r19, r1
    28e2:	21 f1       	breq	.+72     	; 0x292c <TIMER0_u8Init+0x166>
    28e4:	88 85       	ldd	r24, Y+8	; 0x08
    28e6:	99 85       	ldd	r25, Y+9	; 0x09
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	71 f1       	breq	.+92     	; 0x294a <TIMER0_u8Init+0x184>
    28ee:	cc c0       	rjmp	.+408    	; 0x2a88 <TIMER0_u8Init+0x2c2>
           {
           case NORMAL_CTC : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    28f0:	a3 e5       	ldi	r26, 0x53	; 83
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e3 e5       	ldi	r30, 0x53	; 83
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 7e       	andi	r24, 0xEF	; 239
    28fc:	8c 93       	st	X, r24
    28fe:	a3 e5       	ldi	r26, 0x53	; 83
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e3 e5       	ldi	r30, 0x53	; 83
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	8f 7d       	andi	r24, 0xDF	; 223
    290a:	8c 93       	st	X, r24
    290c:	bd c0       	rjmp	.+378    	; 0x2a88 <TIMER0_u8Init+0x2c2>
           case TOG_COMP   : SET_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*toggle the pin on Compare match*/
    290e:	a3 e5       	ldi	r26, 0x53	; 83
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e3 e5       	ldi	r30, 0x53	; 83
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	80 61       	ori	r24, 0x10	; 16
    291a:	8c 93       	st	X, r24
    291c:	a3 e5       	ldi	r26, 0x53	; 83
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e3 e5       	ldi	r30, 0x53	; 83
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8f 7d       	andi	r24, 0xDF	; 223
    2928:	8c 93       	st	X, r24
    292a:	ae c0       	rjmp	.+348    	; 0x2a88 <TIMER0_u8Init+0x2c2>
           case CLR_COMP   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match*/
    292c:	a3 e5       	ldi	r26, 0x53	; 83
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e3 e5       	ldi	r30, 0x53	; 83
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8f 7e       	andi	r24, 0xEF	; 239
    2938:	8c 93       	st	X, r24
    293a:	a3 e5       	ldi	r26, 0x53	; 83
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 e5       	ldi	r30, 0x53	; 83
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	80 62       	ori	r24, 0x20	; 32
    2946:	8c 93       	st	X, r24
    2948:	9f c0       	rjmp	.+318    	; 0x2a88 <TIMER0_u8Init+0x2c2>
           case SET_COMP   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*set the pin on Compare match*/
    294a:	a3 e5       	ldi	r26, 0x53	; 83
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e3 e5       	ldi	r30, 0x53	; 83
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	80 61       	ori	r24, 0x10	; 16
    2956:	8c 93       	st	X, r24
    2958:	a3 e5       	ldi	r26, 0x53	; 83
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e3 e5       	ldi	r30, 0x53	; 83
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 62       	ori	r24, 0x20	; 32
    2964:	8c 93       	st	X, r24
    2966:	90 c0       	rjmp	.+288    	; 0x2a88 <TIMER0_u8Init+0x2c2>
           }
		}
		else if (Copy_stCfg->WFG_MODE==FAST_PWM)
    2968:	ea 81       	ldd	r30, Y+2	; 0x02
    296a:	fb 81       	ldd	r31, Y+3	; 0x03
    296c:	80 81       	ld	r24, Z
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	09 f0       	breq	.+2      	; 0x2974 <TIMER0_u8Init+0x1ae>
    2972:	43 c0       	rjmp	.+134    	; 0x29fa <TIMER0_u8Init+0x234>
		{
          switch(Copy_stCfg->FASTPWM_MODE)
    2974:	ea 81       	ldd	r30, Y+2	; 0x02
    2976:	fb 81       	ldd	r31, Y+3	; 0x03
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	3f 83       	std	Y+7, r19	; 0x07
    2980:	2e 83       	std	Y+6, r18	; 0x06
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	41 f1       	breq	.+80     	; 0x29dc <TIMER0_u8Init+0x216>
    298c:	2e 81       	ldd	r18, Y+6	; 0x06
    298e:	3f 81       	ldd	r19, Y+7	; 0x07
    2990:	22 30       	cpi	r18, 0x02	; 2
    2992:	31 05       	cpc	r19, r1
    2994:	a1 f0       	breq	.+40     	; 0x29be <TIMER0_u8Init+0x1f8>
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	09 f0       	breq	.+2      	; 0x29a0 <TIMER0_u8Init+0x1da>
    299e:	74 c0       	rjmp	.+232    	; 0x2a88 <TIMER0_u8Init+0x2c2>
          {
          case NORMAL_PWM : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    29a0:	a3 e5       	ldi	r26, 0x53	; 83
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e3 e5       	ldi	r30, 0x53	; 83
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	8f 7e       	andi	r24, 0xEF	; 239
    29ac:	8c 93       	st	X, r24
    29ae:	a3 e5       	ldi	r26, 0x53	; 83
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e3 e5       	ldi	r30, 0x53	; 83
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8f 7d       	andi	r24, 0xDF	; 223
    29ba:	8c 93       	st	X, r24
    29bc:	65 c0       	rjmp	.+202    	; 0x2a88 <TIMER0_u8Init+0x2c2>
          case SET_TOP_CLR_COMP   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match set on top*/
    29be:	a3 e5       	ldi	r26, 0x53	; 83
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e3 e5       	ldi	r30, 0x53	; 83
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	8f 7e       	andi	r24, 0xEF	; 239
    29ca:	8c 93       	st	X, r24
    29cc:	a3 e5       	ldi	r26, 0x53	; 83
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e3 e5       	ldi	r30, 0x53	; 83
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	80 62       	ori	r24, 0x20	; 32
    29d8:	8c 93       	st	X, r24
    29da:	56 c0       	rjmp	.+172    	; 0x2a88 <TIMER0_u8Init+0x2c2>
          case CLR_TOP_SET_COMP   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*set the pin on Compare match clear on top*/
    29dc:	a3 e5       	ldi	r26, 0x53	; 83
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e3 e5       	ldi	r30, 0x53	; 83
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	80 61       	ori	r24, 0x10	; 16
    29e8:	8c 93       	st	X, r24
    29ea:	a3 e5       	ldi	r26, 0x53	; 83
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	e3 e5       	ldi	r30, 0x53	; 83
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	80 62       	ori	r24, 0x20	; 32
    29f6:	8c 93       	st	X, r24
    29f8:	47 c0       	rjmp	.+142    	; 0x2a88 <TIMER0_u8Init+0x2c2>
          }
		}
		else if (Copy_stCfg->WFG_MODE==PHASE_CORRECT)
    29fa:	ea 81       	ldd	r30, Y+2	; 0x02
    29fc:	fb 81       	ldd	r31, Y+3	; 0x03
    29fe:	80 81       	ld	r24, Z
    2a00:	83 30       	cpi	r24, 0x03	; 3
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <TIMER0_u8Init+0x240>
    2a04:	41 c0       	rjmp	.+130    	; 0x2a88 <TIMER0_u8Init+0x2c2>
		{
          switch(Copy_stCfg->PHCORRECT_MODE)
    2a06:	ea 81       	ldd	r30, Y+2	; 0x02
    2a08:	fb 81       	ldd	r31, Y+3	; 0x03
    2a0a:	83 81       	ldd	r24, Z+3	; 0x03
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	3d 83       	std	Y+5, r19	; 0x05
    2a12:	2c 83       	std	Y+4, r18	; 0x04
    2a14:	8c 81       	ldd	r24, Y+4	; 0x04
    2a16:	9d 81       	ldd	r25, Y+5	; 0x05
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	c1 f0       	breq	.+48     	; 0x2a4e <TIMER0_u8Init+0x288>
    2a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a20:	3d 81       	ldd	r19, Y+5	; 0x05
    2a22:	22 30       	cpi	r18, 0x02	; 2
    2a24:	31 05       	cpc	r19, r1
    2a26:	11 f1       	breq	.+68     	; 0x2a6c <TIMER0_u8Init+0x2a6>
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	61 f5       	brne	.+88     	; 0x2a88 <TIMER0_u8Init+0x2c2>
          {
          case NORMAL_PWM : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    2a30:	a3 e5       	ldi	r26, 0x53	; 83
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e3 e5       	ldi	r30, 0x53	; 83
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 7e       	andi	r24, 0xEF	; 239
    2a3c:	8c 93       	st	X, r24
    2a3e:	a3 e5       	ldi	r26, 0x53	; 83
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e3 e5       	ldi	r30, 0x53	; 83
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 7d       	andi	r24, 0xDF	; 223
    2a4a:	8c 93       	st	X, r24
    2a4c:	1d c0       	rjmp	.+58     	; 0x2a88 <TIMER0_u8Init+0x2c2>
          case CLR_COMPUP_SET_COMPDOWN   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match up counting set on compare match down counting*/
    2a4e:	a3 e5       	ldi	r26, 0x53	; 83
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e3 e5       	ldi	r30, 0x53	; 83
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7e       	andi	r24, 0xEF	; 239
    2a5a:	8c 93       	st	X, r24
    2a5c:	a3 e5       	ldi	r26, 0x53	; 83
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e3 e5       	ldi	r30, 0x53	; 83
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	80 62       	ori	r24, 0x20	; 32
    2a68:	8c 93       	st	X, r24
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <TIMER0_u8Init+0x2c2>
          case SET_COMPUP_CLR_COMPDOWN   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match down counting set on compare match up counting*/
    2a6c:	a3 e5       	ldi	r26, 0x53	; 83
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e3 e5       	ldi	r30, 0x53	; 83
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	80 61       	ori	r24, 0x10	; 16
    2a78:	8c 93       	st	X, r24
    2a7a:	a3 e5       	ldi	r26, 0x53	; 83
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	e3 e5       	ldi	r30, 0x53	; 83
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	80 62       	ori	r24, 0x20	; 32
    2a86:	8c 93       	st	X, r24
          }
		}
		/*configure the presacler value*/
		TCCR0&=PRESCALERMASK;       /*Clear the prescaler bits*/
    2a88:	a3 e5       	ldi	r26, 0x53	; 83
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e3 e5       	ldi	r30, 0x53	; 83
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	88 7f       	andi	r24, 0xF8	; 248
    2a94:	8c 93       	st	X, r24
		TCCR0|=TIMER0_u8PRESCALER; 	   /*Select prescaler */
    2a96:	a3 e5       	ldi	r26, 0x53	; 83
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e3 e5       	ldi	r30, 0x53	; 83
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	83 60       	ori	r24, 0x03	; 3
    2aa2:	8c 93       	st	X, r24
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <TIMER0_u8Init+0x2e4>
	}
	else
	{
		Local_u8Error_State=NULL_PTR_ERR;
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_u8Error_State;
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aac:	2b 96       	adiw	r28, 0x0b	; 11
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <TIMER0_voidPreload_Val>:
void TIMER0_voidPreload_Val(uint8 Copy_u8Val)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	0f 92       	push	r0
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Val;
    2aca:	e2 e5       	ldi	r30, 0x52	; 82
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	80 83       	st	Z, r24
}
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <TIMER0_void_Set_CompValue>:
void TIMER0_void_Set_CompValue(uint8 Copy_u8Val)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Val;
    2ae6:	ec e5       	ldi	r30, 0x5C	; 92
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	80 83       	st	Z, r24
}
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <TIMER0_voidSet_CTCMode>:
void TIMER0_voidSet_CTCMode(TIMER0_2_OC_MODE_t Copy_enMode)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <TIMER0_voidSet_CTCMode+0x6>
    2afc:	0f 92       	push	r0
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	28 2f       	mov	r18, r24
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	3b 83       	std	Y+3, r19	; 0x03
    2b0c:	2a 83       	std	Y+2, r18	; 0x02
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	91 05       	cpc	r25, r1
    2b16:	21 f1       	breq	.+72     	; 0x2b60 <TIMER0_voidSet_CTCMode+0x6a>
    2b18:	2a 81       	ldd	r18, Y+2	; 0x02
    2b1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b1c:	22 30       	cpi	r18, 0x02	; 2
    2b1e:	31 05       	cpc	r19, r1
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <TIMER0_voidSet_CTCMode+0x36>
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	61 f0       	breq	.+24     	; 0x2b42 <TIMER0_voidSet_CTCMode+0x4c>
    2b2a:	46 c0       	rjmp	.+140    	; 0x2bb8 <TIMER0_voidSet_CTCMode+0xc2>
    2b2c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b30:	22 30       	cpi	r18, 0x02	; 2
    2b32:	31 05       	cpc	r19, r1
    2b34:	21 f1       	breq	.+72     	; 0x2b7e <TIMER0_voidSet_CTCMode+0x88>
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	83 30       	cpi	r24, 0x03	; 3
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	71 f1       	breq	.+92     	; 0x2b9c <TIMER0_voidSet_CTCMode+0xa6>
    2b40:	3b c0       	rjmp	.+118    	; 0x2bb8 <TIMER0_voidSet_CTCMode+0xc2>
	{
    case NORMAL_CTC : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    2b42:	a3 e5       	ldi	r26, 0x53	; 83
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e3 e5       	ldi	r30, 0x53	; 83
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8f 7e       	andi	r24, 0xEF	; 239
    2b4e:	8c 93       	st	X, r24
    2b50:	a3 e5       	ldi	r26, 0x53	; 83
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e3 e5       	ldi	r30, 0x53	; 83
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	8f 7d       	andi	r24, 0xDF	; 223
    2b5c:	8c 93       	st	X, r24
    2b5e:	2c c0       	rjmp	.+88     	; 0x2bb8 <TIMER0_voidSet_CTCMode+0xc2>
    case TOG_COMP   : SET_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*toggle the pin on Compare match*/
    2b60:	a3 e5       	ldi	r26, 0x53	; 83
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e3 e5       	ldi	r30, 0x53	; 83
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	80 61       	ori	r24, 0x10	; 16
    2b6c:	8c 93       	st	X, r24
    2b6e:	a3 e5       	ldi	r26, 0x53	; 83
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e3 e5       	ldi	r30, 0x53	; 83
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7d       	andi	r24, 0xDF	; 223
    2b7a:	8c 93       	st	X, r24
    2b7c:	1d c0       	rjmp	.+58     	; 0x2bb8 <TIMER0_voidSet_CTCMode+0xc2>
    case CLR_COMP   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match*/
    2b7e:	a3 e5       	ldi	r26, 0x53	; 83
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e3 e5       	ldi	r30, 0x53	; 83
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	8f 7e       	andi	r24, 0xEF	; 239
    2b8a:	8c 93       	st	X, r24
    2b8c:	a3 e5       	ldi	r26, 0x53	; 83
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e3 e5       	ldi	r30, 0x53	; 83
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	80 62       	ori	r24, 0x20	; 32
    2b98:	8c 93       	st	X, r24
    2b9a:	0e c0       	rjmp	.+28     	; 0x2bb8 <TIMER0_voidSet_CTCMode+0xc2>
    case SET_COMP   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*set the pin on Compare match*/
    2b9c:	a3 e5       	ldi	r26, 0x53	; 83
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e3 e5       	ldi	r30, 0x53	; 83
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 61       	ori	r24, 0x10	; 16
    2ba8:	8c 93       	st	X, r24
    2baa:	a3 e5       	ldi	r26, 0x53	; 83
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e3 e5       	ldi	r30, 0x53	; 83
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	80 62       	ori	r24, 0x20	; 32
    2bb6:	8c 93       	st	X, r24
	}
}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <TIMER0_voidSet_FastPwmMode>:
void TIMER0_voidSet_FastPwmMode(TIMER0_2_FAST_PWM_MODE_t Copy_enMode)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <TIMER0_voidSet_FastPwmMode+0x6>
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	3b 83       	std	Y+3, r19	; 0x03
    2bda:	2a 83       	std	Y+2, r18	; 0x02
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	91 05       	cpc	r25, r1
    2be4:	39 f1       	breq	.+78     	; 0x2c34 <TIMER0_voidSet_FastPwmMode+0x70>
    2be6:	2a 81       	ldd	r18, Y+2	; 0x02
    2be8:	3b 81       	ldd	r19, Y+3	; 0x03
    2bea:	22 30       	cpi	r18, 0x02	; 2
    2bec:	31 05       	cpc	r19, r1
    2bee:	99 f0       	breq	.+38     	; 0x2c16 <TIMER0_voidSet_FastPwmMode+0x52>
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	61 f5       	brne	.+88     	; 0x2c50 <TIMER0_voidSet_FastPwmMode+0x8c>
	{
    case NORMAL_PWM : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    2bf8:	a3 e5       	ldi	r26, 0x53	; 83
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e3 e5       	ldi	r30, 0x53	; 83
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	8f 7e       	andi	r24, 0xEF	; 239
    2c04:	8c 93       	st	X, r24
    2c06:	a3 e5       	ldi	r26, 0x53	; 83
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e3 e5       	ldi	r30, 0x53	; 83
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	8f 7d       	andi	r24, 0xDF	; 223
    2c12:	8c 93       	st	X, r24
    2c14:	1d c0       	rjmp	.+58     	; 0x2c50 <TIMER0_voidSet_FastPwmMode+0x8c>
    case SET_TOP_CLR_COMP   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match set on top*/
    2c16:	a3 e5       	ldi	r26, 0x53	; 83
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e3 e5       	ldi	r30, 0x53	; 83
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8f 7e       	andi	r24, 0xEF	; 239
    2c22:	8c 93       	st	X, r24
    2c24:	a3 e5       	ldi	r26, 0x53	; 83
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	e3 e5       	ldi	r30, 0x53	; 83
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 62       	ori	r24, 0x20	; 32
    2c30:	8c 93       	st	X, r24
    2c32:	0e c0       	rjmp	.+28     	; 0x2c50 <TIMER0_voidSet_FastPwmMode+0x8c>
    case CLR_TOP_SET_COMP   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*set the pin on Compare match clear on top*/
    2c34:	a3 e5       	ldi	r26, 0x53	; 83
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e3 e5       	ldi	r30, 0x53	; 83
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 61       	ori	r24, 0x10	; 16
    2c40:	8c 93       	st	X, r24
    2c42:	a3 e5       	ldi	r26, 0x53	; 83
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e3 e5       	ldi	r30, 0x53	; 83
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	80 62       	ori	r24, 0x20	; 32
    2c4e:	8c 93       	st	X, r24
	}
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <TIMER0_voidSet_PHCorrectMode>:
void TIMER0_voidSet_PHCorrectMode(TIMER0_2_PHCORRECT_PWM_MODE_t Copy_enMode)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <TIMER0_voidSet_PHCorrectMode+0x6>
    2c62:	0f 92       	push	r0
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	3b 83       	std	Y+3, r19	; 0x03
    2c72:	2a 83       	std	Y+2, r18	; 0x02
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	c1 f0       	breq	.+48     	; 0x2cae <TIMER0_voidSet_PHCorrectMode+0x52>
    2c7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c80:	3b 81       	ldd	r19, Y+3	; 0x03
    2c82:	22 30       	cpi	r18, 0x02	; 2
    2c84:	31 05       	cpc	r19, r1
    2c86:	11 f1       	breq	.+68     	; 0x2ccc <TIMER0_voidSet_PHCorrectMode+0x70>
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	61 f5       	brne	.+88     	; 0x2ce8 <TIMER0_voidSet_PHCorrectMode+0x8c>
	{
    case NORMAL_PWM : CLR_BIT(TCCR0,TCCR0_COM00);CLR_BIT(TCCR0,TCCR0_COM01);break; /*disconnect the pin*/
    2c90:	a3 e5       	ldi	r26, 0x53	; 83
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e3 e5       	ldi	r30, 0x53	; 83
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	8f 7e       	andi	r24, 0xEF	; 239
    2c9c:	8c 93       	st	X, r24
    2c9e:	a3 e5       	ldi	r26, 0x53	; 83
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e3 e5       	ldi	r30, 0x53	; 83
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	8f 7d       	andi	r24, 0xDF	; 223
    2caa:	8c 93       	st	X, r24
    2cac:	1d c0       	rjmp	.+58     	; 0x2ce8 <TIMER0_voidSet_PHCorrectMode+0x8c>
    case CLR_COMPUP_SET_COMPDOWN   : CLR_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match up counting set on compare match down counting*/
    2cae:	a3 e5       	ldi	r26, 0x53	; 83
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e3 e5       	ldi	r30, 0x53	; 83
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8f 7e       	andi	r24, 0xEF	; 239
    2cba:	8c 93       	st	X, r24
    2cbc:	a3 e5       	ldi	r26, 0x53	; 83
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e3 e5       	ldi	r30, 0x53	; 83
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	80 62       	ori	r24, 0x20	; 32
    2cc8:	8c 93       	st	X, r24
    2cca:	0e c0       	rjmp	.+28     	; 0x2ce8 <TIMER0_voidSet_PHCorrectMode+0x8c>
    case SET_COMPUP_CLR_COMPDOWN   : SET_BIT(TCCR0,TCCR0_COM00);SET_BIT(TCCR0,TCCR0_COM01);break; /*Clear the pin on Compare match down counting set on compare match up counting*/
    2ccc:	a3 e5       	ldi	r26, 0x53	; 83
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e3 e5       	ldi	r30, 0x53	; 83
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 61       	ori	r24, 0x10	; 16
    2cd8:	8c 93       	st	X, r24
    2cda:	a3 e5       	ldi	r26, 0x53	; 83
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e3 e5       	ldi	r30, 0x53	; 83
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 62       	ori	r24, 0x20	; 32
    2ce6:	8c 93       	st	X, r24
	}
}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <TIMER2_u8Init>:
uint8 TIMER2_u8Init(TIMER0_2_Cfg_t *Copy_stCfg)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	2b 97       	sbiw	r28, 0x0b	; 11
    2cfe:	0f b6       	in	r0, 0x3f	; 63
    2d00:	f8 94       	cli
    2d02:	de bf       	out	0x3e, r29	; 62
    2d04:	0f be       	out	0x3f, r0	; 63
    2d06:	cd bf       	out	0x3d, r28	; 61
    2d08:	9b 83       	std	Y+3, r25	; 0x03
    2d0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8Error_State=OK;
    2d0c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_stCfg!=NULL)
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	9b 81       	ldd	r25, Y+3	; 0x03
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <TIMER2_u8Init+0x24>
    2d16:	5e c1       	rjmp	.+700    	; 0x2fd4 <TIMER2_u8Init+0x2e0>
	{
		/*Select the wave form generation mode*/
		switch(Copy_stCfg->WFG_MODE)
    2d18:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d1c:	80 81       	ld	r24, Z
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	3b 87       	std	Y+11, r19	; 0x0b
    2d24:	2a 87       	std	Y+10, r18	; 0x0a
    2d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	21 f1       	breq	.+72     	; 0x2d78 <TIMER2_u8Init+0x84>
    2d30:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d32:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d34:	22 30       	cpi	r18, 0x02	; 2
    2d36:	31 05       	cpc	r19, r1
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <TIMER2_u8Init+0x50>
    2d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	61 f0       	breq	.+24     	; 0x2d5a <TIMER2_u8Init+0x66>
    2d42:	46 c0       	rjmp	.+140    	; 0x2dd0 <TIMER2_u8Init+0xdc>
    2d44:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d46:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d48:	22 30       	cpi	r18, 0x02	; 2
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	21 f1       	breq	.+72     	; 0x2d96 <TIMER2_u8Init+0xa2>
    2d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d52:	83 30       	cpi	r24, 0x03	; 3
    2d54:	91 05       	cpc	r25, r1
    2d56:	71 f1       	breq	.+92     	; 0x2db4 <TIMER2_u8Init+0xc0>
    2d58:	3b c0       	rjmp	.+118    	; 0x2dd0 <TIMER2_u8Init+0xdc>
		{
		case NORMAL_MODE : CLR_BIT(TCCR2,TCCR2_WGM20);CLR_BIT(TCCR2,TCCR2_WGM21);break;/*Normal Mode configuration*/
    2d5a:	a5 e4       	ldi	r26, 0x45	; 69
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e5 e4       	ldi	r30, 0x45	; 69
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	8f 7b       	andi	r24, 0xBF	; 191
    2d66:	8c 93       	st	X, r24
    2d68:	a5 e4       	ldi	r26, 0x45	; 69
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	e5 e4       	ldi	r30, 0x45	; 69
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	87 7f       	andi	r24, 0xF7	; 247
    2d74:	8c 93       	st	X, r24
    2d76:	2c c0       	rjmp	.+88     	; 0x2dd0 <TIMER2_u8Init+0xdc>
		case CTC : CLR_BIT(TCCR2,TCCR2_WGM20);SET_BIT(TCCR2,TCCR2_WGM21);break;/*CTC Mode configuration*/
    2d78:	a5 e4       	ldi	r26, 0x45	; 69
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e5 e4       	ldi	r30, 0x45	; 69
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 7b       	andi	r24, 0xBF	; 191
    2d84:	8c 93       	st	X, r24
    2d86:	a5 e4       	ldi	r26, 0x45	; 69
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e5 e4       	ldi	r30, 0x45	; 69
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	88 60       	ori	r24, 0x08	; 8
    2d92:	8c 93       	st	X, r24
    2d94:	1d c0       	rjmp	.+58     	; 0x2dd0 <TIMER2_u8Init+0xdc>
		case FAST_PWM : SET_BIT(TCCR2,TCCR2_WGM20);SET_BIT(TCCR2,TCCR2_WGM21);break;/*Fast PWM configuration*/
    2d96:	a5 e4       	ldi	r26, 0x45	; 69
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e5 e4       	ldi	r30, 0x45	; 69
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 64       	ori	r24, 0x40	; 64
    2da2:	8c 93       	st	X, r24
    2da4:	a5 e4       	ldi	r26, 0x45	; 69
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e5 e4       	ldi	r30, 0x45	; 69
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	88 60       	ori	r24, 0x08	; 8
    2db0:	8c 93       	st	X, r24
    2db2:	0e c0       	rjmp	.+28     	; 0x2dd0 <TIMER2_u8Init+0xdc>
		case PHASE_CORRECT : SET_BIT(TCCR2,TCCR2_WGM20);CLR_BIT(TCCR2,TCCR2_WGM21);break;/*Phase correct Mode configuration*/
    2db4:	a5 e4       	ldi	r26, 0x45	; 69
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e5 e4       	ldi	r30, 0x45	; 69
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 64       	ori	r24, 0x40	; 64
    2dc0:	8c 93       	st	X, r24
    2dc2:	a5 e4       	ldi	r26, 0x45	; 69
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e5 e4       	ldi	r30, 0x45	; 69
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	87 7f       	andi	r24, 0xF7	; 247
    2dce:	8c 93       	st	X, r24
		}
		/*configure the CTC mode */
		if(Copy_stCfg->WFG_MODE==CTC)
    2dd0:	ea 81       	ldd	r30, Y+2	; 0x02
    2dd2:	fb 81       	ldd	r31, Y+3	; 0x03
    2dd4:	80 81       	ld	r24, Z
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <TIMER2_u8Init+0xe8>
    2dda:	5d c0       	rjmp	.+186    	; 0x2e96 <TIMER2_u8Init+0x1a2>
		{
           switch(Copy_stCfg->CTC_MODE)
    2ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dde:	fb 81       	ldd	r31, Y+3	; 0x03
    2de0:	81 81       	ldd	r24, Z+1	; 0x01
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	39 87       	std	Y+9, r19	; 0x09
    2de8:	28 87       	std	Y+8, r18	; 0x08
    2dea:	88 85       	ldd	r24, Y+8	; 0x08
    2dec:	99 85       	ldd	r25, Y+9	; 0x09
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	91 05       	cpc	r25, r1
    2df2:	21 f1       	breq	.+72     	; 0x2e3c <TIMER2_u8Init+0x148>
    2df4:	28 85       	ldd	r18, Y+8	; 0x08
    2df6:	39 85       	ldd	r19, Y+9	; 0x09
    2df8:	22 30       	cpi	r18, 0x02	; 2
    2dfa:	31 05       	cpc	r19, r1
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <TIMER2_u8Init+0x114>
    2dfe:	88 85       	ldd	r24, Y+8	; 0x08
    2e00:	99 85       	ldd	r25, Y+9	; 0x09
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	61 f0       	breq	.+24     	; 0x2e1e <TIMER2_u8Init+0x12a>
    2e06:	d7 c0       	rjmp	.+430    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
    2e08:	28 85       	ldd	r18, Y+8	; 0x08
    2e0a:	39 85       	ldd	r19, Y+9	; 0x09
    2e0c:	22 30       	cpi	r18, 0x02	; 2
    2e0e:	31 05       	cpc	r19, r1
    2e10:	21 f1       	breq	.+72     	; 0x2e5a <TIMER2_u8Init+0x166>
    2e12:	88 85       	ldd	r24, Y+8	; 0x08
    2e14:	99 85       	ldd	r25, Y+9	; 0x09
    2e16:	83 30       	cpi	r24, 0x03	; 3
    2e18:	91 05       	cpc	r25, r1
    2e1a:	71 f1       	breq	.+92     	; 0x2e78 <TIMER2_u8Init+0x184>
    2e1c:	cc c0       	rjmp	.+408    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
           {
           case NORMAL_CTC : CLR_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    2e1e:	a5 e4       	ldi	r26, 0x45	; 69
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e5 e4       	ldi	r30, 0x45	; 69
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	8f 7e       	andi	r24, 0xEF	; 239
    2e2a:	8c 93       	st	X, r24
    2e2c:	a5 e4       	ldi	r26, 0x45	; 69
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e5 e4       	ldi	r30, 0x45	; 69
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	8f 7d       	andi	r24, 0xDF	; 223
    2e38:	8c 93       	st	X, r24
    2e3a:	bd c0       	rjmp	.+378    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
           case TOG_COMP   : SET_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*toggle the pin on Compare match*/
    2e3c:	a5 e4       	ldi	r26, 0x45	; 69
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e5 e4       	ldi	r30, 0x45	; 69
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	80 61       	ori	r24, 0x10	; 16
    2e48:	8c 93       	st	X, r24
    2e4a:	a5 e4       	ldi	r26, 0x45	; 69
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e5 e4       	ldi	r30, 0x45	; 69
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	8f 7d       	andi	r24, 0xDF	; 223
    2e56:	8c 93       	st	X, r24
    2e58:	ae c0       	rjmp	.+348    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
           case CLR_COMP   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match*/
    2e5a:	a5 e4       	ldi	r26, 0x45	; 69
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	e5 e4       	ldi	r30, 0x45	; 69
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	8f 7e       	andi	r24, 0xEF	; 239
    2e66:	8c 93       	st	X, r24
    2e68:	a5 e4       	ldi	r26, 0x45	; 69
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e5 e4       	ldi	r30, 0x45	; 69
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	80 62       	ori	r24, 0x20	; 32
    2e74:	8c 93       	st	X, r24
    2e76:	9f c0       	rjmp	.+318    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
           case SET_COMP   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*set the pin on Compare match*/
    2e78:	a5 e4       	ldi	r26, 0x45	; 69
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e5 e4       	ldi	r30, 0x45	; 69
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	80 61       	ori	r24, 0x10	; 16
    2e84:	8c 93       	st	X, r24
    2e86:	a5 e4       	ldi	r26, 0x45	; 69
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e5 e4       	ldi	r30, 0x45	; 69
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 62       	ori	r24, 0x20	; 32
    2e92:	8c 93       	st	X, r24
    2e94:	90 c0       	rjmp	.+288    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
           }
		}
		else if (Copy_stCfg->WFG_MODE==FAST_PWM)
    2e96:	ea 81       	ldd	r30, Y+2	; 0x02
    2e98:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9a:	80 81       	ld	r24, Z
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <TIMER2_u8Init+0x1ae>
    2ea0:	43 c0       	rjmp	.+134    	; 0x2f28 <TIMER2_u8Init+0x234>
		{
          switch(Copy_stCfg->FASTPWM_MODE)
    2ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	3f 83       	std	Y+7, r19	; 0x07
    2eae:	2e 83       	std	Y+6, r18	; 0x06
    2eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	41 f1       	breq	.+80     	; 0x2f0a <TIMER2_u8Init+0x216>
    2eba:	2e 81       	ldd	r18, Y+6	; 0x06
    2ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    2ebe:	22 30       	cpi	r18, 0x02	; 2
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	a1 f0       	breq	.+40     	; 0x2eec <TIMER2_u8Init+0x1f8>
    2ec4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	09 f0       	breq	.+2      	; 0x2ece <TIMER2_u8Init+0x1da>
    2ecc:	74 c0       	rjmp	.+232    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          {
          case NORMAL_PWM : CLR_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    2ece:	a5 e4       	ldi	r26, 0x45	; 69
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e5 e4       	ldi	r30, 0x45	; 69
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	8f 7e       	andi	r24, 0xEF	; 239
    2eda:	8c 93       	st	X, r24
    2edc:	a5 e4       	ldi	r26, 0x45	; 69
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e5 e4       	ldi	r30, 0x45	; 69
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	8f 7d       	andi	r24, 0xDF	; 223
    2ee8:	8c 93       	st	X, r24
    2eea:	65 c0       	rjmp	.+202    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          case SET_TOP_CLR_COMP   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match set on top*/
    2eec:	a5 e4       	ldi	r26, 0x45	; 69
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e5 e4       	ldi	r30, 0x45	; 69
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	8f 7e       	andi	r24, 0xEF	; 239
    2ef8:	8c 93       	st	X, r24
    2efa:	a5 e4       	ldi	r26, 0x45	; 69
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e5 e4       	ldi	r30, 0x45	; 69
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 62       	ori	r24, 0x20	; 32
    2f06:	8c 93       	st	X, r24
    2f08:	56 c0       	rjmp	.+172    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          case CLR_TOP_SET_COMP   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*set the pin on Compare match clear on top*/
    2f0a:	a5 e4       	ldi	r26, 0x45	; 69
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e5 e4       	ldi	r30, 0x45	; 69
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	80 61       	ori	r24, 0x10	; 16
    2f16:	8c 93       	st	X, r24
    2f18:	a5 e4       	ldi	r26, 0x45	; 69
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e5 e4       	ldi	r30, 0x45	; 69
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	80 62       	ori	r24, 0x20	; 32
    2f24:	8c 93       	st	X, r24
    2f26:	47 c0       	rjmp	.+142    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          }
		}
		else if (Copy_stCfg->WFG_MODE==PHASE_CORRECT)
    2f28:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2c:	80 81       	ld	r24, Z
    2f2e:	83 30       	cpi	r24, 0x03	; 3
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <TIMER2_u8Init+0x240>
    2f32:	41 c0       	rjmp	.+130    	; 0x2fb6 <TIMER2_u8Init+0x2c2>
		{
          switch(Copy_stCfg->PHCORRECT_MODE)
    2f34:	ea 81       	ldd	r30, Y+2	; 0x02
    2f36:	fb 81       	ldd	r31, Y+3	; 0x03
    2f38:	83 81       	ldd	r24, Z+3	; 0x03
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	3d 83       	std	Y+5, r19	; 0x05
    2f40:	2c 83       	std	Y+4, r18	; 0x04
    2f42:	8c 81       	ldd	r24, Y+4	; 0x04
    2f44:	9d 81       	ldd	r25, Y+5	; 0x05
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	91 05       	cpc	r25, r1
    2f4a:	c1 f0       	breq	.+48     	; 0x2f7c <TIMER2_u8Init+0x288>
    2f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f50:	22 30       	cpi	r18, 0x02	; 2
    2f52:	31 05       	cpc	r19, r1
    2f54:	11 f1       	breq	.+68     	; 0x2f9a <TIMER2_u8Init+0x2a6>
    2f56:	8c 81       	ldd	r24, Y+4	; 0x04
    2f58:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	61 f5       	brne	.+88     	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          {
          case NORMAL_PWM : CLR_BIT(TCCR2,TCCR0_COM00);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    2f5e:	a5 e4       	ldi	r26, 0x45	; 69
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e5 e4       	ldi	r30, 0x45	; 69
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	8f 7e       	andi	r24, 0xEF	; 239
    2f6a:	8c 93       	st	X, r24
    2f6c:	a5 e4       	ldi	r26, 0x45	; 69
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e5 e4       	ldi	r30, 0x45	; 69
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	8f 7d       	andi	r24, 0xDF	; 223
    2f78:	8c 93       	st	X, r24
    2f7a:	1d c0       	rjmp	.+58     	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          case CLR_COMPUP_SET_COMPDOWN   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match up counting set on compare match down counting*/
    2f7c:	a5 e4       	ldi	r26, 0x45	; 69
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e5 e4       	ldi	r30, 0x45	; 69
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	8f 7e       	andi	r24, 0xEF	; 239
    2f88:	8c 93       	st	X, r24
    2f8a:	a5 e4       	ldi	r26, 0x45	; 69
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e5 e4       	ldi	r30, 0x45	; 69
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	80 62       	ori	r24, 0x20	; 32
    2f96:	8c 93       	st	X, r24
    2f98:	0e c0       	rjmp	.+28     	; 0x2fb6 <TIMER2_u8Init+0x2c2>
          case SET_COMPUP_CLR_COMPDOWN   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match down counting set on compare match up counting*/
    2f9a:	a5 e4       	ldi	r26, 0x45	; 69
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e5 e4       	ldi	r30, 0x45	; 69
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	80 61       	ori	r24, 0x10	; 16
    2fa6:	8c 93       	st	X, r24
    2fa8:	a5 e4       	ldi	r26, 0x45	; 69
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e5 e4       	ldi	r30, 0x45	; 69
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	80 62       	ori	r24, 0x20	; 32
    2fb4:	8c 93       	st	X, r24
          }
		}
		/*configure the presacler value*/
		TCCR2&=PRESCALERMASK;       /*Clear the prescaler bits*/
    2fb6:	a5 e4       	ldi	r26, 0x45	; 69
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e5 e4       	ldi	r30, 0x45	; 69
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	88 7f       	andi	r24, 0xF8	; 248
    2fc2:	8c 93       	st	X, r24
		TCCR2|=TIMER2_u8PRESCALER; 	   /*Select prescaler */
    2fc4:	a5 e4       	ldi	r26, 0x45	; 69
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e5 e4       	ldi	r30, 0x45	; 69
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	82 60       	ori	r24, 0x02	; 2
    2fd0:	8c 93       	st	X, r24
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <TIMER2_u8Init+0x2e4>
	}
	else
	{
		Local_u8Error_State=NULL_PTR_ERR;
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_u8Error_State;
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fda:	2b 96       	adiw	r28, 0x0b	; 11
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <TIMER2_voidPreload_Val>:
void TIMER2_voidPreload_Val(uint8 Copy_u8Val)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	0f 92       	push	r0
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Val;
    2ff8:	e4 e4       	ldi	r30, 0x44	; 68
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	80 83       	st	Z, r24

}
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <TIMER2_void_Set_CompValue>:
void TIMER2_void_Set_CompValue(uint8 Copy_u8Val)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8Val;
    3014:	e3 e4       	ldi	r30, 0x43	; 67
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	80 83       	st	Z, r24

}
    301c:	0f 90       	pop	r0
    301e:	cf 91       	pop	r28
    3020:	df 91       	pop	r29
    3022:	08 95       	ret

00003024 <TIMER2_voidSet_CTCMode>:
void TIMER2_voidSet_CTCMode(TIMER0_2_OC_MODE_t Copy_enMode)
{
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	00 d0       	rcall	.+0      	; 0x302a <TIMER2_voidSet_CTCMode+0x6>
    302a:	0f 92       	push	r0
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	3b 83       	std	Y+3, r19	; 0x03
    303a:	2a 83       	std	Y+2, r18	; 0x02
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	9b 81       	ldd	r25, Y+3	; 0x03
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	91 05       	cpc	r25, r1
    3044:	21 f1       	breq	.+72     	; 0x308e <TIMER2_voidSet_CTCMode+0x6a>
    3046:	2a 81       	ldd	r18, Y+2	; 0x02
    3048:	3b 81       	ldd	r19, Y+3	; 0x03
    304a:	22 30       	cpi	r18, 0x02	; 2
    304c:	31 05       	cpc	r19, r1
    304e:	2c f4       	brge	.+10     	; 0x305a <TIMER2_voidSet_CTCMode+0x36>
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	61 f0       	breq	.+24     	; 0x3070 <TIMER2_voidSet_CTCMode+0x4c>
    3058:	46 c0       	rjmp	.+140    	; 0x30e6 <TIMER2_voidSet_CTCMode+0xc2>
    305a:	2a 81       	ldd	r18, Y+2	; 0x02
    305c:	3b 81       	ldd	r19, Y+3	; 0x03
    305e:	22 30       	cpi	r18, 0x02	; 2
    3060:	31 05       	cpc	r19, r1
    3062:	21 f1       	breq	.+72     	; 0x30ac <TIMER2_voidSet_CTCMode+0x88>
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	83 30       	cpi	r24, 0x03	; 3
    306a:	91 05       	cpc	r25, r1
    306c:	71 f1       	breq	.+92     	; 0x30ca <TIMER2_voidSet_CTCMode+0xa6>
    306e:	3b c0       	rjmp	.+118    	; 0x30e6 <TIMER2_voidSet_CTCMode+0xc2>
	{
    case NORMAL_CTC : CLR_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    3070:	a5 e4       	ldi	r26, 0x45	; 69
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e5 e4       	ldi	r30, 0x45	; 69
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8f 7e       	andi	r24, 0xEF	; 239
    307c:	8c 93       	st	X, r24
    307e:	a5 e4       	ldi	r26, 0x45	; 69
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e5 e4       	ldi	r30, 0x45	; 69
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	8f 7d       	andi	r24, 0xDF	; 223
    308a:	8c 93       	st	X, r24
    308c:	2c c0       	rjmp	.+88     	; 0x30e6 <TIMER2_voidSet_CTCMode+0xc2>
    case TOG_COMP   : SET_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*toggle the pin on Compare match*/
    308e:	a5 e4       	ldi	r26, 0x45	; 69
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e5 e4       	ldi	r30, 0x45	; 69
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	80 61       	ori	r24, 0x10	; 16
    309a:	8c 93       	st	X, r24
    309c:	a5 e4       	ldi	r26, 0x45	; 69
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e5 e4       	ldi	r30, 0x45	; 69
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	8f 7d       	andi	r24, 0xDF	; 223
    30a8:	8c 93       	st	X, r24
    30aa:	1d c0       	rjmp	.+58     	; 0x30e6 <TIMER2_voidSet_CTCMode+0xc2>
    case CLR_COMP   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match*/
    30ac:	a5 e4       	ldi	r26, 0x45	; 69
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e5 e4       	ldi	r30, 0x45	; 69
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	8f 7e       	andi	r24, 0xEF	; 239
    30b8:	8c 93       	st	X, r24
    30ba:	a5 e4       	ldi	r26, 0x45	; 69
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e5 e4       	ldi	r30, 0x45	; 69
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	80 62       	ori	r24, 0x20	; 32
    30c6:	8c 93       	st	X, r24
    30c8:	0e c0       	rjmp	.+28     	; 0x30e6 <TIMER2_voidSet_CTCMode+0xc2>
    case SET_COMP   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*set the pin on Compare match*/
    30ca:	a5 e4       	ldi	r26, 0x45	; 69
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e5 e4       	ldi	r30, 0x45	; 69
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	80 61       	ori	r24, 0x10	; 16
    30d6:	8c 93       	st	X, r24
    30d8:	a5 e4       	ldi	r26, 0x45	; 69
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e5 e4       	ldi	r30, 0x45	; 69
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	80 62       	ori	r24, 0x20	; 32
    30e4:	8c 93       	st	X, r24
	}
}
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <TIMER2_voidSet_FastPwmMode>:
void TIMER2_voidSet_FastPwmMode(TIMER0_2_FAST_PWM_MODE_t Copy_enMode)
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <TIMER2_voidSet_FastPwmMode+0x6>
    30f8:	0f 92       	push	r0
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	3b 83       	std	Y+3, r19	; 0x03
    3108:	2a 83       	std	Y+2, r18	; 0x02
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	91 05       	cpc	r25, r1
    3112:	39 f1       	breq	.+78     	; 0x3162 <TIMER2_voidSet_FastPwmMode+0x70>
    3114:	2a 81       	ldd	r18, Y+2	; 0x02
    3116:	3b 81       	ldd	r19, Y+3	; 0x03
    3118:	22 30       	cpi	r18, 0x02	; 2
    311a:	31 05       	cpc	r19, r1
    311c:	99 f0       	breq	.+38     	; 0x3144 <TIMER2_voidSet_FastPwmMode+0x52>
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	61 f5       	brne	.+88     	; 0x317e <TIMER2_voidSet_FastPwmMode+0x8c>
	{
    case NORMAL_PWM : CLR_BIT(TCCR0,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    3126:	a3 e5       	ldi	r26, 0x53	; 83
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e3 e5       	ldi	r30, 0x53	; 83
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8f 7e       	andi	r24, 0xEF	; 239
    3132:	8c 93       	st	X, r24
    3134:	a5 e4       	ldi	r26, 0x45	; 69
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e5 e4       	ldi	r30, 0x45	; 69
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8f 7d       	andi	r24, 0xDF	; 223
    3140:	8c 93       	st	X, r24
    3142:	1d c0       	rjmp	.+58     	; 0x317e <TIMER2_voidSet_FastPwmMode+0x8c>
    case SET_TOP_CLR_COMP   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match set on top*/
    3144:	a5 e4       	ldi	r26, 0x45	; 69
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e5 e4       	ldi	r30, 0x45	; 69
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	8f 7e       	andi	r24, 0xEF	; 239
    3150:	8c 93       	st	X, r24
    3152:	a5 e4       	ldi	r26, 0x45	; 69
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e5 e4       	ldi	r30, 0x45	; 69
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	80 62       	ori	r24, 0x20	; 32
    315e:	8c 93       	st	X, r24
    3160:	0e c0       	rjmp	.+28     	; 0x317e <TIMER2_voidSet_FastPwmMode+0x8c>
    case CLR_TOP_SET_COMP   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*set the pin on Compare match clear on top*/
    3162:	a5 e4       	ldi	r26, 0x45	; 69
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e5 e4       	ldi	r30, 0x45	; 69
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	80 61       	ori	r24, 0x10	; 16
    316e:	8c 93       	st	X, r24
    3170:	a5 e4       	ldi	r26, 0x45	; 69
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e5 e4       	ldi	r30, 0x45	; 69
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	80 62       	ori	r24, 0x20	; 32
    317c:	8c 93       	st	X, r24
	}
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <TIMER2_voidSet_PHCorrectMode>:
void TIMER2_voidSet_PHCorrectMode(TIMER0_2_PHCORRECT_PWM_MODE_t Copy_enMode)
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	00 d0       	rcall	.+0      	; 0x3190 <TIMER2_voidSet_PHCorrectMode+0x6>
    3190:	0f 92       	push	r0
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_enMode)
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	3b 83       	std	Y+3, r19	; 0x03
    31a0:	2a 83       	std	Y+2, r18	; 0x02
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	9b 81       	ldd	r25, Y+3	; 0x03
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	91 05       	cpc	r25, r1
    31aa:	c1 f0       	breq	.+48     	; 0x31dc <TIMER2_voidSet_PHCorrectMode+0x52>
    31ac:	2a 81       	ldd	r18, Y+2	; 0x02
    31ae:	3b 81       	ldd	r19, Y+3	; 0x03
    31b0:	22 30       	cpi	r18, 0x02	; 2
    31b2:	31 05       	cpc	r19, r1
    31b4:	11 f1       	breq	.+68     	; 0x31fa <TIMER2_voidSet_PHCorrectMode+0x70>
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	61 f5       	brne	.+88     	; 0x3216 <TIMER2_voidSet_PHCorrectMode+0x8c>
	{
    case NORMAL_PWM : CLR_BIT(TCCR2,TCCR2_COM20);CLR_BIT(TCCR2,TCCR2_COM21);break; /*disconnect the pin*/
    31be:	a5 e4       	ldi	r26, 0x45	; 69
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e5 e4       	ldi	r30, 0x45	; 69
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 7e       	andi	r24, 0xEF	; 239
    31ca:	8c 93       	st	X, r24
    31cc:	a5 e4       	ldi	r26, 0x45	; 69
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e5 e4       	ldi	r30, 0x45	; 69
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 7d       	andi	r24, 0xDF	; 223
    31d8:	8c 93       	st	X, r24
    31da:	1d c0       	rjmp	.+58     	; 0x3216 <TIMER2_voidSet_PHCorrectMode+0x8c>
    case CLR_COMPUP_SET_COMPDOWN   : CLR_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match up counting set on compare match down counting*/
    31dc:	a5 e4       	ldi	r26, 0x45	; 69
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e5 e4       	ldi	r30, 0x45	; 69
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	8f 7e       	andi	r24, 0xEF	; 239
    31e8:	8c 93       	st	X, r24
    31ea:	a5 e4       	ldi	r26, 0x45	; 69
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e5 e4       	ldi	r30, 0x45	; 69
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	80 62       	ori	r24, 0x20	; 32
    31f6:	8c 93       	st	X, r24
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <TIMER2_voidSet_PHCorrectMode+0x8c>
    case SET_COMPUP_CLR_COMPDOWN   : SET_BIT(TCCR2,TCCR2_COM20);SET_BIT(TCCR2,TCCR2_COM21);break; /*Clear the pin on Compare match down counting set on compare match up counting*/
    31fa:	a5 e4       	ldi	r26, 0x45	; 69
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e5 e4       	ldi	r30, 0x45	; 69
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	80 61       	ori	r24, 0x10	; 16
    3206:	8c 93       	st	X, r24
    3208:	a5 e4       	ldi	r26, 0x45	; 69
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e5 e4       	ldi	r30, 0x45	; 69
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	80 62       	ori	r24, 0x20	; 32
    3214:	8c 93       	st	X, r24
	}
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <TIMER1_voidInit>:
uint8 TIMER1_voidInit(TIMER1_cfg_t *Copy_stCfg_Data)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	2b 97       	sbiw	r28, 0x0b	; 11
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	9b 83       	std	Y+3, r25	; 0x03
    3238:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
    323a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_stCfg_Data != NULL)
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	09 f4       	brne	.+2      	; 0x3246 <TIMER1_voidInit+0x24>
    3244:	5a c4       	rjmp	.+2228   	; 0x3afa <TIMER1_voidInit+0x8d8>
	{
		/*Wave form generation mode selection */
       switch(Copy_stCfg_Data->WFG_MODE)
    3246:	ea 81       	ldd	r30, Y+2	; 0x02
    3248:	fb 81       	ldd	r31, Y+3	; 0x03
    324a:	80 81       	ld	r24, Z
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	3b 87       	std	Y+11, r19	; 0x0b
    3252:	2a 87       	std	Y+10, r18	; 0x0a
    3254:	8a 85       	ldd	r24, Y+10	; 0x0a
    3256:	9b 85       	ldd	r25, Y+11	; 0x0b
    3258:	87 30       	cpi	r24, 0x07	; 7
    325a:	91 05       	cpc	r25, r1
    325c:	09 f4       	brne	.+2      	; 0x3260 <TIMER1_voidInit+0x3e>
    325e:	24 c1       	rjmp	.+584    	; 0x34a8 <TIMER1_voidInit+0x286>
    3260:	2a 85       	ldd	r18, Y+10	; 0x0a
    3262:	3b 85       	ldd	r19, Y+11	; 0x0b
    3264:	28 30       	cpi	r18, 0x08	; 8
    3266:	31 05       	cpc	r19, r1
    3268:	4c f5       	brge	.+82     	; 0x32bc <TIMER1_voidInit+0x9a>
    326a:	8a 85       	ldd	r24, Y+10	; 0x0a
    326c:	9b 85       	ldd	r25, Y+11	; 0x0b
    326e:	83 30       	cpi	r24, 0x03	; 3
    3270:	91 05       	cpc	r25, r1
    3272:	09 f4       	brne	.+2      	; 0x3276 <TIMER1_voidInit+0x54>
    3274:	a5 c0       	rjmp	.+330    	; 0x33c0 <TIMER1_voidInit+0x19e>
    3276:	2a 85       	ldd	r18, Y+10	; 0x0a
    3278:	3b 85       	ldd	r19, Y+11	; 0x0b
    327a:	24 30       	cpi	r18, 0x04	; 4
    327c:	31 05       	cpc	r19, r1
    327e:	8c f4       	brge	.+34     	; 0x32a2 <TIMER1_voidInit+0x80>
    3280:	8a 85       	ldd	r24, Y+10	; 0x0a
    3282:	9b 85       	ldd	r25, Y+11	; 0x0b
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	91 05       	cpc	r25, r1
    3288:	09 f4       	brne	.+2      	; 0x328c <TIMER1_voidInit+0x6a>
    328a:	60 c0       	rjmp	.+192    	; 0x334c <TIMER1_voidInit+0x12a>
    328c:	2a 85       	ldd	r18, Y+10	; 0x0a
    328e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3290:	22 30       	cpi	r18, 0x02	; 2
    3292:	31 05       	cpc	r19, r1
    3294:	0c f0       	brlt	.+2      	; 0x3298 <TIMER1_voidInit+0x76>
    3296:	77 c0       	rjmp	.+238    	; 0x3386 <TIMER1_voidInit+0x164>
    3298:	8a 85       	ldd	r24, Y+10	; 0x0a
    329a:	9b 85       	ldd	r25, Y+11	; 0x0b
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	c9 f1       	breq	.+114    	; 0x3312 <TIMER1_voidInit+0xf0>
    32a0:	ea c1       	rjmp	.+980    	; 0x3676 <TIMER1_voidInit+0x454>
    32a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    32a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    32a6:	25 30       	cpi	r18, 0x05	; 5
    32a8:	31 05       	cpc	r19, r1
    32aa:	09 f4       	brne	.+2      	; 0x32ae <TIMER1_voidInit+0x8c>
    32ac:	c3 c0       	rjmp	.+390    	; 0x3434 <TIMER1_voidInit+0x212>
    32ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b2:	86 30       	cpi	r24, 0x06	; 6
    32b4:	91 05       	cpc	r25, r1
    32b6:	0c f0       	brlt	.+2      	; 0x32ba <TIMER1_voidInit+0x98>
    32b8:	da c0       	rjmp	.+436    	; 0x346e <TIMER1_voidInit+0x24c>
    32ba:	9f c0       	rjmp	.+318    	; 0x33fa <TIMER1_voidInit+0x1d8>
    32bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    32be:	3b 85       	ldd	r19, Y+11	; 0x0b
    32c0:	2b 30       	cpi	r18, 0x0B	; 11
    32c2:	31 05       	cpc	r19, r1
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <TIMER1_voidInit+0xa6>
    32c6:	47 c1       	rjmp	.+654    	; 0x3556 <TIMER1_voidInit+0x334>
    32c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    32cc:	8c 30       	cpi	r24, 0x0C	; 12
    32ce:	91 05       	cpc	r25, r1
    32d0:	6c f4       	brge	.+26     	; 0x32ec <TIMER1_voidInit+0xca>
    32d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    32d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    32d6:	29 30       	cpi	r18, 0x09	; 9
    32d8:	31 05       	cpc	r19, r1
    32da:	09 f4       	brne	.+2      	; 0x32de <TIMER1_voidInit+0xbc>
    32dc:	02 c1       	rjmp	.+516    	; 0x34e2 <TIMER1_voidInit+0x2c0>
    32de:	8a 85       	ldd	r24, Y+10	; 0x0a
    32e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32e2:	8a 30       	cpi	r24, 0x0A	; 10
    32e4:	91 05       	cpc	r25, r1
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <TIMER1_voidInit+0xc8>
    32e8:	53 c1       	rjmp	.+678    	; 0x3590 <TIMER1_voidInit+0x36e>
    32ea:	18 c1       	rjmp	.+560    	; 0x351c <TIMER1_voidInit+0x2fa>
    32ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    32ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    32f0:	2d 30       	cpi	r18, 0x0D	; 13
    32f2:	31 05       	cpc	r19, r1
    32f4:	09 f4       	brne	.+2      	; 0x32f8 <TIMER1_voidInit+0xd6>
    32f6:	86 c1       	rjmp	.+780    	; 0x3604 <TIMER1_voidInit+0x3e2>
    32f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    32fc:	8d 30       	cpi	r24, 0x0D	; 13
    32fe:	91 05       	cpc	r25, r1
    3300:	0c f4       	brge	.+2      	; 0x3304 <TIMER1_voidInit+0xe2>
    3302:	63 c1       	rjmp	.+710    	; 0x35ca <TIMER1_voidInit+0x3a8>
    3304:	2a 85       	ldd	r18, Y+10	; 0x0a
    3306:	3b 85       	ldd	r19, Y+11	; 0x0b
    3308:	2e 30       	cpi	r18, 0x0E	; 14
    330a:	31 05       	cpc	r19, r1
    330c:	09 f4       	brne	.+2      	; 0x3310 <TIMER1_voidInit+0xee>
    330e:	97 c1       	rjmp	.+814    	; 0x363e <TIMER1_voidInit+0x41c>
    3310:	b2 c1       	rjmp	.+868    	; 0x3676 <TIMER1_voidInit+0x454>
       {
       case TIMER1_NORMAL_MODE :
       {
    	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3312:	af e4       	ldi	r26, 0x4F	; 79
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e4       	ldi	r30, 0x4F	; 79
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	8e 7f       	andi	r24, 0xFE	; 254
    331e:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3320:	af e4       	ldi	r26, 0x4F	; 79
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	ef e4       	ldi	r30, 0x4F	; 79
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	8d 7f       	andi	r24, 0xFD	; 253
    332c:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    332e:	ae e4       	ldi	r26, 0x4E	; 78
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	ee e4       	ldi	r30, 0x4E	; 78
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	87 7f       	andi	r24, 0xF7	; 247
    333a:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    333c:	ae e4       	ldi	r26, 0x4E	; 78
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	ee e4       	ldi	r30, 0x4E	; 78
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	8f 7e       	andi	r24, 0xEF	; 239
    3348:	8c 93       	st	X, r24
    334a:	95 c1       	rjmp	.+810    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PHCRR_8bit :
       {
    	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    334c:	af e4       	ldi	r26, 0x4F	; 79
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	ef e4       	ldi	r30, 0x4F	; 79
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	81 60       	ori	r24, 0x01	; 1
    3358:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    335a:	af e4       	ldi	r26, 0x4F	; 79
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	ef e4       	ldi	r30, 0x4F	; 79
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	8d 7f       	andi	r24, 0xFD	; 253
    3366:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3368:	ae e4       	ldi	r26, 0x4E	; 78
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	ee e4       	ldi	r30, 0x4E	; 78
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	87 7f       	andi	r24, 0xF7	; 247
    3374:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3376:	ae e4       	ldi	r26, 0x4E	; 78
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	ee e4       	ldi	r30, 0x4E	; 78
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8f 7e       	andi	r24, 0xEF	; 239
    3382:	8c 93       	st	X, r24
    3384:	78 c1       	rjmp	.+752    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PHCRR_9bit :
       {
       	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3386:	af e4       	ldi	r26, 0x4F	; 79
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	ef e4       	ldi	r30, 0x4F	; 79
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	8e 7f       	andi	r24, 0xFE	; 254
    3392:	8c 93       	st	X, r24
           SET_BIT(TCCR1A,TCCR1A_WGM11);
    3394:	af e4       	ldi	r26, 0x4F	; 79
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ef e4       	ldi	r30, 0x4F	; 79
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	82 60       	ori	r24, 0x02	; 2
    33a0:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM12);
    33a2:	ae e4       	ldi	r26, 0x4E	; 78
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	ee e4       	ldi	r30, 0x4E	; 78
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	87 7f       	andi	r24, 0xF7	; 247
    33ae:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    33b0:	ae e4       	ldi	r26, 0x4E	; 78
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	ee e4       	ldi	r30, 0x4E	; 78
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	8f 7e       	andi	r24, 0xEF	; 239
    33bc:	8c 93       	st	X, r24
    33be:	5b c1       	rjmp	.+694    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PHCRR_10bit :
       {
       	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    33c0:	af e4       	ldi	r26, 0x4F	; 79
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	ef e4       	ldi	r30, 0x4F	; 79
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	81 60       	ori	r24, 0x01	; 1
    33cc:	8c 93       	st	X, r24
           SET_BIT(TCCR1A,TCCR1A_WGM11);
    33ce:	af e4       	ldi	r26, 0x4F	; 79
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	ef e4       	ldi	r30, 0x4F	; 79
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	80 81       	ld	r24, Z
    33d8:	82 60       	ori	r24, 0x02	; 2
    33da:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM12);
    33dc:	ae e4       	ldi	r26, 0x4E	; 78
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	ee e4       	ldi	r30, 0x4E	; 78
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	80 81       	ld	r24, Z
    33e6:	87 7f       	andi	r24, 0xF7	; 247
    33e8:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    33ea:	ae e4       	ldi	r26, 0x4E	; 78
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	ee e4       	ldi	r30, 0x4E	; 78
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	8f 7e       	andi	r24, 0xEF	; 239
    33f6:	8c 93       	st	X, r24
    33f8:	3e c1       	rjmp	.+636    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_CTC_OCR1A :
       {
       	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    33fa:	af e4       	ldi	r26, 0x4F	; 79
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	ef e4       	ldi	r30, 0x4F	; 79
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	8e 7f       	andi	r24, 0xFE	; 254
    3406:	8c 93       	st	X, r24
           CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3408:	af e4       	ldi	r26, 0x4F	; 79
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	ef e4       	ldi	r30, 0x4F	; 79
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	8d 7f       	andi	r24, 0xFD	; 253
    3414:	8c 93       	st	X, r24
           SET_BIT(TCCR1B,TCCR1B_WGM12);
    3416:	ae e4       	ldi	r26, 0x4E	; 78
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	ee e4       	ldi	r30, 0x4E	; 78
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	88 60       	ori	r24, 0x08	; 8
    3422:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3424:	ae e4       	ldi	r26, 0x4E	; 78
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	ee e4       	ldi	r30, 0x4E	; 78
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	80 81       	ld	r24, Z
    342e:	8f 7e       	andi	r24, 0xEF	; 239
    3430:	8c 93       	st	X, r24
    3432:	21 c1       	rjmp	.+578    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_FAST_PWM_8bit :
       {
       	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3434:	af e4       	ldi	r26, 0x4F	; 79
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	ef e4       	ldi	r30, 0x4F	; 79
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	81 60       	ori	r24, 0x01	; 1
    3440:	8c 93       	st	X, r24
           CLR_BIT(TCCR1A,TCCR1A_WGM11);
    3442:	af e4       	ldi	r26, 0x4F	; 79
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	ef e4       	ldi	r30, 0x4F	; 79
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	8d 7f       	andi	r24, 0xFD	; 253
    344e:	8c 93       	st	X, r24
           SET_BIT(TCCR1B,TCCR1B_WGM12);
    3450:	ae e4       	ldi	r26, 0x4E	; 78
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ee e4       	ldi	r30, 0x4E	; 78
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	88 60       	ori	r24, 0x08	; 8
    345c:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    345e:	ae e4       	ldi	r26, 0x4E	; 78
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ee e4       	ldi	r30, 0x4E	; 78
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	8f 7e       	andi	r24, 0xEF	; 239
    346a:	8c 93       	st	X, r24
    346c:	04 c1       	rjmp	.+520    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_FAST_PWM_9bit :
       {
       	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    346e:	af e4       	ldi	r26, 0x4F	; 79
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	ef e4       	ldi	r30, 0x4F	; 79
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	8e 7f       	andi	r24, 0xFE	; 254
    347a:	8c 93       	st	X, r24
           SET_BIT(TCCR1A,TCCR1A_WGM11);
    347c:	af e4       	ldi	r26, 0x4F	; 79
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	ef e4       	ldi	r30, 0x4F	; 79
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	82 60       	ori	r24, 0x02	; 2
    3488:	8c 93       	st	X, r24
           SET_BIT(TCCR1B,TCCR1B_WGM12);
    348a:	ae e4       	ldi	r26, 0x4E	; 78
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	ee e4       	ldi	r30, 0x4E	; 78
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	88 60       	ori	r24, 0x08	; 8
    3496:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    3498:	ae e4       	ldi	r26, 0x4E	; 78
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	ee e4       	ldi	r30, 0x4E	; 78
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	8f 7e       	andi	r24, 0xEF	; 239
    34a4:	8c 93       	st	X, r24
    34a6:	e7 c0       	rjmp	.+462    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_FAST_PWM_10bit :
       {
       	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    34a8:	af e4       	ldi	r26, 0x4F	; 79
    34aa:	b0 e0       	ldi	r27, 0x00	; 0
    34ac:	ef e4       	ldi	r30, 0x4F	; 79
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	81 60       	ori	r24, 0x01	; 1
    34b4:	8c 93       	st	X, r24
           SET_BIT(TCCR1A,TCCR1A_WGM11);
    34b6:	af e4       	ldi	r26, 0x4F	; 79
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	ef e4       	ldi	r30, 0x4F	; 79
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	80 81       	ld	r24, Z
    34c0:	82 60       	ori	r24, 0x02	; 2
    34c2:	8c 93       	st	X, r24
           SET_BIT(TCCR1B,TCCR1B_WGM12);
    34c4:	ae e4       	ldi	r26, 0x4E	; 78
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	ee e4       	ldi	r30, 0x4E	; 78
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	88 60       	ori	r24, 0x08	; 8
    34d0:	8c 93       	st	X, r24
           CLR_BIT(TCCR1B,TCCR1B_WGM13);
    34d2:	ae e4       	ldi	r26, 0x4E	; 78
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ee e4       	ldi	r30, 0x4E	; 78
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	8f 7e       	andi	r24, 0xEF	; 239
    34de:	8c 93       	st	X, r24
    34e0:	ca c0       	rjmp	.+404    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PH_FRECRR_ICR1 :
       {
    	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    34e2:	af e4       	ldi	r26, 0x4F	; 79
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	ef e4       	ldi	r30, 0x4F	; 79
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	8e 7f       	andi	r24, 0xFE	; 254
    34ee:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    34f0:	af e4       	ldi	r26, 0x4F	; 79
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	ef e4       	ldi	r30, 0x4F	; 79
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	8d 7f       	andi	r24, 0xFD	; 253
    34fc:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    34fe:	ae e4       	ldi	r26, 0x4E	; 78
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ee e4       	ldi	r30, 0x4E	; 78
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	87 7f       	andi	r24, 0xF7	; 247
    350a:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    350c:	ae e4       	ldi	r26, 0x4E	; 78
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	ee e4       	ldi	r30, 0x4E	; 78
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	80 81       	ld	r24, Z
    3516:	80 61       	ori	r24, 0x10	; 16
    3518:	8c 93       	st	X, r24
    351a:	ad c0       	rjmp	.+346    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PH_FRECRR_OCR1A :
       {
    	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    351c:	af e4       	ldi	r26, 0x4F	; 79
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	ef e4       	ldi	r30, 0x4F	; 79
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	81 60       	ori	r24, 0x01	; 1
    3528:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    352a:	af e4       	ldi	r26, 0x4F	; 79
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	ef e4       	ldi	r30, 0x4F	; 79
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	8d 7f       	andi	r24, 0xFD	; 253
    3536:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3538:	ae e4       	ldi	r26, 0x4E	; 78
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	ee e4       	ldi	r30, 0x4E	; 78
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	87 7f       	andi	r24, 0xF7	; 247
    3544:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3546:	ae e4       	ldi	r26, 0x4E	; 78
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	ee e4       	ldi	r30, 0x4E	; 78
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	80 61       	ori	r24, 0x10	; 16
    3552:	8c 93       	st	X, r24
    3554:	90 c0       	rjmp	.+288    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PH_CRR_ICR1 :
       {
    	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3556:	af e4       	ldi	r26, 0x4F	; 79
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	ef e4       	ldi	r30, 0x4F	; 79
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	8e 7f       	andi	r24, 0xFE	; 254
    3562:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3564:	af e4       	ldi	r26, 0x4F	; 79
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	ef e4       	ldi	r30, 0x4F	; 79
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	82 60       	ori	r24, 0x02	; 2
    3570:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    3572:	ae e4       	ldi	r26, 0x4E	; 78
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ee e4       	ldi	r30, 0x4E	; 78
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	87 7f       	andi	r24, 0xF7	; 247
    357e:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3580:	ae e4       	ldi	r26, 0x4E	; 78
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	ee e4       	ldi	r30, 0x4E	; 78
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	80 61       	ori	r24, 0x10	; 16
    358c:	8c 93       	st	X, r24
    358e:	73 c0       	rjmp	.+230    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_PH_CRR_OCR1A :
       {
    	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    3590:	af e4       	ldi	r26, 0x4F	; 79
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	ef e4       	ldi	r30, 0x4F	; 79
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	81 60       	ori	r24, 0x01	; 1
    359c:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    359e:	af e4       	ldi	r26, 0x4F	; 79
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	ef e4       	ldi	r30, 0x4F	; 79
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	82 60       	ori	r24, 0x02	; 2
    35aa:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1B,TCCR1B_WGM12);
    35ac:	ae e4       	ldi	r26, 0x4E	; 78
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	ee e4       	ldi	r30, 0x4E	; 78
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	87 7f       	andi	r24, 0xF7	; 247
    35b8:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    35ba:	ae e4       	ldi	r26, 0x4E	; 78
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	ee e4       	ldi	r30, 0x4E	; 78
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	80 61       	ori	r24, 0x10	; 16
    35c6:	8c 93       	st	X, r24
    35c8:	56 c0       	rjmp	.+172    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_CTC_ICR1 :
       {
    	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    35ca:	af e4       	ldi	r26, 0x4F	; 79
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	ef e4       	ldi	r30, 0x4F	; 79
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	8e 7f       	andi	r24, 0xFE	; 254
    35d6:	8c 93       	st	X, r24
    	   CLR_BIT(TCCR1A,TCCR1A_WGM11);
    35d8:	af e4       	ldi	r26, 0x4F	; 79
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	ef e4       	ldi	r30, 0x4F	; 79
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	8d 7f       	andi	r24, 0xFD	; 253
    35e4:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    35e6:	ae e4       	ldi	r26, 0x4E	; 78
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	ee e4       	ldi	r30, 0x4E	; 78
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	88 60       	ori	r24, 0x08	; 8
    35f2:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    35f4:	ae e4       	ldi	r26, 0x4E	; 78
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	ee e4       	ldi	r30, 0x4E	; 78
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	80 61       	ori	r24, 0x10	; 16
    3600:	8c 93       	st	X, r24
    3602:	39 c0       	rjmp	.+114    	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_FAST_PWM_ICR1 :
       {
    	   CLR_BIT(TCCR1A,TCCR1A_WGM10);
    3604:	af e4       	ldi	r26, 0x4F	; 79
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	ef e4       	ldi	r30, 0x4F	; 79
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	8e 7f       	andi	r24, 0xFE	; 254
    3610:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    3612:	af e4       	ldi	r26, 0x4F	; 79
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ef e4       	ldi	r30, 0x4F	; 79
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	82 60       	ori	r24, 0x02	; 2
    361e:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    3620:	ae e4       	ldi	r26, 0x4E	; 78
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	ee e4       	ldi	r30, 0x4E	; 78
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	88 60       	ori	r24, 0x08	; 8
    362c:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    362e:	ae e4       	ldi	r26, 0x4E	; 78
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ee e4       	ldi	r30, 0x4E	; 78
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	80 61       	ori	r24, 0x10	; 16
    363a:	8c 93       	st	X, r24
    363c:	1c c0       	rjmp	.+56     	; 0x3676 <TIMER1_voidInit+0x454>
       }break;
       case TIMER1_FAST_PWM_OCR1A :
       {
    	   SET_BIT(TCCR1A,TCCR1A_WGM10);
    363e:	af e4       	ldi	r26, 0x4F	; 79
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	ef e4       	ldi	r30, 0x4F	; 79
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	81 60       	ori	r24, 0x01	; 1
    364a:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1A,TCCR1A_WGM11);
    364c:	af e4       	ldi	r26, 0x4F	; 79
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	ef e4       	ldi	r30, 0x4F	; 79
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	80 81       	ld	r24, Z
    3656:	82 60       	ori	r24, 0x02	; 2
    3658:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM12);
    365a:	ae e4       	ldi	r26, 0x4E	; 78
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	ee e4       	ldi	r30, 0x4E	; 78
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	88 60       	ori	r24, 0x08	; 8
    3666:	8c 93       	st	X, r24
    	   SET_BIT(TCCR1B,TCCR1B_WGM13);
    3668:	ae e4       	ldi	r26, 0x4E	; 78
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	ee e4       	ldi	r30, 0x4E	; 78
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	80 61       	ori	r24, 0x10	; 16
    3674:	8c 93       	st	X, r24
       }break;
       }
       if(Copy_stCfg_Data->WFG_MODE== TIMER1_NORMAL_MODE)
    3676:	ea 81       	ldd	r30, Y+2	; 0x02
    3678:	fb 81       	ldd	r31, Y+3	; 0x03
    367a:	80 81       	ld	r24, Z
    367c:	88 23       	and	r24, r24
    367e:	e9 f4       	brne	.+58     	; 0x36ba <TIMER1_voidInit+0x498>
       {
		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3680:	af e4       	ldi	r26, 0x4F	; 79
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	ef e4       	ldi	r30, 0x4F	; 79
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	8f 7b       	andi	r24, 0xBF	; 191
    368c:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    368e:	af e4       	ldi	r26, 0x4F	; 79
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	ef e4       	ldi	r30, 0x4F	; 79
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	8f 77       	andi	r24, 0x7F	; 127
    369a:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    369c:	af e4       	ldi	r26, 0x4F	; 79
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	ef e4       	ldi	r30, 0x4F	; 79
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 81       	ld	r24, Z
    36a6:	8f 7e       	andi	r24, 0xEF	; 239
    36a8:	8c 93       	st	X, r24
		   CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    36aa:	af e4       	ldi	r26, 0x4F	; 79
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	ef e4       	ldi	r30, 0x4F	; 79
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	80 81       	ld	r24, Z
    36b4:	8f 7d       	andi	r24, 0xDF	; 223
    36b6:	8c 93       	st	X, r24
    36b8:	0e c2       	rjmp	.+1052   	; 0x3ad6 <TIMER1_voidInit+0x8b4>
       }
       else if(Copy_stCfg_Data->WFG_MODE==TIMER1_CTC_ICR1 || Copy_stCfg_Data->WFG_MODE==TIMER1_CTC_OCR1A)
    36ba:	ea 81       	ldd	r30, Y+2	; 0x02
    36bc:	fb 81       	ldd	r31, Y+3	; 0x03
    36be:	80 81       	ld	r24, Z
    36c0:	8c 30       	cpi	r24, 0x0C	; 12
    36c2:	31 f0       	breq	.+12     	; 0x36d0 <TIMER1_voidInit+0x4ae>
    36c4:	ea 81       	ldd	r30, Y+2	; 0x02
    36c6:	fb 81       	ldd	r31, Y+3	; 0x03
    36c8:	80 81       	ld	r24, Z
    36ca:	84 30       	cpi	r24, 0x04	; 4
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <TIMER1_voidInit+0x4ae>
    36ce:	c8 c0       	rjmp	.+400    	; 0x3860 <TIMER1_voidInit+0x63e>
       {
    	   switch(Copy_stCfg_Data->CTC_MODE)
    36d0:	ea 81       	ldd	r30, Y+2	; 0x02
    36d2:	fb 81       	ldd	r31, Y+3	; 0x03
    36d4:	81 81       	ldd	r24, Z+1	; 0x01
    36d6:	28 2f       	mov	r18, r24
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	39 87       	std	Y+9, r19	; 0x09
    36dc:	28 87       	std	Y+8, r18	; 0x08
    36de:	88 85       	ldd	r24, Y+8	; 0x08
    36e0:	99 85       	ldd	r25, Y+9	; 0x09
    36e2:	81 30       	cpi	r24, 0x01	; 1
    36e4:	91 05       	cpc	r25, r1
    36e6:	09 f4       	brne	.+2      	; 0x36ea <TIMER1_voidInit+0x4c8>
    36e8:	40 c0       	rjmp	.+128    	; 0x376a <TIMER1_voidInit+0x548>
    36ea:	28 85       	ldd	r18, Y+8	; 0x08
    36ec:	39 85       	ldd	r19, Y+9	; 0x09
    36ee:	22 30       	cpi	r18, 0x02	; 2
    36f0:	31 05       	cpc	r19, r1
    36f2:	2c f4       	brge	.+10     	; 0x36fe <TIMER1_voidInit+0x4dc>
    36f4:	88 85       	ldd	r24, Y+8	; 0x08
    36f6:	99 85       	ldd	r25, Y+9	; 0x09
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	71 f0       	breq	.+28     	; 0x3718 <TIMER1_voidInit+0x4f6>
    36fc:	ec c1       	rjmp	.+984    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    36fe:	28 85       	ldd	r18, Y+8	; 0x08
    3700:	39 85       	ldd	r19, Y+9	; 0x09
    3702:	22 30       	cpi	r18, 0x02	; 2
    3704:	31 05       	cpc	r19, r1
    3706:	09 f4       	brne	.+2      	; 0x370a <TIMER1_voidInit+0x4e8>
    3708:	59 c0       	rjmp	.+178    	; 0x37bc <TIMER1_voidInit+0x59a>
    370a:	88 85       	ldd	r24, Y+8	; 0x08
    370c:	99 85       	ldd	r25, Y+9	; 0x09
    370e:	83 30       	cpi	r24, 0x03	; 3
    3710:	91 05       	cpc	r25, r1
    3712:	09 f4       	brne	.+2      	; 0x3716 <TIMER1_voidInit+0x4f4>
    3714:	7c c0       	rjmp	.+248    	; 0x380e <TIMER1_voidInit+0x5ec>
    3716:	df c1       	rjmp	.+958    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    	   {
    	   case TIMER1_NORMAL_CTC :  /*Disconnect the Pins OC1A,OC1B*/
    	   {
    		   if (Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    3718:	ea 81       	ldd	r30, Y+2	; 0x02
    371a:	fb 81       	ldd	r31, Y+3	; 0x03
    371c:	84 81       	ldd	r24, Z+4	; 0x04
    371e:	88 23       	and	r24, r24
    3720:	79 f4       	brne	.+30     	; 0x3740 <TIMER1_voidInit+0x51e>
    		   {
        		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3722:	af e4       	ldi	r26, 0x4F	; 79
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	ef e4       	ldi	r30, 0x4F	; 79
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	8f 7b       	andi	r24, 0xBF	; 191
    372e:	8c 93       	st	X, r24
        		   CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3730:	af e4       	ldi	r26, 0x4F	; 79
    3732:	b0 e0       	ldi	r27, 0x00	; 0
    3734:	ef e4       	ldi	r30, 0x4F	; 79
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	80 81       	ld	r24, Z
    373a:	8f 77       	andi	r24, 0x7F	; 127
    373c:	8c 93       	st	X, r24
    373e:	cb c1       	rjmp	.+918    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    		   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3740:	ea 81       	ldd	r30, Y+2	; 0x02
    3742:	fb 81       	ldd	r31, Y+3	; 0x03
    3744:	84 81       	ldd	r24, Z+4	; 0x04
    3746:	81 30       	cpi	r24, 0x01	; 1
    3748:	09 f0       	breq	.+2      	; 0x374c <TIMER1_voidInit+0x52a>
    374a:	c5 c1       	rjmp	.+906    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   {
        		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    374c:	af e4       	ldi	r26, 0x4F	; 79
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	ef e4       	ldi	r30, 0x4F	; 79
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	8f 7e       	andi	r24, 0xEF	; 239
    3758:	8c 93       	st	X, r24
        		   CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    375a:	af e4       	ldi	r26, 0x4F	; 79
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	ef e4       	ldi	r30, 0x4F	; 79
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	80 81       	ld	r24, Z
    3764:	8f 7d       	andi	r24, 0xDF	; 223
    3766:	8c 93       	st	X, r24
    3768:	b6 c1       	rjmp	.+876    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    	   }break;
    	   case TIMER1_TOG_COMP :   /*Toggle the Pins OC1A,OC1B*/
    	   {
    		   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    376a:	ea 81       	ldd	r30, Y+2	; 0x02
    376c:	fb 81       	ldd	r31, Y+3	; 0x03
    376e:	84 81       	ldd	r24, Z+4	; 0x04
    3770:	88 23       	and	r24, r24
    3772:	79 f4       	brne	.+30     	; 0x3792 <TIMER1_voidInit+0x570>
    		   {
        		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3774:	af e4       	ldi	r26, 0x4F	; 79
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	ef e4       	ldi	r30, 0x4F	; 79
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	80 64       	ori	r24, 0x40	; 64
    3780:	8c 93       	st	X, r24
        		   CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3782:	af e4       	ldi	r26, 0x4F	; 79
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	ef e4       	ldi	r30, 0x4F	; 79
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	8f 77       	andi	r24, 0x7F	; 127
    378e:	8c 93       	st	X, r24
    3790:	a2 c1       	rjmp	.+836    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    		   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3792:	ea 81       	ldd	r30, Y+2	; 0x02
    3794:	fb 81       	ldd	r31, Y+3	; 0x03
    3796:	84 81       	ldd	r24, Z+4	; 0x04
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	09 f0       	breq	.+2      	; 0x379e <TIMER1_voidInit+0x57c>
    379c:	9c c1       	rjmp	.+824    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   {
        		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    379e:	af e4       	ldi	r26, 0x4F	; 79
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	ef e4       	ldi	r30, 0x4F	; 79
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	80 61       	ori	r24, 0x10	; 16
    37aa:	8c 93       	st	X, r24
        		   CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    37ac:	af e4       	ldi	r26, 0x4F	; 79
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ef e4       	ldi	r30, 0x4F	; 79
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	8f 7d       	andi	r24, 0xDF	; 223
    37b8:	8c 93       	st	X, r24
    37ba:	8d c1       	rjmp	.+794    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    	   }break;
    	   case TIMER1_CLR_COMP :   /*Clear the Pins OC1A,OC1B*/
    	   {
    		   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    37bc:	ea 81       	ldd	r30, Y+2	; 0x02
    37be:	fb 81       	ldd	r31, Y+3	; 0x03
    37c0:	84 81       	ldd	r24, Z+4	; 0x04
    37c2:	88 23       	and	r24, r24
    37c4:	79 f4       	brne	.+30     	; 0x37e4 <TIMER1_voidInit+0x5c2>
    		   {
        		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    37c6:	af e4       	ldi	r26, 0x4F	; 79
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	ef e4       	ldi	r30, 0x4F	; 79
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	8f 7b       	andi	r24, 0xBF	; 191
    37d2:	8c 93       	st	X, r24
        		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    37d4:	af e4       	ldi	r26, 0x4F	; 79
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	ef e4       	ldi	r30, 0x4F	; 79
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	80 68       	ori	r24, 0x80	; 128
    37e0:	8c 93       	st	X, r24
    37e2:	79 c1       	rjmp	.+754    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    		   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    37e4:	ea 81       	ldd	r30, Y+2	; 0x02
    37e6:	fb 81       	ldd	r31, Y+3	; 0x03
    37e8:	84 81       	ldd	r24, Z+4	; 0x04
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	09 f0       	breq	.+2      	; 0x37f0 <TIMER1_voidInit+0x5ce>
    37ee:	73 c1       	rjmp	.+742    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   {
        		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    37f0:	af e4       	ldi	r26, 0x4F	; 79
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ef e4       	ldi	r30, 0x4F	; 79
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	8f 7e       	andi	r24, 0xEF	; 239
    37fc:	8c 93       	st	X, r24
        		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    37fe:	af e4       	ldi	r26, 0x4F	; 79
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	ef e4       	ldi	r30, 0x4F	; 79
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	80 62       	ori	r24, 0x20	; 32
    380a:	8c 93       	st	X, r24
    380c:	64 c1       	rjmp	.+712    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    	   }break;
    	   case TIMER1_SET_COMP :   /*Set the Pins OC1A,OC1B*/
    	   {
    		   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    380e:	ea 81       	ldd	r30, Y+2	; 0x02
    3810:	fb 81       	ldd	r31, Y+3	; 0x03
    3812:	84 81       	ldd	r24, Z+4	; 0x04
    3814:	88 23       	and	r24, r24
    3816:	79 f4       	brne	.+30     	; 0x3836 <TIMER1_voidInit+0x614>
    		   {
        		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3818:	af e4       	ldi	r26, 0x4F	; 79
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	ef e4       	ldi	r30, 0x4F	; 79
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	80 64       	ori	r24, 0x40	; 64
    3824:	8c 93       	st	X, r24
        		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3826:	af e4       	ldi	r26, 0x4F	; 79
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	ef e4       	ldi	r30, 0x4F	; 79
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	80 68       	ori	r24, 0x80	; 128
    3832:	8c 93       	st	X, r24
    3834:	50 c1       	rjmp	.+672    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    		   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3836:	ea 81       	ldd	r30, Y+2	; 0x02
    3838:	fb 81       	ldd	r31, Y+3	; 0x03
    383a:	84 81       	ldd	r24, Z+4	; 0x04
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	09 f0       	breq	.+2      	; 0x3842 <TIMER1_voidInit+0x620>
    3840:	4a c1       	rjmp	.+660    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   {
        		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3842:	af e4       	ldi	r26, 0x4F	; 79
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	ef e4       	ldi	r30, 0x4F	; 79
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	80 61       	ori	r24, 0x10	; 16
    384e:	8c 93       	st	X, r24
        		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3850:	af e4       	ldi	r26, 0x4F	; 79
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	ef e4       	ldi	r30, 0x4F	; 79
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	80 62       	ori	r24, 0x20	; 32
    385c:	8c 93       	st	X, r24
    385e:	3b c1       	rjmp	.+630    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
    		   }
    	   }break;
    	   }
       }
       else if(Copy_stCfg_Data->WFG_MODE==TIMER1_FAST_PWM_10bit || Copy_stCfg_Data->WFG_MODE==TIMER1_FAST_PWM_8bit || Copy_stCfg_Data->WFG_MODE==TIMER1_FAST_PWM_9bit ||Copy_stCfg_Data->WFG_MODE==TIMER1_FAST_PWM_ICR1 ||Copy_stCfg_Data->WFG_MODE==TIMER1_FAST_PWM_OCR1A
    3860:	ea 81       	ldd	r30, Y+2	; 0x02
    3862:	fb 81       	ldd	r31, Y+3	; 0x03
    3864:	80 81       	ld	r24, Z
    3866:	87 30       	cpi	r24, 0x07	; 7
    3868:	a9 f0       	breq	.+42     	; 0x3894 <TIMER1_voidInit+0x672>
    386a:	ea 81       	ldd	r30, Y+2	; 0x02
    386c:	fb 81       	ldd	r31, Y+3	; 0x03
    386e:	80 81       	ld	r24, Z
    3870:	85 30       	cpi	r24, 0x05	; 5
    3872:	81 f0       	breq	.+32     	; 0x3894 <TIMER1_voidInit+0x672>
    3874:	ea 81       	ldd	r30, Y+2	; 0x02
    3876:	fb 81       	ldd	r31, Y+3	; 0x03
    3878:	80 81       	ld	r24, Z
    387a:	86 30       	cpi	r24, 0x06	; 6
    387c:	59 f0       	breq	.+22     	; 0x3894 <TIMER1_voidInit+0x672>
    387e:	ea 81       	ldd	r30, Y+2	; 0x02
    3880:	fb 81       	ldd	r31, Y+3	; 0x03
    3882:	80 81       	ld	r24, Z
    3884:	8d 30       	cpi	r24, 0x0D	; 13
    3886:	31 f0       	breq	.+12     	; 0x3894 <TIMER1_voidInit+0x672>
    3888:	ea 81       	ldd	r30, Y+2	; 0x02
    388a:	fb 81       	ldd	r31, Y+3	; 0x03
    388c:	80 81       	ld	r24, Z
    388e:	8e 30       	cpi	r24, 0x0E	; 14
    3890:	09 f0       	breq	.+2      	; 0x3894 <TIMER1_voidInit+0x672>
    3892:	92 c0       	rjmp	.+292    	; 0x39b8 <TIMER1_voidInit+0x796>
    		   )
       {
          switch(Copy_stCfg_Data->FASTPWN_MODE)
    3894:	ea 81       	ldd	r30, Y+2	; 0x02
    3896:	fb 81       	ldd	r31, Y+3	; 0x03
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	28 2f       	mov	r18, r24
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	3f 83       	std	Y+7, r19	; 0x07
    38a0:	2e 83       	std	Y+6, r18	; 0x06
    38a2:	8e 81       	ldd	r24, Y+6	; 0x06
    38a4:	9f 81       	ldd	r25, Y+7	; 0x07
    38a6:	81 30       	cpi	r24, 0x01	; 1
    38a8:	91 05       	cpc	r25, r1
    38aa:	09 f4       	brne	.+2      	; 0x38ae <TIMER1_voidInit+0x68c>
    38ac:	5c c0       	rjmp	.+184    	; 0x3966 <TIMER1_voidInit+0x744>
    38ae:	2e 81       	ldd	r18, Y+6	; 0x06
    38b0:	3f 81       	ldd	r19, Y+7	; 0x07
    38b2:	22 30       	cpi	r18, 0x02	; 2
    38b4:	31 05       	cpc	r19, r1
    38b6:	71 f1       	breq	.+92     	; 0x3914 <TIMER1_voidInit+0x6f2>
    38b8:	8e 81       	ldd	r24, Y+6	; 0x06
    38ba:	9f 81       	ldd	r25, Y+7	; 0x07
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	09 f0       	breq	.+2      	; 0x38c2 <TIMER1_voidInit+0x6a0>
    38c0:	0a c1       	rjmp	.+532    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
          {
          case TIMER1_NORMAL_PWM :
          {
        	 if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    38c2:	ea 81       	ldd	r30, Y+2	; 0x02
    38c4:	fb 81       	ldd	r31, Y+3	; 0x03
    38c6:	84 81       	ldd	r24, Z+4	; 0x04
    38c8:	88 23       	and	r24, r24
    38ca:	79 f4       	brne	.+30     	; 0x38ea <TIMER1_voidInit+0x6c8>
        	 {
       		     CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    38cc:	af e4       	ldi	r26, 0x4F	; 79
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	ef e4       	ldi	r30, 0x4F	; 79
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	8f 7b       	andi	r24, 0xBF	; 191
    38d8:	8c 93       	st	X, r24
       		     CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    38da:	af e4       	ldi	r26, 0x4F	; 79
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	ef e4       	ldi	r30, 0x4F	; 79
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	8f 77       	andi	r24, 0x7F	; 127
    38e6:	8c 93       	st	X, r24
    38e8:	f6 c0       	rjmp	.+492    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	 }
        	 else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    38ea:	ea 81       	ldd	r30, Y+2	; 0x02
    38ec:	fb 81       	ldd	r31, Y+3	; 0x03
    38ee:	84 81       	ldd	r24, Z+4	; 0x04
    38f0:	81 30       	cpi	r24, 0x01	; 1
    38f2:	09 f0       	breq	.+2      	; 0x38f6 <TIMER1_voidInit+0x6d4>
    38f4:	f0 c0       	rjmp	.+480    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	 {
       		     CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    38f6:	af e4       	ldi	r26, 0x4F	; 79
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	ef e4       	ldi	r30, 0x4F	; 79
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	8f 7e       	andi	r24, 0xEF	; 239
    3902:	8c 93       	st	X, r24
       		     CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3904:	af e4       	ldi	r26, 0x4F	; 79
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	ef e4       	ldi	r30, 0x4F	; 79
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	8f 7d       	andi	r24, 0xDF	; 223
    3910:	8c 93       	st	X, r24
    3912:	e1 c0       	rjmp	.+450    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	 }
          }break;
          case TIMER1_SET_TOP_CLR_COMP :
          {
           if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    3914:	ea 81       	ldd	r30, Y+2	; 0x02
    3916:	fb 81       	ldd	r31, Y+3	; 0x03
    3918:	84 81       	ldd	r24, Z+4	; 0x04
    391a:	88 23       	and	r24, r24
    391c:	79 f4       	brne	.+30     	; 0x393c <TIMER1_voidInit+0x71a>
           {
       		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    391e:	af e4       	ldi	r26, 0x4F	; 79
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	ef e4       	ldi	r30, 0x4F	; 79
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	8f 7b       	andi	r24, 0xBF	; 191
    392a:	8c 93       	st	X, r24
       		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    392c:	af e4       	ldi	r26, 0x4F	; 79
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	ef e4       	ldi	r30, 0x4F	; 79
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	80 68       	ori	r24, 0x80	; 128
    3938:	8c 93       	st	X, r24
    393a:	cd c0       	rjmp	.+410    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           }
           else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    393c:	ea 81       	ldd	r30, Y+2	; 0x02
    393e:	fb 81       	ldd	r31, Y+3	; 0x03
    3940:	84 81       	ldd	r24, Z+4	; 0x04
    3942:	81 30       	cpi	r24, 0x01	; 1
    3944:	09 f0       	breq	.+2      	; 0x3948 <TIMER1_voidInit+0x726>
    3946:	c7 c0       	rjmp	.+398    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           {
       		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3948:	af e4       	ldi	r26, 0x4F	; 79
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	ef e4       	ldi	r30, 0x4F	; 79
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	80 81       	ld	r24, Z
    3952:	8f 7e       	andi	r24, 0xEF	; 239
    3954:	8c 93       	st	X, r24
       		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3956:	af e4       	ldi	r26, 0x4F	; 79
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	ef e4       	ldi	r30, 0x4F	; 79
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 62       	ori	r24, 0x20	; 32
    3962:	8c 93       	st	X, r24
    3964:	b8 c0       	rjmp	.+368    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           }
          }break;
          case TIMER1_CLR_TOP_SET_COMP :
          {
           if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    3966:	ea 81       	ldd	r30, Y+2	; 0x02
    3968:	fb 81       	ldd	r31, Y+3	; 0x03
    396a:	84 81       	ldd	r24, Z+4	; 0x04
    396c:	88 23       	and	r24, r24
    396e:	79 f4       	brne	.+30     	; 0x398e <TIMER1_voidInit+0x76c>
           {
       		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3970:	af e4       	ldi	r26, 0x4F	; 79
    3972:	b0 e0       	ldi	r27, 0x00	; 0
    3974:	ef e4       	ldi	r30, 0x4F	; 79
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	80 64       	ori	r24, 0x40	; 64
    397c:	8c 93       	st	X, r24
       		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    397e:	af e4       	ldi	r26, 0x4F	; 79
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	ef e4       	ldi	r30, 0x4F	; 79
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	80 68       	ori	r24, 0x80	; 128
    398a:	8c 93       	st	X, r24
    398c:	a4 c0       	rjmp	.+328    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           }
           else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    398e:	ea 81       	ldd	r30, Y+2	; 0x02
    3990:	fb 81       	ldd	r31, Y+3	; 0x03
    3992:	84 81       	ldd	r24, Z+4	; 0x04
    3994:	81 30       	cpi	r24, 0x01	; 1
    3996:	09 f0       	breq	.+2      	; 0x399a <TIMER1_voidInit+0x778>
    3998:	9e c0       	rjmp	.+316    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           {
       		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    399a:	af e4       	ldi	r26, 0x4F	; 79
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	ef e4       	ldi	r30, 0x4F	; 79
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	80 61       	ori	r24, 0x10	; 16
    39a6:	8c 93       	st	X, r24
       		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    39a8:	af e4       	ldi	r26, 0x4F	; 79
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	ef e4       	ldi	r30, 0x4F	; 79
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	80 81       	ld	r24, Z
    39b2:	80 62       	ori	r24, 0x20	; 32
    39b4:	8c 93       	st	X, r24
    39b6:	8f c0       	rjmp	.+286    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
          }break;
          }
       }
       else
       {
           switch(Copy_stCfg_Data->PHCORR_MODE)
    39b8:	ea 81       	ldd	r30, Y+2	; 0x02
    39ba:	fb 81       	ldd	r31, Y+3	; 0x03
    39bc:	83 81       	ldd	r24, Z+3	; 0x03
    39be:	28 2f       	mov	r18, r24
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	3d 83       	std	Y+5, r19	; 0x05
    39c4:	2c 83       	std	Y+4, r18	; 0x04
    39c6:	8c 81       	ldd	r24, Y+4	; 0x04
    39c8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	91 05       	cpc	r25, r1
    39ce:	a1 f1       	breq	.+104    	; 0x3a38 <TIMER1_voidInit+0x816>
    39d0:	2c 81       	ldd	r18, Y+4	; 0x04
    39d2:	3d 81       	ldd	r19, Y+5	; 0x05
    39d4:	22 30       	cpi	r18, 0x02	; 2
    39d6:	31 05       	cpc	r19, r1
    39d8:	09 f4       	brne	.+2      	; 0x39dc <TIMER1_voidInit+0x7ba>
    39da:	56 c0       	rjmp	.+172    	; 0x3a88 <TIMER1_voidInit+0x866>
    39dc:	8c 81       	ldd	r24, Y+4	; 0x04
    39de:	9d 81       	ldd	r25, Y+5	; 0x05
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <TIMER1_voidInit+0x7c4>
    39e4:	78 c0       	rjmp	.+240    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
           {
           case TIMER1_NORMAL_PHCORRECT :
           {
        	   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    39e6:	ea 81       	ldd	r30, Y+2	; 0x02
    39e8:	fb 81       	ldd	r31, Y+3	; 0x03
    39ea:	84 81       	ldd	r24, Z+4	; 0x04
    39ec:	88 23       	and	r24, r24
    39ee:	79 f4       	brne	.+30     	; 0x3a0e <TIMER1_voidInit+0x7ec>
        	   {
       		     CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    39f0:	af e4       	ldi	r26, 0x4F	; 79
    39f2:	b0 e0       	ldi	r27, 0x00	; 0
    39f4:	ef e4       	ldi	r30, 0x4F	; 79
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	80 81       	ld	r24, Z
    39fa:	8f 7b       	andi	r24, 0xBF	; 191
    39fc:	8c 93       	st	X, r24
       		     CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    39fe:	af e4       	ldi	r26, 0x4F	; 79
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	ef e4       	ldi	r30, 0x4F	; 79
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	8f 77       	andi	r24, 0x7F	; 127
    3a0a:	8c 93       	st	X, r24
    3a0c:	64 c0       	rjmp	.+200    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   }
        	   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3a0e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a10:	fb 81       	ldd	r31, Y+3	; 0x03
    3a12:	84 81       	ldd	r24, Z+4	; 0x04
    3a14:	81 30       	cpi	r24, 0x01	; 1
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <TIMER1_voidInit+0x7f8>
    3a18:	5e c0       	rjmp	.+188    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   {
       		     CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3a1a:	af e4       	ldi	r26, 0x4F	; 79
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	ef e4       	ldi	r30, 0x4F	; 79
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	80 81       	ld	r24, Z
    3a24:	8f 7e       	andi	r24, 0xEF	; 239
    3a26:	8c 93       	st	X, r24
       		     CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3a28:	af e4       	ldi	r26, 0x4F	; 79
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	ef e4       	ldi	r30, 0x4F	; 79
    3a2e:	f0 e0       	ldi	r31, 0x00	; 0
    3a30:	80 81       	ld	r24, Z
    3a32:	8f 7d       	andi	r24, 0xDF	; 223
    3a34:	8c 93       	st	X, r24
    3a36:	4f c0       	rjmp	.+158    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   }
           }break;
           case TIMER1_CLR_COMPUP_SET_COMPDOWN :
           {
        	   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    3a38:	ea 81       	ldd	r30, Y+2	; 0x02
    3a3a:	fb 81       	ldd	r31, Y+3	; 0x03
    3a3c:	84 81       	ldd	r24, Z+4	; 0x04
    3a3e:	88 23       	and	r24, r24
    3a40:	79 f4       	brne	.+30     	; 0x3a60 <TIMER1_voidInit+0x83e>
        	   {
           		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3a42:	af e4       	ldi	r26, 0x4F	; 79
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	ef e4       	ldi	r30, 0x4F	; 79
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	80 81       	ld	r24, Z
    3a4c:	8f 7b       	andi	r24, 0xBF	; 191
    3a4e:	8c 93       	st	X, r24
           		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3a50:	af e4       	ldi	r26, 0x4F	; 79
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	ef e4       	ldi	r30, 0x4F	; 79
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	80 68       	ori	r24, 0x80	; 128
    3a5c:	8c 93       	st	X, r24
    3a5e:	3b c0       	rjmp	.+118    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   }
        	   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3a60:	ea 81       	ldd	r30, Y+2	; 0x02
    3a62:	fb 81       	ldd	r31, Y+3	; 0x03
    3a64:	84 81       	ldd	r24, Z+4	; 0x04
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	b1 f5       	brne	.+108    	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   {
           		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3a6a:	af e4       	ldi	r26, 0x4F	; 79
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	ef e4       	ldi	r30, 0x4F	; 79
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	8f 7e       	andi	r24, 0xEF	; 239
    3a76:	8c 93       	st	X, r24
           		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3a78:	af e4       	ldi	r26, 0x4F	; 79
    3a7a:	b0 e0       	ldi	r27, 0x00	; 0
    3a7c:	ef e4       	ldi	r30, 0x4F	; 79
    3a7e:	f0 e0       	ldi	r31, 0x00	; 0
    3a80:	80 81       	ld	r24, Z
    3a82:	80 62       	ori	r24, 0x20	; 32
    3a84:	8c 93       	st	X, r24
    3a86:	27 c0       	rjmp	.+78     	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   }
           }break;
           case TIMER1_SET_COMPUP_CLR_COMPDOWN :
           {
        	   if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_A)
    3a88:	ea 81       	ldd	r30, Y+2	; 0x02
    3a8a:	fb 81       	ldd	r31, Y+3	; 0x03
    3a8c:	84 81       	ldd	r24, Z+4	; 0x04
    3a8e:	88 23       	and	r24, r24
    3a90:	79 f4       	brne	.+30     	; 0x3ab0 <TIMER1_voidInit+0x88e>
        	   {
           		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3a92:	af e4       	ldi	r26, 0x4F	; 79
    3a94:	b0 e0       	ldi	r27, 0x00	; 0
    3a96:	ef e4       	ldi	r30, 0x4F	; 79
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	80 64       	ori	r24, 0x40	; 64
    3a9e:	8c 93       	st	X, r24
           		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3aa0:	af e4       	ldi	r26, 0x4F	; 79
    3aa2:	b0 e0       	ldi	r27, 0x00	; 0
    3aa4:	ef e4       	ldi	r30, 0x4F	; 79
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 81       	ld	r24, Z
    3aaa:	80 68       	ori	r24, 0x80	; 128
    3aac:	8c 93       	st	X, r24
    3aae:	13 c0       	rjmp	.+38     	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   }
        	   else if(Copy_stCfg_Data->CHANNEL==TIMER1_CHANNEL_B)
    3ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ab4:	84 81       	ldd	r24, Z+4	; 0x04
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	71 f4       	brne	.+28     	; 0x3ad6 <TIMER1_voidInit+0x8b4>
        	   {
           		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3aba:	af e4       	ldi	r26, 0x4F	; 79
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	ef e4       	ldi	r30, 0x4F	; 79
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	80 61       	ori	r24, 0x10	; 16
    3ac6:	8c 93       	st	X, r24
           		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3ac8:	af e4       	ldi	r26, 0x4F	; 79
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	ef e4       	ldi	r30, 0x4F	; 79
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	80 62       	ori	r24, 0x20	; 32
    3ad4:	8c 93       	st	X, r24
        	   }
           }break;
           }
       }
   	/*clear the prescaler bits*/
   	TCCR1B &= PRESCALERMASK;
    3ad6:	ae e4       	ldi	r26, 0x4E	; 78
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	ee e4       	ldi	r30, 0x4E	; 78
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	88 7f       	andi	r24, 0xF8	; 248
    3ae2:	8c 93       	st	X, r24
   	/*select the prescaler*/
   	TCCR1B |= TIMER1_u8PRESCALER;
    3ae4:	ae e4       	ldi	r26, 0x4E	; 78
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	ee e4       	ldi	r30, 0x4E	; 78
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	82 60       	ori	r24, 0x02	; 2
    3af0:	8c 93       	st	X, r24
   	Global_u8Timer1Prescaler=TIMER1_u8PRESCALER;
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	80 93 3e 02 	sts	0x023E, r24
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <TIMER1_voidInit+0x8dc>
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_u8ErrorState;
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b00:	2b 96       	adiw	r28, 0x0b	; 11
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <TIMER1_voidSet_CTCMode>:
void TIMER1_voidSet_CTCMode(TIMER1_OC_MODE_t Copy_enMode,TIMER1_CHANNEL_t Copy_enChannel)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	00 d0       	rcall	.+0      	; 0x3b18 <TIMER1_voidSet_CTCMode+0x6>
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <TIMER1_voidSet_CTCMode+0x8>
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	6a 83       	std	Y+2, r22	; 0x02
	   switch(Copy_enMode)
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	3c 83       	std	Y+4, r19	; 0x04
    3b2a:	2b 83       	std	Y+3, r18	; 0x03
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	91 05       	cpc	r25, r1
    3b34:	e1 f1       	breq	.+120    	; 0x3bae <TIMER1_voidSet_CTCMode+0x9c>
    3b36:	2b 81       	ldd	r18, Y+3	; 0x03
    3b38:	3c 81       	ldd	r19, Y+4	; 0x04
    3b3a:	22 30       	cpi	r18, 0x02	; 2
    3b3c:	31 05       	cpc	r19, r1
    3b3e:	2c f4       	brge	.+10     	; 0x3b4a <TIMER1_voidSet_CTCMode+0x38>
    3b40:	8b 81       	ldd	r24, Y+3	; 0x03
    3b42:	9c 81       	ldd	r25, Y+4	; 0x04
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	71 f0       	breq	.+28     	; 0x3b64 <TIMER1_voidSet_CTCMode+0x52>
    3b48:	9e c0       	rjmp	.+316    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
    3b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b4e:	22 30       	cpi	r18, 0x02	; 2
    3b50:	31 05       	cpc	r19, r1
    3b52:	09 f4       	brne	.+2      	; 0x3b56 <TIMER1_voidSet_CTCMode+0x44>
    3b54:	51 c0       	rjmp	.+162    	; 0x3bf8 <TIMER1_voidSet_CTCMode+0xe6>
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5a:	83 30       	cpi	r24, 0x03	; 3
    3b5c:	91 05       	cpc	r25, r1
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <TIMER1_voidSet_CTCMode+0x50>
    3b60:	6f c0       	rjmp	.+222    	; 0x3c40 <TIMER1_voidSet_CTCMode+0x12e>
    3b62:	91 c0       	rjmp	.+290    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	   {
	   case TIMER1_NORMAL_CTC :  /*Disconnect the Pins OC1A,OC1B*/
	   {
	    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3b64:	8a 81       	ldd	r24, Y+2	; 0x02
    3b66:	88 23       	and	r24, r24
    3b68:	79 f4       	brne	.+30     	; 0x3b88 <TIMER1_voidSet_CTCMode+0x76>
	    	{
			     CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3b6a:	af e4       	ldi	r26, 0x4F	; 79
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	ef e4       	ldi	r30, 0x4F	; 79
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	8f 7b       	andi	r24, 0xBF	; 191
    3b76:	8c 93       	st	X, r24
			     CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3b78:	af e4       	ldi	r26, 0x4F	; 79
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	ef e4       	ldi	r30, 0x4F	; 79
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	8f 77       	andi	r24, 0x7F	; 127
    3b84:	8c 93       	st	X, r24
    3b86:	7f c0       	rjmp	.+254    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	}
	    	else if (Copy_enChannel == TIMER1_CHANNEL_B)
    3b88:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8a:	81 30       	cpi	r24, 0x01	; 1
    3b8c:	09 f0       	breq	.+2      	; 0x3b90 <TIMER1_voidSet_CTCMode+0x7e>
    3b8e:	7b c0       	rjmp	.+246    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	{
			     CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3b90:	af e4       	ldi	r26, 0x4F	; 79
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	ef e4       	ldi	r30, 0x4F	; 79
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	8f 7e       	andi	r24, 0xEF	; 239
    3b9c:	8c 93       	st	X, r24
			     CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3b9e:	af e4       	ldi	r26, 0x4F	; 79
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	ef e4       	ldi	r30, 0x4F	; 79
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	8f 7d       	andi	r24, 0xDF	; 223
    3baa:	8c 93       	st	X, r24
    3bac:	6c c0       	rjmp	.+216    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	}
	   }break;
	   case TIMER1_TOG_COMP :   /*Toggle the Pins OC1A,OC1B*/
	   {
		   if(Copy_enChannel == TIMER1_CHANNEL_A)
    3bae:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb0:	88 23       	and	r24, r24
    3bb2:	79 f4       	brne	.+30     	; 0x3bd2 <TIMER1_voidSet_CTCMode+0xc0>
		   {
			   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3bb4:	af e4       	ldi	r26, 0x4F	; 79
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	ef e4       	ldi	r30, 0x4F	; 79
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	80 64       	ori	r24, 0x40	; 64
    3bc0:	8c 93       	st	X, r24
			   CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3bc2:	af e4       	ldi	r26, 0x4F	; 79
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	ef e4       	ldi	r30, 0x4F	; 79
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	80 81       	ld	r24, Z
    3bcc:	8f 77       	andi	r24, 0x7F	; 127
    3bce:	8c 93       	st	X, r24
    3bd0:	5a c0       	rjmp	.+180    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
		   }
		   else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	81 30       	cpi	r24, 0x01	; 1
    3bd6:	09 f0       	breq	.+2      	; 0x3bda <TIMER1_voidSet_CTCMode+0xc8>
    3bd8:	56 c0       	rjmp	.+172    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
		   {
			   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3bda:	af e4       	ldi	r26, 0x4F	; 79
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	ef e4       	ldi	r30, 0x4F	; 79
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	80 61       	ori	r24, 0x10	; 16
    3be6:	8c 93       	st	X, r24
			   CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3be8:	af e4       	ldi	r26, 0x4F	; 79
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	ef e4       	ldi	r30, 0x4F	; 79
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	8f 7d       	andi	r24, 0xDF	; 223
    3bf4:	8c 93       	st	X, r24
    3bf6:	47 c0       	rjmp	.+142    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
		   }
	   }break;
	   case TIMER1_CLR_COMP :   /*Clear the Pins OC1A,OC1B*/
	   {
	    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	88 23       	and	r24, r24
    3bfc:	79 f4       	brne	.+30     	; 0x3c1c <TIMER1_voidSet_CTCMode+0x10a>
	    	{
	 		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3bfe:	af e4       	ldi	r26, 0x4F	; 79
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	ef e4       	ldi	r30, 0x4F	; 79
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	8f 7b       	andi	r24, 0xBF	; 191
    3c0a:	8c 93       	st	X, r24
	 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3c0c:	af e4       	ldi	r26, 0x4F	; 79
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	ef e4       	ldi	r30, 0x4F	; 79
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	80 68       	ori	r24, 0x80	; 128
    3c18:	8c 93       	st	X, r24
    3c1a:	35 c0       	rjmp	.+106    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	}
	    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	81 30       	cpi	r24, 0x01	; 1
    3c20:	91 f5       	brne	.+100    	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	{
	 		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3c22:	af e4       	ldi	r26, 0x4F	; 79
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	ef e4       	ldi	r30, 0x4F	; 79
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	80 81       	ld	r24, Z
    3c2c:	8f 7e       	andi	r24, 0xEF	; 239
    3c2e:	8c 93       	st	X, r24
	 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3c30:	af e4       	ldi	r26, 0x4F	; 79
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	ef e4       	ldi	r30, 0x4F	; 79
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	80 62       	ori	r24, 0x20	; 32
    3c3c:	8c 93       	st	X, r24
    3c3e:	23 c0       	rjmp	.+70     	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	}
	   }break;
	   case TIMER1_SET_COMP :   /*Set the Pins OC1A,OC1B*/
	   {
	    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3c40:	8a 81       	ldd	r24, Y+2	; 0x02
    3c42:	88 23       	and	r24, r24
    3c44:	79 f4       	brne	.+30     	; 0x3c64 <TIMER1_voidSet_CTCMode+0x152>
	    	{
	 		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3c46:	af e4       	ldi	r26, 0x4F	; 79
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	ef e4       	ldi	r30, 0x4F	; 79
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	80 64       	ori	r24, 0x40	; 64
    3c52:	8c 93       	st	X, r24
	 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3c54:	af e4       	ldi	r26, 0x4F	; 79
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	ef e4       	ldi	r30, 0x4F	; 79
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	80 68       	ori	r24, 0x80	; 128
    3c60:	8c 93       	st	X, r24
    3c62:	11 c0       	rjmp	.+34     	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	}
	    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	81 30       	cpi	r24, 0x01	; 1
    3c68:	71 f4       	brne	.+28     	; 0x3c86 <TIMER1_voidSet_CTCMode+0x174>
	    	{
	 		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3c6a:	af e4       	ldi	r26, 0x4F	; 79
    3c6c:	b0 e0       	ldi	r27, 0x00	; 0
    3c6e:	ef e4       	ldi	r30, 0x4F	; 79
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	80 61       	ori	r24, 0x10	; 16
    3c76:	8c 93       	st	X, r24
	 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3c78:	af e4       	ldi	r26, 0x4F	; 79
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	ef e4       	ldi	r30, 0x4F	; 79
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	80 62       	ori	r24, 0x20	; 32
    3c84:	8c 93       	st	X, r24
	    	}
	   }break;
	   }
}
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	08 95       	ret

00003c94 <TIMER1_voidSet_FastPwmMode>:
void TIMER1_voidSet_FastPwmMode(TIMER1_FAST_PWM_MODE_t Copy_enMode,TIMER1_CHANNEL_t Copy_enChannel)
{
    3c94:	df 93       	push	r29
    3c96:	cf 93       	push	r28
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <TIMER1_voidSet_FastPwmMode+0x6>
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <TIMER1_voidSet_FastPwmMode+0x8>
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_enMode)
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	28 2f       	mov	r18, r24
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	3c 83       	std	Y+4, r19	; 0x04
    3cac:	2b 83       	std	Y+3, r18	; 0x03
    3cae:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb2:	81 30       	cpi	r24, 0x01	; 1
    3cb4:	91 05       	cpc	r25, r1
    3cb6:	81 f1       	breq	.+96     	; 0x3d18 <TIMER1_voidSet_FastPwmMode+0x84>
    3cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cba:	3c 81       	ldd	r19, Y+4	; 0x04
    3cbc:	22 30       	cpi	r18, 0x02	; 2
    3cbe:	31 05       	cpc	r19, r1
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <TIMER1_voidSet_FastPwmMode+0x30>
    3cc2:	4e c0       	rjmp	.+156    	; 0x3d60 <TIMER1_voidSet_FastPwmMode+0xcc>
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	09 f0       	breq	.+2      	; 0x3cce <TIMER1_voidSet_FastPwmMode+0x3a>
    3ccc:	6c c0       	rjmp	.+216    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    {
    case TIMER1_NORMAL_PWM :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	88 23       	and	r24, r24
    3cd2:	79 f4       	brne	.+30     	; 0x3cf2 <TIMER1_voidSet_FastPwmMode+0x5e>
    	{
		     CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3cd4:	af e4       	ldi	r26, 0x4F	; 79
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	ef e4       	ldi	r30, 0x4F	; 79
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	8f 7b       	andi	r24, 0xBF	; 191
    3ce0:	8c 93       	st	X, r24
		     CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3ce2:	af e4       	ldi	r26, 0x4F	; 79
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	ef e4       	ldi	r30, 0x4F	; 79
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	80 81       	ld	r24, Z
    3cec:	8f 77       	andi	r24, 0x7F	; 127
    3cee:	8c 93       	st	X, r24
    3cf0:	5a c0       	rjmp	.+180    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	}
    	else if (Copy_enChannel == TIMER1_CHANNEL_B)
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf4:	81 30       	cpi	r24, 0x01	; 1
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <TIMER1_voidSet_FastPwmMode+0x66>
    3cf8:	56 c0       	rjmp	.+172    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	{
		     CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3cfa:	af e4       	ldi	r26, 0x4F	; 79
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	ef e4       	ldi	r30, 0x4F	; 79
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	8f 7e       	andi	r24, 0xEF	; 239
    3d06:	8c 93       	st	X, r24
		     CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3d08:	af e4       	ldi	r26, 0x4F	; 79
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	ef e4       	ldi	r30, 0x4F	; 79
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	80 81       	ld	r24, Z
    3d12:	8f 7d       	andi	r24, 0xDF	; 223
    3d14:	8c 93       	st	X, r24
    3d16:	47 c0       	rjmp	.+142    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	}
    }break;
    case TIMER1_CLR_TOP_SET_COMP :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	88 23       	and	r24, r24
    3d1c:	79 f4       	brne	.+30     	; 0x3d3c <TIMER1_voidSet_FastPwmMode+0xa8>
    	{
 		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3d1e:	af e4       	ldi	r26, 0x4F	; 79
    3d20:	b0 e0       	ldi	r27, 0x00	; 0
    3d22:	ef e4       	ldi	r30, 0x4F	; 79
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	80 81       	ld	r24, Z
    3d28:	8f 7b       	andi	r24, 0xBF	; 191
    3d2a:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3d2c:	af e4       	ldi	r26, 0x4F	; 79
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	ef e4       	ldi	r30, 0x4F	; 79
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	80 68       	ori	r24, 0x80	; 128
    3d38:	8c 93       	st	X, r24
    3d3a:	35 c0       	rjmp	.+106    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	}
    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	91 f5       	brne	.+100    	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	{
 		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3d42:	af e4       	ldi	r26, 0x4F	; 79
    3d44:	b0 e0       	ldi	r27, 0x00	; 0
    3d46:	ef e4       	ldi	r30, 0x4F	; 79
    3d48:	f0 e0       	ldi	r31, 0x00	; 0
    3d4a:	80 81       	ld	r24, Z
    3d4c:	8f 7e       	andi	r24, 0xEF	; 239
    3d4e:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3d50:	af e4       	ldi	r26, 0x4F	; 79
    3d52:	b0 e0       	ldi	r27, 0x00	; 0
    3d54:	ef e4       	ldi	r30, 0x4F	; 79
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	80 81       	ld	r24, Z
    3d5a:	80 62       	ori	r24, 0x20	; 32
    3d5c:	8c 93       	st	X, r24
    3d5e:	23 c0       	rjmp	.+70     	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	}
    }break;
    case TIMER1_SET_TOP_CLR_COMP :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3d60:	8a 81       	ldd	r24, Y+2	; 0x02
    3d62:	88 23       	and	r24, r24
    3d64:	79 f4       	brne	.+30     	; 0x3d84 <TIMER1_voidSet_FastPwmMode+0xf0>
    	{
 		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3d66:	af e4       	ldi	r26, 0x4F	; 79
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	ef e4       	ldi	r30, 0x4F	; 79
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	80 64       	ori	r24, 0x40	; 64
    3d72:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3d74:	af e4       	ldi	r26, 0x4F	; 79
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	ef e4       	ldi	r30, 0x4F	; 79
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	80 68       	ori	r24, 0x80	; 128
    3d80:	8c 93       	st	X, r24
    3d82:	11 c0       	rjmp	.+34     	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	}
    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3d84:	8a 81       	ldd	r24, Y+2	; 0x02
    3d86:	81 30       	cpi	r24, 0x01	; 1
    3d88:	71 f4       	brne	.+28     	; 0x3da6 <TIMER1_voidSet_FastPwmMode+0x112>
    	{
 		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3d8a:	af e4       	ldi	r26, 0x4F	; 79
    3d8c:	b0 e0       	ldi	r27, 0x00	; 0
    3d8e:	ef e4       	ldi	r30, 0x4F	; 79
    3d90:	f0 e0       	ldi	r31, 0x00	; 0
    3d92:	80 81       	ld	r24, Z
    3d94:	80 61       	ori	r24, 0x10	; 16
    3d96:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3d98:	af e4       	ldi	r26, 0x4F	; 79
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	ef e4       	ldi	r30, 0x4F	; 79
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	80 62       	ori	r24, 0x20	; 32
    3da4:	8c 93       	st	X, r24
    	}
    }break;
    }
}
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	08 95       	ret

00003db4 <TIMER1_voidSet_PHCorrectMode>:
void TIMER1_voidSet_PHCorrectMode(TIMER1_PHCORRECT_PWM_MODE_t Copy_enMode,TIMER1_CHANNEL_t Copy_enChannel)
{
    3db4:	df 93       	push	r29
    3db6:	cf 93       	push	r28
    3db8:	00 d0       	rcall	.+0      	; 0x3dba <TIMER1_voidSet_PHCorrectMode+0x6>
    3dba:	00 d0       	rcall	.+0      	; 0x3dbc <TIMER1_voidSet_PHCorrectMode+0x8>
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	89 83       	std	Y+1, r24	; 0x01
    3dc2:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_enMode)
    3dc4:	89 81       	ldd	r24, Y+1	; 0x01
    3dc6:	28 2f       	mov	r18, r24
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	3c 83       	std	Y+4, r19	; 0x04
    3dcc:	2b 83       	std	Y+3, r18	; 0x03
    3dce:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd2:	81 30       	cpi	r24, 0x01	; 1
    3dd4:	91 05       	cpc	r25, r1
    3dd6:	81 f1       	breq	.+96     	; 0x3e38 <TIMER1_voidSet_PHCorrectMode+0x84>
    3dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dda:	3c 81       	ldd	r19, Y+4	; 0x04
    3ddc:	22 30       	cpi	r18, 0x02	; 2
    3dde:	31 05       	cpc	r19, r1
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <TIMER1_voidSet_PHCorrectMode+0x30>
    3de2:	4e c0       	rjmp	.+156    	; 0x3e80 <TIMER1_voidSet_PHCorrectMode+0xcc>
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	09 f0       	breq	.+2      	; 0x3dee <TIMER1_voidSet_PHCorrectMode+0x3a>
    3dec:	6c c0       	rjmp	.+216    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    {
    case TIMER1_NORMAL_PHCORRECT :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	88 23       	and	r24, r24
    3df2:	79 f4       	brne	.+30     	; 0x3e12 <TIMER1_voidSet_PHCorrectMode+0x5e>
    	{
		     CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3df4:	af e4       	ldi	r26, 0x4F	; 79
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	ef e4       	ldi	r30, 0x4F	; 79
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 7b       	andi	r24, 0xBF	; 191
    3e00:	8c 93       	st	X, r24
		     CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    3e02:	af e4       	ldi	r26, 0x4F	; 79
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	ef e4       	ldi	r30, 0x4F	; 79
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	80 81       	ld	r24, Z
    3e0c:	8f 77       	andi	r24, 0x7F	; 127
    3e0e:	8c 93       	st	X, r24
    3e10:	5a c0       	rjmp	.+180    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	}
    	else if (Copy_enChannel == TIMER1_CHANNEL_B)
    3e12:	8a 81       	ldd	r24, Y+2	; 0x02
    3e14:	81 30       	cpi	r24, 0x01	; 1
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <TIMER1_voidSet_PHCorrectMode+0x66>
    3e18:	56 c0       	rjmp	.+172    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	{
		     CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3e1a:	af e4       	ldi	r26, 0x4F	; 79
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	ef e4       	ldi	r30, 0x4F	; 79
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	80 81       	ld	r24, Z
    3e24:	8f 7e       	andi	r24, 0xEF	; 239
    3e26:	8c 93       	st	X, r24
		     CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    3e28:	af e4       	ldi	r26, 0x4F	; 79
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	ef e4       	ldi	r30, 0x4F	; 79
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	80 81       	ld	r24, Z
    3e32:	8f 7d       	andi	r24, 0xDF	; 223
    3e34:	8c 93       	st	X, r24
    3e36:	47 c0       	rjmp	.+142    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    }break;
    case TIMER1_CLR_COMPUP_SET_COMPDOWN :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3e38:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3a:	88 23       	and	r24, r24
    3e3c:	79 f4       	brne	.+30     	; 0x3e5c <TIMER1_voidSet_PHCorrectMode+0xa8>
    	{
 		   CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    3e3e:	af e4       	ldi	r26, 0x4F	; 79
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	ef e4       	ldi	r30, 0x4F	; 79
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	8f 7b       	andi	r24, 0xBF	; 191
    3e4a:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e4c:	af e4       	ldi	r26, 0x4F	; 79
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	ef e4       	ldi	r30, 0x4F	; 79
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	80 81       	ld	r24, Z
    3e56:	80 68       	ori	r24, 0x80	; 128
    3e58:	8c 93       	st	X, r24
    3e5a:	35 c0       	rjmp	.+106    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	}
    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	81 30       	cpi	r24, 0x01	; 1
    3e60:	91 f5       	brne	.+100    	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	{
 		   CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    3e62:	af e4       	ldi	r26, 0x4F	; 79
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	ef e4       	ldi	r30, 0x4F	; 79
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	80 81       	ld	r24, Z
    3e6c:	8f 7e       	andi	r24, 0xEF	; 239
    3e6e:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3e70:	af e4       	ldi	r26, 0x4F	; 79
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	ef e4       	ldi	r30, 0x4F	; 79
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	80 62       	ori	r24, 0x20	; 32
    3e7c:	8c 93       	st	X, r24
    3e7e:	23 c0       	rjmp	.+70     	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	}
    }break;
    case TIMER1_SET_COMPUP_CLR_COMPDOWN :
    {
    	if(Copy_enChannel == TIMER1_CHANNEL_A)
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	88 23       	and	r24, r24
    3e84:	79 f4       	brne	.+30     	; 0x3ea4 <TIMER1_voidSet_PHCorrectMode+0xf0>
    	{
 		   SET_BIT(TCCR1A,TCCR1A_COM1A0);
    3e86:	af e4       	ldi	r26, 0x4F	; 79
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	ef e4       	ldi	r30, 0x4F	; 79
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 64       	ori	r24, 0x40	; 64
    3e92:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1A1);
    3e94:	af e4       	ldi	r26, 0x4F	; 79
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	ef e4       	ldi	r30, 0x4F	; 79
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	80 68       	ori	r24, 0x80	; 128
    3ea0:	8c 93       	st	X, r24
    3ea2:	11 c0       	rjmp	.+34     	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	}
    	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    3ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea6:	81 30       	cpi	r24, 0x01	; 1
    3ea8:	71 f4       	brne	.+28     	; 0x3ec6 <TIMER1_voidSet_PHCorrectMode+0x112>
    	{
 		   SET_BIT(TCCR1A,TCCR1A_COM1B0);
    3eaa:	af e4       	ldi	r26, 0x4F	; 79
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	ef e4       	ldi	r30, 0x4F	; 79
    3eb0:	f0 e0       	ldi	r31, 0x00	; 0
    3eb2:	80 81       	ld	r24, Z
    3eb4:	80 61       	ori	r24, 0x10	; 16
    3eb6:	8c 93       	st	X, r24
 		   SET_BIT(TCCR1A,TCCR1A_COM1B1);
    3eb8:	af e4       	ldi	r26, 0x4F	; 79
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	ef e4       	ldi	r30, 0x4F	; 79
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	80 62       	ori	r24, 0x20	; 32
    3ec4:	8c 93       	st	X, r24
    	}
    }break;
    }
  }
}
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <TIMERS_void_INT_Enable>:
void TIMERS_void_INT_Enable(TIMERS_Int_Src_t Copy_u8INT_Src)
{
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <TIMERS_void_INT_Enable+0x6>
    3eda:	0f 92       	push	r0
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INT_Src)
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	28 2f       	mov	r18, r24
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	3b 83       	std	Y+3, r19	; 0x03
    3eea:	2a 83       	std	Y+2, r18	; 0x02
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef0:	83 30       	cpi	r24, 0x03	; 3
    3ef2:	91 05       	cpc	r25, r1
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <TIMERS_void_INT_Enable+0x24>
    3ef6:	41 c0       	rjmp	.+130    	; 0x3f7a <TIMERS_void_INT_Enable+0xa6>
    3ef8:	2a 81       	ldd	r18, Y+2	; 0x02
    3efa:	3b 81       	ldd	r19, Y+3	; 0x03
    3efc:	24 30       	cpi	r18, 0x04	; 4
    3efe:	31 05       	cpc	r19, r1
    3f00:	7c f4       	brge	.+30     	; 0x3f20 <TIMERS_void_INT_Enable+0x4c>
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	9b 81       	ldd	r25, Y+3	; 0x03
    3f06:	81 30       	cpi	r24, 0x01	; 1
    3f08:	91 05       	cpc	r25, r1
    3f0a:	39 f1       	breq	.+78     	; 0x3f5a <TIMERS_void_INT_Enable+0x86>
    3f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    3f0e:	3b 81       	ldd	r19, Y+3	; 0x03
    3f10:	22 30       	cpi	r18, 0x02	; 2
    3f12:	31 05       	cpc	r19, r1
    3f14:	54 f5       	brge	.+84     	; 0x3f6a <TIMERS_void_INT_Enable+0x96>
    3f16:	8a 81       	ldd	r24, Y+2	; 0x02
    3f18:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1a:	00 97       	sbiw	r24, 0x00	; 0
    3f1c:	b1 f0       	breq	.+44     	; 0x3f4a <TIMERS_void_INT_Enable+0x76>
    3f1e:	54 c0       	rjmp	.+168    	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
    3f20:	2a 81       	ldd	r18, Y+2	; 0x02
    3f22:	3b 81       	ldd	r19, Y+3	; 0x03
    3f24:	25 30       	cpi	r18, 0x05	; 5
    3f26:	31 05       	cpc	r19, r1
    3f28:	c1 f1       	breq	.+112    	; 0x3f9a <TIMERS_void_INT_Enable+0xc6>
    3f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2e:	85 30       	cpi	r24, 0x05	; 5
    3f30:	91 05       	cpc	r25, r1
    3f32:	5c f1       	brlt	.+86     	; 0x3f8a <TIMERS_void_INT_Enable+0xb6>
    3f34:	2a 81       	ldd	r18, Y+2	; 0x02
    3f36:	3b 81       	ldd	r19, Y+3	; 0x03
    3f38:	26 30       	cpi	r18, 0x06	; 6
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	b1 f1       	breq	.+108    	; 0x3faa <TIMERS_void_INT_Enable+0xd6>
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	9b 81       	ldd	r25, Y+3	; 0x03
    3f42:	87 30       	cpi	r24, 0x07	; 7
    3f44:	91 05       	cpc	r25, r1
    3f46:	c9 f1       	breq	.+114    	; 0x3fba <TIMERS_void_INT_Enable+0xe6>
    3f48:	3f c0       	rjmp	.+126    	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	{
	case TIMER0_OVF  : SET_BIT(TIMSK,TIMSK_TOIE0);break;
    3f4a:	a9 e5       	ldi	r26, 0x59	; 89
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	e9 e5       	ldi	r30, 0x59	; 89
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	81 60       	ori	r24, 0x01	; 1
    3f56:	8c 93       	st	X, r24
    3f58:	37 c0       	rjmp	.+110    	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER0_COMP : SET_BIT(TIMSK,TIMSK_OCIE0);break;
    3f5a:	a9 e5       	ldi	r26, 0x59	; 89
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	e9 e5       	ldi	r30, 0x59	; 89
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	82 60       	ori	r24, 0x02	; 2
    3f66:	8c 93       	st	X, r24
    3f68:	2f c0       	rjmp	.+94     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER2_OVF  : SET_BIT(TIMSK,TIMSK_TOIE2);break;
    3f6a:	a9 e5       	ldi	r26, 0x59	; 89
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e9 e5       	ldi	r30, 0x59	; 89
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	80 64       	ori	r24, 0x40	; 64
    3f76:	8c 93       	st	X, r24
    3f78:	27 c0       	rjmp	.+78     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER2_COMP : SET_BIT(TIMSK,TIMSK_OCIE2);break;
    3f7a:	a9 e5       	ldi	r26, 0x59	; 89
    3f7c:	b0 e0       	ldi	r27, 0x00	; 0
    3f7e:	e9 e5       	ldi	r30, 0x59	; 89
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	80 68       	ori	r24, 0x80	; 128
    3f86:	8c 93       	st	X, r24
    3f88:	1f c0       	rjmp	.+62     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER1_OVF  : SET_BIT(TIMSK,TIMSK_TOIE1);break;
    3f8a:	a9 e5       	ldi	r26, 0x59	; 89
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	e9 e5       	ldi	r30, 0x59	; 89
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	84 60       	ori	r24, 0x04	; 4
    3f96:	8c 93       	st	X, r24
    3f98:	17 c0       	rjmp	.+46     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER1_COMP_CHA : SET_BIT(TIMSK,TIMSK_OCIE1A);break;
    3f9a:	a9 e5       	ldi	r26, 0x59	; 89
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	e9 e5       	ldi	r30, 0x59	; 89
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	80 61       	ori	r24, 0x10	; 16
    3fa6:	8c 93       	st	X, r24
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER1_COMP_CHB : SET_BIT(TIMSK,TIMSK_OCIE1B);break;
    3faa:	a9 e5       	ldi	r26, 0x59	; 89
    3fac:	b0 e0       	ldi	r27, 0x00	; 0
    3fae:	e9 e5       	ldi	r30, 0x59	; 89
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	80 81       	ld	r24, Z
    3fb4:	88 60       	ori	r24, 0x08	; 8
    3fb6:	8c 93       	st	X, r24
    3fb8:	07 c0       	rjmp	.+14     	; 0x3fc8 <TIMERS_void_INT_Enable+0xf4>
	case TIMER1_CAPT : SET_BIT(TIMSK,TIMSK_TICIE1);break;
    3fba:	a9 e5       	ldi	r26, 0x59	; 89
    3fbc:	b0 e0       	ldi	r27, 0x00	; 0
    3fbe:	e9 e5       	ldi	r30, 0x59	; 89
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	80 81       	ld	r24, Z
    3fc4:	80 62       	ori	r24, 0x20	; 32
    3fc6:	8c 93       	st	X, r24
	}
}
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	08 95       	ret

00003fd4 <TIMERS_void_INT_Disable>:
void TIMERS_void_INT_Disable(TIMERS_Int_Src_t Copy_u8INT_Src)
{
    3fd4:	df 93       	push	r29
    3fd6:	cf 93       	push	r28
    3fd8:	00 d0       	rcall	.+0      	; 0x3fda <TIMERS_void_INT_Disable+0x6>
    3fda:	0f 92       	push	r0
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8INT_Src)
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	28 2f       	mov	r18, r24
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	3b 83       	std	Y+3, r19	; 0x03
    3fea:	2a 83       	std	Y+2, r18	; 0x02
    3fec:	8a 81       	ldd	r24, Y+2	; 0x02
    3fee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff0:	83 30       	cpi	r24, 0x03	; 3
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <TIMERS_void_INT_Disable+0x24>
    3ff6:	41 c0       	rjmp	.+130    	; 0x407a <TIMERS_void_INT_Disable+0xa6>
    3ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    3ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    3ffc:	24 30       	cpi	r18, 0x04	; 4
    3ffe:	31 05       	cpc	r19, r1
    4000:	7c f4       	brge	.+30     	; 0x4020 <TIMERS_void_INT_Disable+0x4c>
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	9b 81       	ldd	r25, Y+3	; 0x03
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	91 05       	cpc	r25, r1
    400a:	39 f1       	breq	.+78     	; 0x405a <TIMERS_void_INT_Disable+0x86>
    400c:	2a 81       	ldd	r18, Y+2	; 0x02
    400e:	3b 81       	ldd	r19, Y+3	; 0x03
    4010:	22 30       	cpi	r18, 0x02	; 2
    4012:	31 05       	cpc	r19, r1
    4014:	54 f5       	brge	.+84     	; 0x406a <TIMERS_void_INT_Disable+0x96>
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	9b 81       	ldd	r25, Y+3	; 0x03
    401a:	00 97       	sbiw	r24, 0x00	; 0
    401c:	b1 f0       	breq	.+44     	; 0x404a <TIMERS_void_INT_Disable+0x76>
    401e:	54 c0       	rjmp	.+168    	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
    4020:	2a 81       	ldd	r18, Y+2	; 0x02
    4022:	3b 81       	ldd	r19, Y+3	; 0x03
    4024:	25 30       	cpi	r18, 0x05	; 5
    4026:	31 05       	cpc	r19, r1
    4028:	c1 f1       	breq	.+112    	; 0x409a <TIMERS_void_INT_Disable+0xc6>
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	9b 81       	ldd	r25, Y+3	; 0x03
    402e:	85 30       	cpi	r24, 0x05	; 5
    4030:	91 05       	cpc	r25, r1
    4032:	5c f1       	brlt	.+86     	; 0x408a <TIMERS_void_INT_Disable+0xb6>
    4034:	2a 81       	ldd	r18, Y+2	; 0x02
    4036:	3b 81       	ldd	r19, Y+3	; 0x03
    4038:	26 30       	cpi	r18, 0x06	; 6
    403a:	31 05       	cpc	r19, r1
    403c:	b1 f1       	breq	.+108    	; 0x40aa <TIMERS_void_INT_Disable+0xd6>
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	9b 81       	ldd	r25, Y+3	; 0x03
    4042:	87 30       	cpi	r24, 0x07	; 7
    4044:	91 05       	cpc	r25, r1
    4046:	c9 f1       	breq	.+114    	; 0x40ba <TIMERS_void_INT_Disable+0xe6>
    4048:	3f c0       	rjmp	.+126    	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	{
	case TIMER0_OVF  : CLR_BIT(TIMSK,TIMSK_TOIE0);break;
    404a:	a9 e5       	ldi	r26, 0x59	; 89
    404c:	b0 e0       	ldi	r27, 0x00	; 0
    404e:	e9 e5       	ldi	r30, 0x59	; 89
    4050:	f0 e0       	ldi	r31, 0x00	; 0
    4052:	80 81       	ld	r24, Z
    4054:	8e 7f       	andi	r24, 0xFE	; 254
    4056:	8c 93       	st	X, r24
    4058:	37 c0       	rjmp	.+110    	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER0_COMP : CLR_BIT(TIMSK,TIMSK_OCIE0);break;
    405a:	a9 e5       	ldi	r26, 0x59	; 89
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	e9 e5       	ldi	r30, 0x59	; 89
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	8d 7f       	andi	r24, 0xFD	; 253
    4066:	8c 93       	st	X, r24
    4068:	2f c0       	rjmp	.+94     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER2_OVF  : CLR_BIT(TIMSK,TIMSK_TOIE2);break;
    406a:	a9 e5       	ldi	r26, 0x59	; 89
    406c:	b0 e0       	ldi	r27, 0x00	; 0
    406e:	e9 e5       	ldi	r30, 0x59	; 89
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	80 81       	ld	r24, Z
    4074:	8f 7b       	andi	r24, 0xBF	; 191
    4076:	8c 93       	st	X, r24
    4078:	27 c0       	rjmp	.+78     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER2_COMP : CLR_BIT(TIMSK,TIMSK_OCIE2);break;
    407a:	a9 e5       	ldi	r26, 0x59	; 89
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	e9 e5       	ldi	r30, 0x59	; 89
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	80 81       	ld	r24, Z
    4084:	8f 77       	andi	r24, 0x7F	; 127
    4086:	8c 93       	st	X, r24
    4088:	1f c0       	rjmp	.+62     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER1_OVF  : CLR_BIT(TIMSK,TIMSK_TOIE1);break;
    408a:	a9 e5       	ldi	r26, 0x59	; 89
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	e9 e5       	ldi	r30, 0x59	; 89
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	8b 7f       	andi	r24, 0xFB	; 251
    4096:	8c 93       	st	X, r24
    4098:	17 c0       	rjmp	.+46     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER1_COMP_CHA : CLR_BIT(TIMSK,TIMSK_OCIE1A);break;
    409a:	a9 e5       	ldi	r26, 0x59	; 89
    409c:	b0 e0       	ldi	r27, 0x00	; 0
    409e:	e9 e5       	ldi	r30, 0x59	; 89
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	80 81       	ld	r24, Z
    40a4:	8f 7e       	andi	r24, 0xEF	; 239
    40a6:	8c 93       	st	X, r24
    40a8:	0f c0       	rjmp	.+30     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER1_COMP_CHB : CLR_BIT(TIMSK,TIMSK_OCIE1B);break;
    40aa:	a9 e5       	ldi	r26, 0x59	; 89
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e9 e5       	ldi	r30, 0x59	; 89
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	87 7f       	andi	r24, 0xF7	; 247
    40b6:	8c 93       	st	X, r24
    40b8:	07 c0       	rjmp	.+14     	; 0x40c8 <TIMERS_void_INT_Disable+0xf4>
	case TIMER1_CAPT : CLR_BIT(TIMSK,TIMSK_TICIE1);break;
    40ba:	a9 e5       	ldi	r26, 0x59	; 89
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	e9 e5       	ldi	r30, 0x59	; 89
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	80 81       	ld	r24, Z
    40c4:	8f 7d       	andi	r24, 0xDF	; 223
    40c6:	8c 93       	st	X, r24
	}
}
    40c8:	0f 90       	pop	r0
    40ca:	0f 90       	pop	r0
    40cc:	0f 90       	pop	r0
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	08 95       	ret

000040d4 <TIMERS_u8SetCallBack>:
uint8 TIMERS_u8SetCallBack(TIMERS_Int_Src_t Copy_TmrIntSource,void(*Copy_pvCallBackFunc)(void))
{
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	00 d0       	rcall	.+0      	; 0x40da <TIMERS_u8SetCallBack+0x6>
    40da:	00 d0       	rcall	.+0      	; 0x40dc <TIMERS_u8SetCallBack+0x8>
    40dc:	cd b7       	in	r28, 0x3d	; 61
    40de:	de b7       	in	r29, 0x3e	; 62
    40e0:	8a 83       	std	Y+2, r24	; 0x02
    40e2:	7c 83       	std	Y+4, r23	; 0x04
    40e4:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Local_u8Errorstate= OK;
    40e6:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc!=NULL)
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	9c 81       	ldd	r25, Y+4	; 0x04
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	69 f0       	breq	.+26     	; 0x410a <TIMERS_u8SetCallBack+0x36>
    {
        TIMERS_pvCallBackFuncArr[Copy_TmrIntSource]=Copy_pvCallBackFunc;
    40f0:	8a 81       	ldd	r24, Y+2	; 0x02
    40f2:	88 2f       	mov	r24, r24
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	fc 01       	movw	r30, r24
    40fc:	e2 5d       	subi	r30, 0xD2	; 210
    40fe:	fd 4f       	sbci	r31, 0xFD	; 253
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	91 83       	std	Z+1, r25	; 0x01
    4106:	80 83       	st	Z, r24
    4108:	02 c0       	rjmp	.+4      	; 0x410e <TIMERS_u8SetCallBack+0x3a>
    }
    else
    {
    	Local_u8Errorstate=NOK;
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	89 83       	std	Y+1, r24	; 0x01

    }

    return Local_u8Errorstate;
    410e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <TIMER1_voidPreload_Val>:
void TIMER1_voidPreload_Val(uint16 Copy_u16Val)
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	00 d0       	rcall	.+0      	; 0x4124 <TIMER1_voidPreload_Val+0x6>
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	9a 83       	std	Y+2, r25	; 0x02
    412a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Val;
    412c:	ec e4       	ldi	r30, 0x4C	; 76
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	91 83       	std	Z+1, r25	; 0x01
    4136:	80 83       	st	Z, r24
}
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	cf 91       	pop	r28
    413e:	df 91       	pop	r29
    4140:	08 95       	ret

00004142 <TIMER1_void_Set_CompValue>:
void TIMER1_void_Set_CompValue(uint16 Copy_u16Val,TIMER1_CHANNEL_t Copy_enChannel)
{
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	00 d0       	rcall	.+0      	; 0x4148 <TIMER1_void_Set_CompValue+0x6>
    4148:	0f 92       	push	r0
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	9a 83       	std	Y+2, r25	; 0x02
    4150:	89 83       	std	Y+1, r24	; 0x01
    4152:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_enChannel == TIMER1_CHANNEL_A)
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	88 23       	and	r24, r24
    4158:	39 f4       	brne	.+14     	; 0x4168 <TIMER1_void_Set_CompValue+0x26>
	{
		OCR1A=Copy_u16Val;
    415a:	ea e4       	ldi	r30, 0x4A	; 74
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	9a 81       	ldd	r25, Y+2	; 0x02
    4162:	91 83       	std	Z+1, r25	; 0x01
    4164:	80 83       	st	Z, r24
    4166:	09 c0       	rjmp	.+18     	; 0x417a <TIMER1_void_Set_CompValue+0x38>
	}
	else if(Copy_enChannel == TIMER1_CHANNEL_B)
    4168:	8b 81       	ldd	r24, Y+3	; 0x03
    416a:	81 30       	cpi	r24, 0x01	; 1
    416c:	31 f4       	brne	.+12     	; 0x417a <TIMER1_void_Set_CompValue+0x38>
	{
		OCR1B=Copy_u16Val;
    416e:	e8 e4       	ldi	r30, 0x48	; 72
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	89 81       	ldd	r24, Y+1	; 0x01
    4174:	9a 81       	ldd	r25, Y+2	; 0x02
    4176:	91 83       	std	Z+1, r25	; 0x01
    4178:	80 83       	st	Z, r24
	}
}
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	0f 90       	pop	r0
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <TIMER1_voidSet_TopVal>:
void TIMER1_voidSet_TopVal(uint16 Copy_u16Val,TIMER1_WFGEN_Mode_t Copy_enMode)
{
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	00 d0       	rcall	.+0      	; 0x418c <TIMER1_voidSet_TopVal+0x6>
    418c:	00 d0       	rcall	.+0      	; 0x418e <TIMER1_voidSet_TopVal+0x8>
    418e:	0f 92       	push	r0
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	9a 83       	std	Y+2, r25	; 0x02
    4196:	89 83       	std	Y+1, r24	; 0x01
    4198:	6b 83       	std	Y+3, r22	; 0x03
   switch(Copy_enMode)
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	3d 83       	std	Y+5, r19	; 0x05
    41a2:	2c 83       	std	Y+4, r18	; 0x04
    41a4:	8c 81       	ldd	r24, Y+4	; 0x04
    41a6:	9d 81       	ldd	r25, Y+5	; 0x05
    41a8:	8a 30       	cpi	r24, 0x0A	; 10
    41aa:	91 05       	cpc	r25, r1
    41ac:	09 f4       	brne	.+2      	; 0x41b0 <TIMER1_voidSet_TopVal+0x2a>
    41ae:	4f c0       	rjmp	.+158    	; 0x424e <TIMER1_voidSet_TopVal+0xc8>
    41b0:	2c 81       	ldd	r18, Y+4	; 0x04
    41b2:	3d 81       	ldd	r19, Y+5	; 0x05
    41b4:	2b 30       	cpi	r18, 0x0B	; 11
    41b6:	31 05       	cpc	r19, r1
    41b8:	94 f4       	brge	.+36     	; 0x41de <TIMER1_voidSet_TopVal+0x58>
    41ba:	8c 81       	ldd	r24, Y+4	; 0x04
    41bc:	9d 81       	ldd	r25, Y+5	; 0x05
    41be:	88 30       	cpi	r24, 0x08	; 8
    41c0:	91 05       	cpc	r25, r1
    41c2:	09 f4       	brne	.+2      	; 0x41c6 <TIMER1_voidSet_TopVal+0x40>
    41c4:	52 c0       	rjmp	.+164    	; 0x426a <TIMER1_voidSet_TopVal+0xe4>
    41c6:	2c 81       	ldd	r18, Y+4	; 0x04
    41c8:	3d 81       	ldd	r19, Y+5	; 0x05
    41ca:	29 30       	cpi	r18, 0x09	; 9
    41cc:	31 05       	cpc	r19, r1
    41ce:	0c f0       	brlt	.+2      	; 0x41d2 <TIMER1_voidSet_TopVal+0x4c>
    41d0:	45 c0       	rjmp	.+138    	; 0x425c <TIMER1_voidSet_TopVal+0xd6>
    41d2:	8c 81       	ldd	r24, Y+4	; 0x04
    41d4:	9d 81       	ldd	r25, Y+5	; 0x05
    41d6:	84 30       	cpi	r24, 0x04	; 4
    41d8:	91 05       	cpc	r25, r1
    41da:	e9 f0       	breq	.+58     	; 0x4216 <TIMER1_voidSet_TopVal+0x90>
    41dc:	4c c0       	rjmp	.+152    	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
    41de:	2c 81       	ldd	r18, Y+4	; 0x04
    41e0:	3d 81       	ldd	r19, Y+5	; 0x05
    41e2:	2c 30       	cpi	r18, 0x0C	; 12
    41e4:	31 05       	cpc	r19, r1
    41e6:	81 f0       	breq	.+32     	; 0x4208 <TIMER1_voidSet_TopVal+0x82>
    41e8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ea:	9d 81       	ldd	r25, Y+5	; 0x05
    41ec:	8c 30       	cpi	r24, 0x0C	; 12
    41ee:	91 05       	cpc	r25, r1
    41f0:	3c f1       	brlt	.+78     	; 0x4240 <TIMER1_voidSet_TopVal+0xba>
    41f2:	2c 81       	ldd	r18, Y+4	; 0x04
    41f4:	3d 81       	ldd	r19, Y+5	; 0x05
    41f6:	2d 30       	cpi	r18, 0x0D	; 13
    41f8:	31 05       	cpc	r19, r1
    41fa:	a1 f0       	breq	.+40     	; 0x4224 <TIMER1_voidSet_TopVal+0x9e>
    41fc:	8c 81       	ldd	r24, Y+4	; 0x04
    41fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4200:	8e 30       	cpi	r24, 0x0E	; 14
    4202:	91 05       	cpc	r25, r1
    4204:	b1 f0       	breq	.+44     	; 0x4232 <TIMER1_voidSet_TopVal+0xac>
    4206:	37 c0       	rjmp	.+110    	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   {
   case TIMER1_CTC_ICR1 : ICR1=Copy_u16Val;break;
    4208:	e6 e4       	ldi	r30, 0x46	; 70
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	9a 81       	ldd	r25, Y+2	; 0x02
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	30 c0       	rjmp	.+96     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_CTC_OCR1A : OCR1A=Copy_u16Val;break;
    4216:	ea e4       	ldi	r30, 0x4A	; 74
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
    4222:	29 c0       	rjmp	.+82     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_FAST_PWM_ICR1 : ICR1=Copy_u16Val;break;
    4224:	e6 e4       	ldi	r30, 0x46	; 70
    4226:	f0 e0       	ldi	r31, 0x00	; 0
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	9a 81       	ldd	r25, Y+2	; 0x02
    422c:	91 83       	std	Z+1, r25	; 0x01
    422e:	80 83       	st	Z, r24
    4230:	22 c0       	rjmp	.+68     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_FAST_PWM_OCR1A :OCR1A=Copy_u16Val;break;
    4232:	ea e4       	ldi	r30, 0x4A	; 74
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	9a 81       	ldd	r25, Y+2	; 0x02
    423a:	91 83       	std	Z+1, r25	; 0x01
    423c:	80 83       	st	Z, r24
    423e:	1b c0       	rjmp	.+54     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_PH_CRR_ICR1 : ICR1=Copy_u16Val;break;
    4240:	e6 e4       	ldi	r30, 0x46	; 70
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	9a 81       	ldd	r25, Y+2	; 0x02
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
    424c:	14 c0       	rjmp	.+40     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_PH_CRR_OCR1A : OCR1A=Copy_u16Val;break;
    424e:	ea e4       	ldi	r30, 0x4A	; 74
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	9a 81       	ldd	r25, Y+2	; 0x02
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	80 83       	st	Z, r24
    425a:	0d c0       	rjmp	.+26     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_PH_FRECRR_ICR1 : ICR1=Copy_u16Val;break;
    425c:	e6 e4       	ldi	r30, 0x46	; 70
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	9a 81       	ldd	r25, Y+2	; 0x02
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	80 83       	st	Z, r24
    4268:	06 c0       	rjmp	.+12     	; 0x4276 <TIMER1_voidSet_TopVal+0xf0>
   case TIMER1_PH_FRECRR_OCR1A : OCR1A=Copy_u16Val;break;
    426a:	ea e4       	ldi	r30, 0x4A	; 74
    426c:	f0 e0       	ldi	r31, 0x00	; 0
    426e:	89 81       	ldd	r24, Y+1	; 0x01
    4270:	9a 81       	ldd	r25, Y+2	; 0x02
    4272:	91 83       	std	Z+1, r25	; 0x01
    4274:	80 83       	st	Z, r24
   }
}
    4276:	0f 90       	pop	r0
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <WDT_voidSetTime>:
void WDT_voidSetTime(WDT_TIME_t Copy_enTime)
{
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	89 83       	std	Y+1, r24	; 0x01
   WDTCR = 0x00;
    4292:	e1 e4       	ldi	r30, 0x41	; 65
    4294:	f0 e0       	ldi	r31, 0x00	; 0
    4296:	10 82       	st	Z, r1
   WDTCR = Copy_enTime;
    4298:	e1 e4       	ldi	r30, 0x41	; 65
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	80 83       	st	Z, r24
}
    42a0:	0f 90       	pop	r0
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	08 95       	ret

000042a8 <WDT_voidEnable>:
void WDT_voidEnable()
{
    42a8:	df 93       	push	r29
    42aa:	cf 93       	push	r28
    42ac:	cd b7       	in	r28, 0x3d	; 61
    42ae:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= 1<<WDTCR_WDE;
    42b0:	a1 e4       	ldi	r26, 0x41	; 65
    42b2:	b0 e0       	ldi	r27, 0x00	; 0
    42b4:	e1 e4       	ldi	r30, 0x41	; 65
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	80 81       	ld	r24, Z
    42ba:	88 60       	ori	r24, 0x08	; 8
    42bc:	8c 93       	st	X, r24
}
    42be:	cf 91       	pop	r28
    42c0:	df 91       	pop	r29
    42c2:	08 95       	ret

000042c4 <WDT_voidDisable>:
void WDT_voidDisable()
{
    42c4:	df 93       	push	r29
    42c6:	cf 93       	push	r28
    42c8:	cd b7       	in	r28, 0x3d	; 61
    42ca:	de b7       	in	r29, 0x3e	; 62
	WDTCR = (1<<WDTCR_WDTOE) | (1<<WDTCR_WDE);
    42cc:	e1 e4       	ldi	r30, 0x41	; 65
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	88 e1       	ldi	r24, 0x18	; 24
    42d2:	80 83       	st	Z, r24
	WDTCR=0x00;
    42d4:	e1 e4       	ldi	r30, 0x41	; 65
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	10 82       	st	Z, r1
}
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <__vector_10>:
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    42e0:	1f 92       	push	r1
    42e2:	0f 92       	push	r0
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	0f 92       	push	r0
    42e8:	11 24       	eor	r1, r1
    42ea:	2f 93       	push	r18
    42ec:	3f 93       	push	r19
    42ee:	4f 93       	push	r20
    42f0:	5f 93       	push	r21
    42f2:	6f 93       	push	r22
    42f4:	7f 93       	push	r23
    42f6:	8f 93       	push	r24
    42f8:	9f 93       	push	r25
    42fa:	af 93       	push	r26
    42fc:	bf 93       	push	r27
    42fe:	ef 93       	push	r30
    4300:	ff 93       	push	r31
    4302:	df 93       	push	r29
    4304:	cf 93       	push	r28
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER0_COMP] != NULL)
    430a:	80 91 30 02 	lds	r24, 0x0230
    430e:	90 91 31 02 	lds	r25, 0x0231
    4312:	00 97       	sbiw	r24, 0x00	; 0
    4314:	29 f0       	breq	.+10     	; 0x4320 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER0_COMP]();
    4316:	e0 91 30 02 	lds	r30, 0x0230
    431a:	f0 91 31 02 	lds	r31, 0x0231
    431e:	09 95       	icall
	}
}
    4320:	cf 91       	pop	r28
    4322:	df 91       	pop	r29
    4324:	ff 91       	pop	r31
    4326:	ef 91       	pop	r30
    4328:	bf 91       	pop	r27
    432a:	af 91       	pop	r26
    432c:	9f 91       	pop	r25
    432e:	8f 91       	pop	r24
    4330:	7f 91       	pop	r23
    4332:	6f 91       	pop	r22
    4334:	5f 91       	pop	r21
    4336:	4f 91       	pop	r20
    4338:	3f 91       	pop	r19
    433a:	2f 91       	pop	r18
    433c:	0f 90       	pop	r0
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	0f 90       	pop	r0
    4342:	1f 90       	pop	r1
    4344:	18 95       	reti

00004346 <__vector_11>:
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    4346:	1f 92       	push	r1
    4348:	0f 92       	push	r0
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	0f 92       	push	r0
    434e:	11 24       	eor	r1, r1
    4350:	2f 93       	push	r18
    4352:	3f 93       	push	r19
    4354:	4f 93       	push	r20
    4356:	5f 93       	push	r21
    4358:	6f 93       	push	r22
    435a:	7f 93       	push	r23
    435c:	8f 93       	push	r24
    435e:	9f 93       	push	r25
    4360:	af 93       	push	r26
    4362:	bf 93       	push	r27
    4364:	ef 93       	push	r30
    4366:	ff 93       	push	r31
    4368:	df 93       	push	r29
    436a:	cf 93       	push	r28
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER0_OVF] != NULL)
    4370:	80 91 2e 02 	lds	r24, 0x022E
    4374:	90 91 2f 02 	lds	r25, 0x022F
    4378:	00 97       	sbiw	r24, 0x00	; 0
    437a:	29 f0       	breq	.+10     	; 0x4386 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER0_OVF]();
    437c:	e0 91 2e 02 	lds	r30, 0x022E
    4380:	f0 91 2f 02 	lds	r31, 0x022F
    4384:	09 95       	icall
	}
}
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	ff 91       	pop	r31
    438c:	ef 91       	pop	r30
    438e:	bf 91       	pop	r27
    4390:	af 91       	pop	r26
    4392:	9f 91       	pop	r25
    4394:	8f 91       	pop	r24
    4396:	7f 91       	pop	r23
    4398:	6f 91       	pop	r22
    439a:	5f 91       	pop	r21
    439c:	4f 91       	pop	r20
    439e:	3f 91       	pop	r19
    43a0:	2f 91       	pop	r18
    43a2:	0f 90       	pop	r0
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	0f 90       	pop	r0
    43a8:	1f 90       	pop	r1
    43aa:	18 95       	reti

000043ac <__vector_8>:
void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    43ac:	1f 92       	push	r1
    43ae:	0f 92       	push	r0
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	0f 92       	push	r0
    43b4:	11 24       	eor	r1, r1
    43b6:	2f 93       	push	r18
    43b8:	3f 93       	push	r19
    43ba:	4f 93       	push	r20
    43bc:	5f 93       	push	r21
    43be:	6f 93       	push	r22
    43c0:	7f 93       	push	r23
    43c2:	8f 93       	push	r24
    43c4:	9f 93       	push	r25
    43c6:	af 93       	push	r26
    43c8:	bf 93       	push	r27
    43ca:	ef 93       	push	r30
    43cc:	ff 93       	push	r31
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	cd b7       	in	r28, 0x3d	; 61
    43d4:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMP_CHB] != NULL)
    43d6:	80 91 3a 02 	lds	r24, 0x023A
    43da:	90 91 3b 02 	lds	r25, 0x023B
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	29 f0       	breq	.+10     	; 0x43ec <__vector_8+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER1_COMP_CHB]();
    43e2:	e0 91 3a 02 	lds	r30, 0x023A
    43e6:	f0 91 3b 02 	lds	r31, 0x023B
    43ea:	09 95       	icall
	}
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	0f be       	out	0x3f, r0	; 63
    440c:	0f 90       	pop	r0
    440e:	1f 90       	pop	r1
    4410:	18 95       	reti

00004412 <__vector_7>:
void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    4412:	1f 92       	push	r1
    4414:	0f 92       	push	r0
    4416:	0f b6       	in	r0, 0x3f	; 63
    4418:	0f 92       	push	r0
    441a:	11 24       	eor	r1, r1
    441c:	2f 93       	push	r18
    441e:	3f 93       	push	r19
    4420:	4f 93       	push	r20
    4422:	5f 93       	push	r21
    4424:	6f 93       	push	r22
    4426:	7f 93       	push	r23
    4428:	8f 93       	push	r24
    442a:	9f 93       	push	r25
    442c:	af 93       	push	r26
    442e:	bf 93       	push	r27
    4430:	ef 93       	push	r30
    4432:	ff 93       	push	r31
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER1_COMP_CHA] != NULL)
    443c:	80 91 38 02 	lds	r24, 0x0238
    4440:	90 91 39 02 	lds	r25, 0x0239
    4444:	00 97       	sbiw	r24, 0x00	; 0
    4446:	29 f0       	breq	.+10     	; 0x4452 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER1_COMP_CHA]();
    4448:	e0 91 38 02 	lds	r30, 0x0238
    444c:	f0 91 39 02 	lds	r31, 0x0239
    4450:	09 95       	icall
	}
}
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	ff 91       	pop	r31
    4458:	ef 91       	pop	r30
    445a:	bf 91       	pop	r27
    445c:	af 91       	pop	r26
    445e:	9f 91       	pop	r25
    4460:	8f 91       	pop	r24
    4462:	7f 91       	pop	r23
    4464:	6f 91       	pop	r22
    4466:	5f 91       	pop	r21
    4468:	4f 91       	pop	r20
    446a:	3f 91       	pop	r19
    446c:	2f 91       	pop	r18
    446e:	0f 90       	pop	r0
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	0f 90       	pop	r0
    4474:	1f 90       	pop	r1
    4476:	18 95       	reti

00004478 <__vector_4>:
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    4478:	1f 92       	push	r1
    447a:	0f 92       	push	r0
    447c:	0f b6       	in	r0, 0x3f	; 63
    447e:	0f 92       	push	r0
    4480:	11 24       	eor	r1, r1
    4482:	2f 93       	push	r18
    4484:	3f 93       	push	r19
    4486:	4f 93       	push	r20
    4488:	5f 93       	push	r21
    448a:	6f 93       	push	r22
    448c:	7f 93       	push	r23
    448e:	8f 93       	push	r24
    4490:	9f 93       	push	r25
    4492:	af 93       	push	r26
    4494:	bf 93       	push	r27
    4496:	ef 93       	push	r30
    4498:	ff 93       	push	r31
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	cd b7       	in	r28, 0x3d	; 61
    44a0:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER2_COMP] != NULL)
    44a2:	80 91 34 02 	lds	r24, 0x0234
    44a6:	90 91 35 02 	lds	r25, 0x0235
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	29 f0       	breq	.+10     	; 0x44b8 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER2_COMP]();
    44ae:	e0 91 34 02 	lds	r30, 0x0234
    44b2:	f0 91 35 02 	lds	r31, 0x0235
    44b6:	09 95       	icall
	}
}
    44b8:	cf 91       	pop	r28
    44ba:	df 91       	pop	r29
    44bc:	ff 91       	pop	r31
    44be:	ef 91       	pop	r30
    44c0:	bf 91       	pop	r27
    44c2:	af 91       	pop	r26
    44c4:	9f 91       	pop	r25
    44c6:	8f 91       	pop	r24
    44c8:	7f 91       	pop	r23
    44ca:	6f 91       	pop	r22
    44cc:	5f 91       	pop	r21
    44ce:	4f 91       	pop	r20
    44d0:	3f 91       	pop	r19
    44d2:	2f 91       	pop	r18
    44d4:	0f 90       	pop	r0
    44d6:	0f be       	out	0x3f, r0	; 63
    44d8:	0f 90       	pop	r0
    44da:	1f 90       	pop	r1
    44dc:	18 95       	reti

000044de <__vector_5>:
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    44de:	1f 92       	push	r1
    44e0:	0f 92       	push	r0
    44e2:	0f b6       	in	r0, 0x3f	; 63
    44e4:	0f 92       	push	r0
    44e6:	11 24       	eor	r1, r1
    44e8:	2f 93       	push	r18
    44ea:	3f 93       	push	r19
    44ec:	4f 93       	push	r20
    44ee:	5f 93       	push	r21
    44f0:	6f 93       	push	r22
    44f2:	7f 93       	push	r23
    44f4:	8f 93       	push	r24
    44f6:	9f 93       	push	r25
    44f8:	af 93       	push	r26
    44fa:	bf 93       	push	r27
    44fc:	ef 93       	push	r30
    44fe:	ff 93       	push	r31
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER2_OVF] != NULL)
    4508:	80 91 32 02 	lds	r24, 0x0232
    450c:	90 91 33 02 	lds	r25, 0x0233
    4510:	00 97       	sbiw	r24, 0x00	; 0
    4512:	29 f0       	breq	.+10     	; 0x451e <__vector_5+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER2_OVF]();
    4514:	e0 91 32 02 	lds	r30, 0x0232
    4518:	f0 91 33 02 	lds	r31, 0x0233
    451c:	09 95       	icall
	}
}
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	ff 91       	pop	r31
    4524:	ef 91       	pop	r30
    4526:	bf 91       	pop	r27
    4528:	af 91       	pop	r26
    452a:	9f 91       	pop	r25
    452c:	8f 91       	pop	r24
    452e:	7f 91       	pop	r23
    4530:	6f 91       	pop	r22
    4532:	5f 91       	pop	r21
    4534:	4f 91       	pop	r20
    4536:	3f 91       	pop	r19
    4538:	2f 91       	pop	r18
    453a:	0f 90       	pop	r0
    453c:	0f be       	out	0x3f, r0	; 63
    453e:	0f 90       	pop	r0
    4540:	1f 90       	pop	r1
    4542:	18 95       	reti

00004544 <__vector_6>:
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    4544:	1f 92       	push	r1
    4546:	0f 92       	push	r0
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	0f 92       	push	r0
    454c:	11 24       	eor	r1, r1
    454e:	2f 93       	push	r18
    4550:	3f 93       	push	r19
    4552:	4f 93       	push	r20
    4554:	5f 93       	push	r21
    4556:	6f 93       	push	r22
    4558:	7f 93       	push	r23
    455a:	8f 93       	push	r24
    455c:	9f 93       	push	r25
    455e:	af 93       	push	r26
    4560:	bf 93       	push	r27
    4562:	ef 93       	push	r30
    4564:	ff 93       	push	r31
    4566:	df 93       	push	r29
    4568:	cf 93       	push	r28
    456a:	cd b7       	in	r28, 0x3d	; 61
    456c:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER1_CAPT] != NULL)
    456e:	80 91 3c 02 	lds	r24, 0x023C
    4572:	90 91 3d 02 	lds	r25, 0x023D
    4576:	00 97       	sbiw	r24, 0x00	; 0
    4578:	29 f0       	breq	.+10     	; 0x4584 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER1_CAPT]();
    457a:	e0 91 3c 02 	lds	r30, 0x023C
    457e:	f0 91 3d 02 	lds	r31, 0x023D
    4582:	09 95       	icall
	}
}
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	ff 91       	pop	r31
    458a:	ef 91       	pop	r30
    458c:	bf 91       	pop	r27
    458e:	af 91       	pop	r26
    4590:	9f 91       	pop	r25
    4592:	8f 91       	pop	r24
    4594:	7f 91       	pop	r23
    4596:	6f 91       	pop	r22
    4598:	5f 91       	pop	r21
    459a:	4f 91       	pop	r20
    459c:	3f 91       	pop	r19
    459e:	2f 91       	pop	r18
    45a0:	0f 90       	pop	r0
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	0f 90       	pop	r0
    45a6:	1f 90       	pop	r1
    45a8:	18 95       	reti

000045aa <__vector_9>:
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    45aa:	1f 92       	push	r1
    45ac:	0f 92       	push	r0
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	0f 92       	push	r0
    45b2:	11 24       	eor	r1, r1
    45b4:	2f 93       	push	r18
    45b6:	3f 93       	push	r19
    45b8:	4f 93       	push	r20
    45ba:	5f 93       	push	r21
    45bc:	6f 93       	push	r22
    45be:	7f 93       	push	r23
    45c0:	8f 93       	push	r24
    45c2:	9f 93       	push	r25
    45c4:	af 93       	push	r26
    45c6:	bf 93       	push	r27
    45c8:	ef 93       	push	r30
    45ca:	ff 93       	push	r31
    45cc:	df 93       	push	r29
    45ce:	cf 93       	push	r28
    45d0:	cd b7       	in	r28, 0x3d	; 61
    45d2:	de b7       	in	r29, 0x3e	; 62
	if(TIMERS_pvCallBackFuncArr[TIMER1_OVF] != NULL)
    45d4:	80 91 36 02 	lds	r24, 0x0236
    45d8:	90 91 37 02 	lds	r25, 0x0237
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	29 f0       	breq	.+10     	; 0x45ea <__vector_9+0x40>
	{
		TIMERS_pvCallBackFuncArr[TIMER1_OVF]();
    45e0:	e0 91 36 02 	lds	r30, 0x0236
    45e4:	f0 91 37 02 	lds	r31, 0x0237
    45e8:	09 95       	icall
	}
}
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	ff 91       	pop	r31
    45f0:	ef 91       	pop	r30
    45f2:	bf 91       	pop	r27
    45f4:	af 91       	pop	r26
    45f6:	9f 91       	pop	r25
    45f8:	8f 91       	pop	r24
    45fa:	7f 91       	pop	r23
    45fc:	6f 91       	pop	r22
    45fe:	5f 91       	pop	r21
    4600:	4f 91       	pop	r20
    4602:	3f 91       	pop	r19
    4604:	2f 91       	pop	r18
    4606:	0f 90       	pop	r0
    4608:	0f be       	out	0x3f, r0	; 63
    460a:	0f 90       	pop	r0
    460c:	1f 90       	pop	r1
    460e:	18 95       	reti

00004610 <TWI_voidMasterInit>:
#include "TWI_private.h"
#include "TWI_reg.h"


void TWI_voidMasterInit(uint8 Copy_u8Address)
{
    4610:	df 93       	push	r29
    4612:	cf 93       	push	r28
    4614:	0f 92       	push	r0
    4616:	cd b7       	in	r28, 0x3d	; 61
    4618:	de b7       	in	r29, 0x3e	; 62
    461a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8Address != 0u)
    461c:	89 81       	ldd	r24, Y+1	; 0x01
    461e:	88 23       	and	r24, r24
    4620:	29 f0       	breq	.+10     	; 0x462c <TWI_voidMasterInit+0x1c>
    {
    	/*SET Mode Address*/
    	TWAR = Copy_u8Address << 1u;
    4622:	e2 e2       	ldi	r30, 0x22	; 34
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	88 0f       	add	r24, r24
    462a:	80 83       	st	Z, r24
    }
    /*CPU frequency = 16MHz*/
    CLR_BIT(TWSR,TWSR_TWPS0);
    462c:	a1 e2       	ldi	r26, 0x21	; 33
    462e:	b0 e0       	ldi	r27, 0x00	; 0
    4630:	e1 e2       	ldi	r30, 0x21	; 33
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	80 81       	ld	r24, Z
    4636:	8e 7f       	andi	r24, 0xFE	; 254
    4638:	8c 93       	st	X, r24
    CLR_BIT(TWSR,TWSR_TWPS1);
    463a:	a1 e2       	ldi	r26, 0x21	; 33
    463c:	b0 e0       	ldi	r27, 0x00	; 0
    463e:	e1 e2       	ldi	r30, 0x21	; 33
    4640:	f0 e0       	ldi	r31, 0x00	; 0
    4642:	80 81       	ld	r24, Z
    4644:	8d 7f       	andi	r24, 0xFD	; 253
    4646:	8c 93       	st	X, r24
    TWBR =12u;
    4648:	e0 e2       	ldi	r30, 0x20	; 32
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	8c e0       	ldi	r24, 0x0C	; 12
    464e:	80 83       	st	Z, r24
    /*Enable acknowledge*/
    SET_BIT(TWCR,TWCR_TWEA);
    4650:	a6 e5       	ldi	r26, 0x56	; 86
    4652:	b0 e0       	ldi	r27, 0x00	; 0
    4654:	e6 e5       	ldi	r30, 0x56	; 86
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	80 81       	ld	r24, Z
    465a:	80 64       	ori	r24, 0x40	; 64
    465c:	8c 93       	st	X, r24
    SET_BIT(TWCR,TWCR_TWEN);
    465e:	a6 e5       	ldi	r26, 0x56	; 86
    4660:	b0 e0       	ldi	r27, 0x00	; 0
    4662:	e6 e5       	ldi	r30, 0x56	; 86
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	80 81       	ld	r24, Z
    4668:	84 60       	ori	r24, 0x04	; 4
    466a:	8c 93       	st	X, r24
}
    466c:	0f 90       	pop	r0
    466e:	cf 91       	pop	r28
    4670:	df 91       	pop	r29
    4672:	08 95       	ret

00004674 <TWI_voidSlaveInit>:
void TWI_voidSlaveInit(uint8 Copy_u8Address)
{
    4674:	df 93       	push	r29
    4676:	cf 93       	push	r28
    4678:	0f 92       	push	r0
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
    467e:	89 83       	std	Y+1, r24	; 0x01
	   if(Copy_u8Address != 0u)
    4680:	89 81       	ldd	r24, Y+1	; 0x01
    4682:	88 23       	and	r24, r24
    4684:	29 f0       	breq	.+10     	; 0x4690 <TWI_voidSlaveInit+0x1c>
	    {
	    	/*SET Mode Address*/
	    	TWAR = Copy_u8Address << 1u;
    4686:	e2 e2       	ldi	r30, 0x22	; 34
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	88 0f       	add	r24, r24
    468e:	80 83       	st	Z, r24
	    }

	    SET_BIT(TWCR,TWCR_TWEN);
    4690:	a6 e5       	ldi	r26, 0x56	; 86
    4692:	b0 e0       	ldi	r27, 0x00	; 0
    4694:	e6 e5       	ldi	r30, 0x56	; 86
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	80 81       	ld	r24, Z
    469a:	84 60       	ori	r24, 0x04	; 4
    469c:	8c 93       	st	X, r24
}
    469e:	0f 90       	pop	r0
    46a0:	cf 91       	pop	r28
    46a2:	df 91       	pop	r29
    46a4:	08 95       	ret

000046a6 <TWI_SendStartCondition>:
TWI_ErrorState_t TWI_SendStartCondition(void)
{
    46a6:	df 93       	push	r29
    46a8:	cf 93       	push	r28
    46aa:	0f 92       	push	r0
    46ac:	cd b7       	in	r28, 0x3d	; 61
    46ae:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_Error = NoError;
    46b0:	19 82       	std	Y+1, r1	; 0x01

	/*Set Start condition bit*/
	SET_BIT(TWCR,TWCR_TWSTA);
    46b2:	a6 e5       	ldi	r26, 0x56	; 86
    46b4:	b0 e0       	ldi	r27, 0x00	; 0
    46b6:	e6 e5       	ldi	r30, 0x56	; 86
    46b8:	f0 e0       	ldi	r31, 0x00	; 0
    46ba:	80 81       	ld	r24, Z
    46bc:	80 62       	ori	r24, 0x20	; 32
    46be:	8c 93       	st	X, r24
	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    46c0:	a6 e5       	ldi	r26, 0x56	; 86
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	e6 e5       	ldi	r30, 0x56	; 86
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	80 68       	ori	r24, 0x80	; 128
    46cc:	8c 93       	st	X, r24

	/*wait until the previous action finishes and the interrupt flag is raised again*/
	while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    46ce:	e6 e5       	ldi	r30, 0x56	; 86
    46d0:	f0 e0       	ldi	r31, 0x00	; 0
    46d2:	80 81       	ld	r24, Z
    46d4:	88 23       	and	r24, r24
    46d6:	dc f7       	brge	.-10     	; 0x46ce <TWI_SendStartCondition+0x28>

	if((TWSR & STATUS_BITS_MASK) != START_ACK)
    46d8:	e1 e2       	ldi	r30, 0x21	; 33
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	80 81       	ld	r24, Z
    46de:	88 2f       	mov	r24, r24
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	88 7f       	andi	r24, 0xF8	; 248
    46e4:	90 70       	andi	r25, 0x00	; 0
    46e6:	88 30       	cpi	r24, 0x08	; 8
    46e8:	91 05       	cpc	r25, r1
    46ea:	11 f0       	breq	.+4      	; 0x46f0 <TWI_SendStartCondition+0x4a>
	{
		Local_Error=StartConditionErr;
    46ec:	82 e0       	ldi	r24, 0x02	; 2
    46ee:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return Local_Error;
    46f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    46f2:	0f 90       	pop	r0
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <TWI_SendReapeatedStart>:
TWI_ErrorState_t TWI_SendReapeatedStart(void)
{
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	0f 92       	push	r0
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorState_t Local_Error = NoError;
    4704:	19 82       	std	Y+1, r1	; 0x01

	/*Set Start condition bit*/
	SET_BIT(TWCR,TWCR_TWSTA);
    4706:	a6 e5       	ldi	r26, 0x56	; 86
    4708:	b0 e0       	ldi	r27, 0x00	; 0
    470a:	e6 e5       	ldi	r30, 0x56	; 86
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	80 81       	ld	r24, Z
    4710:	80 62       	ori	r24, 0x20	; 32
    4712:	8c 93       	st	X, r24
	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    4714:	a6 e5       	ldi	r26, 0x56	; 86
    4716:	b0 e0       	ldi	r27, 0x00	; 0
    4718:	e6 e5       	ldi	r30, 0x56	; 86
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	80 81       	ld	r24, Z
    471e:	80 68       	ori	r24, 0x80	; 128
    4720:	8c 93       	st	X, r24

	/*wait until the previous action finishes and the interrupt flag is raised again*/
	while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4722:	e6 e5       	ldi	r30, 0x56	; 86
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	80 81       	ld	r24, Z
    4728:	88 23       	and	r24, r24
    472a:	dc f7       	brge	.-10     	; 0x4722 <TWI_SendReapeatedStart+0x28>

	/*Check the status of the bus*/
	if((TWSR & STATUS_BITS_MASK) != REP_START_ACK)
    472c:	e1 e2       	ldi	r30, 0x21	; 33
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	80 81       	ld	r24, Z
    4732:	88 2f       	mov	r24, r24
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	88 7f       	andi	r24, 0xF8	; 248
    4738:	90 70       	andi	r25, 0x00	; 0
    473a:	80 31       	cpi	r24, 0x10	; 16
    473c:	91 05       	cpc	r25, r1
    473e:	11 f0       	breq	.+4      	; 0x4744 <TWI_SendReapeatedStart+0x4a>
	{
		Local_Error=RepStartErr;
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return Local_Error;
    4744:	89 81       	ldd	r24, Y+1	; 0x01
}
    4746:	0f 90       	pop	r0
    4748:	cf 91       	pop	r28
    474a:	df 91       	pop	r29
    474c:	08 95       	ret

0000474e <TWI_SendSlaveAdressWithWrite>:
TWI_ErrorState_t TWI_SendSlaveAdressWithWrite(uint8 Copy_u8Address)
{
    474e:	df 93       	push	r29
    4750:	cf 93       	push	r28
    4752:	00 d0       	rcall	.+0      	; 0x4754 <TWI_SendSlaveAdressWithWrite+0x6>
    4754:	cd b7       	in	r28, 0x3d	; 61
    4756:	de b7       	in	r29, 0x3e	; 62
    4758:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_Error = NoError;
    475a:	19 82       	std	Y+1, r1	; 0x01
    /*Set the slave adress into the data register*/
    TWDR=Copy_u8Address << 1u;
    475c:	e3 e2       	ldi	r30, 0x23	; 35
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	8a 81       	ldd	r24, Y+2	; 0x02
    4762:	88 0f       	add	r24, r24
    4764:	80 83       	st	Z, r24

    /*Clear bit 0 for request*/
    CLR_BIT(TWDR,0u);
    4766:	a3 e2       	ldi	r26, 0x23	; 35
    4768:	b0 e0       	ldi	r27, 0x00	; 0
    476a:	e3 e2       	ldi	r30, 0x23	; 35
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	8e 7f       	andi	r24, 0xFE	; 254
    4772:	8c 93       	st	X, r24
    /*Clear the start condition*/
    CLR_BIT(TWCR,TWCR_TWSTA);
    4774:	a6 e5       	ldi	r26, 0x56	; 86
    4776:	b0 e0       	ldi	r27, 0x00	; 0
    4778:	e6 e5       	ldi	r30, 0x56	; 86
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	80 81       	ld	r24, Z
    477e:	8f 7d       	andi	r24, 0xDF	; 223
    4780:	8c 93       	st	X, r24

	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    4782:	a6 e5       	ldi	r26, 0x56	; 86
    4784:	b0 e0       	ldi	r27, 0x00	; 0
    4786:	e6 e5       	ldi	r30, 0x56	; 86
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	80 81       	ld	r24, Z
    478c:	80 68       	ori	r24, 0x80	; 128
    478e:	8c 93       	st	X, r24

	/*wait until the previous action finishes and the interrupt flag is raised again*/
	while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4790:	e6 e5       	ldi	r30, 0x56	; 86
    4792:	f0 e0       	ldi	r31, 0x00	; 0
    4794:	80 81       	ld	r24, Z
    4796:	88 23       	and	r24, r24
    4798:	dc f7       	brge	.-10     	; 0x4790 <TWI_SendSlaveAdressWithWrite+0x42>

	/*Check the status of the bus*/
	if((TWSR & STATUS_BITS_MASK) != SLAVE_ADD_AND_WR_ACK)
    479a:	e1 e2       	ldi	r30, 0x21	; 33
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	88 2f       	mov	r24, r24
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	88 7f       	andi	r24, 0xF8	; 248
    47a6:	90 70       	andi	r25, 0x00	; 0
    47a8:	88 31       	cpi	r24, 0x18	; 24
    47aa:	91 05       	cpc	r25, r1
    47ac:	11 f0       	breq	.+4      	; 0x47b2 <TWI_SendSlaveAdressWithWrite+0x64>
	{
		Local_Error=SlaveAddressWithWriteErr;
    47ae:	84 e0       	ldi	r24, 0x04	; 4
    47b0:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return Local_Error;
    47b2:	89 81       	ldd	r24, Y+1	; 0x01

}
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	cf 91       	pop	r28
    47ba:	df 91       	pop	r29
    47bc:	08 95       	ret

000047be <TWI_SendSlaveAdressWithRead>:
TWI_ErrorState_t TWI_SendSlaveAdressWithRead(uint8 Copy_u8Address)
{
    47be:	df 93       	push	r29
    47c0:	cf 93       	push	r28
    47c2:	00 d0       	rcall	.+0      	; 0x47c4 <TWI_SendSlaveAdressWithRead+0x6>
    47c4:	cd b7       	in	r28, 0x3d	; 61
    47c6:	de b7       	in	r29, 0x3e	; 62
    47c8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_Error = NoError;
    47ca:	19 82       	std	Y+1, r1	; 0x01


    /*Set the slave address into the data register*/
    TWDR=Copy_u8Address << 1u;
    47cc:	e3 e2       	ldi	r30, 0x23	; 35
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	8a 81       	ldd	r24, Y+2	; 0x02
    47d2:	88 0f       	add	r24, r24
    47d4:	80 83       	st	Z, r24

    /*Set bit 0 for request*/
    SET_BIT(TWDR,0u);
    47d6:	a3 e2       	ldi	r26, 0x23	; 35
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	e3 e2       	ldi	r30, 0x23	; 35
    47dc:	f0 e0       	ldi	r31, 0x00	; 0
    47de:	80 81       	ld	r24, Z
    47e0:	81 60       	ori	r24, 0x01	; 1
    47e2:	8c 93       	st	X, r24
    /*Clear the start condition*/
    CLR_BIT(TWCR,TWCR_TWSTA);
    47e4:	a6 e5       	ldi	r26, 0x56	; 86
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	e6 e5       	ldi	r30, 0x56	; 86
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	80 81       	ld	r24, Z
    47ee:	8f 7d       	andi	r24, 0xDF	; 223
    47f0:	8c 93       	st	X, r24

	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    47f2:	a6 e5       	ldi	r26, 0x56	; 86
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	e6 e5       	ldi	r30, 0x56	; 86
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	80 68       	ori	r24, 0x80	; 128
    47fe:	8c 93       	st	X, r24

	/*wait until the previous action finishes and the interrupt flag is raised again*/
	while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4800:	e6 e5       	ldi	r30, 0x56	; 86
    4802:	f0 e0       	ldi	r31, 0x00	; 0
    4804:	80 81       	ld	r24, Z
    4806:	88 23       	and	r24, r24
    4808:	dc f7       	brge	.-10     	; 0x4800 <TWI_SendSlaveAdressWithRead+0x42>

	/*Check the status of the bus*/
	if((TWSR & STATUS_BITS_MASK) != SLAVE_ADD_AND_RD_ACK)
    480a:	e1 e2       	ldi	r30, 0x21	; 33
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	88 2f       	mov	r24, r24
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	88 7f       	andi	r24, 0xF8	; 248
    4816:	90 70       	andi	r25, 0x00	; 0
    4818:	80 34       	cpi	r24, 0x40	; 64
    481a:	91 05       	cpc	r25, r1
    481c:	11 f0       	breq	.+4      	; 0x4822 <TWI_SendSlaveAdressWithRead+0x64>
	{
		Local_Error=SlaveAddressWithReadErr;
    481e:	85 e0       	ldi	r24, 0x05	; 5
    4820:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	return Local_Error;
    4822:	89 81       	ldd	r24, Y+1	; 0x01
}
    4824:	0f 90       	pop	r0
    4826:	0f 90       	pop	r0
    4828:	cf 91       	pop	r28
    482a:	df 91       	pop	r29
    482c:	08 95       	ret

0000482e <TWI_MstrWriteDataByte>:
TWI_ErrorState_t TWI_MstrWriteDataByte(uint8 Copy_Data)
{
    482e:	df 93       	push	r29
    4830:	cf 93       	push	r28
    4832:	00 d0       	rcall	.+0      	; 0x4834 <TWI_MstrWriteDataByte+0x6>
    4834:	cd b7       	in	r28, 0x3d	; 61
    4836:	de b7       	in	r29, 0x3e	; 62
    4838:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_Error = NoError;
    483a:	19 82       	std	Y+1, r1	; 0x01

	/*Put the data byte on the bus*/
    TWDR = Copy_Data;
    483c:	e3 e2       	ldi	r30, 0x23	; 35
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	8a 81       	ldd	r24, Y+2	; 0x02
    4842:	80 83       	st	Z, r24


	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    4844:	a6 e5       	ldi	r26, 0x56	; 86
    4846:	b0 e0       	ldi	r27, 0x00	; 0
    4848:	e6 e5       	ldi	r30, 0x56	; 86
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	80 81       	ld	r24, Z
    484e:	80 68       	ori	r24, 0x80	; 128
    4850:	8c 93       	st	X, r24

	/*wait until the previous action finishes and the interrupt flag is raised again*/
	while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    4852:	e6 e5       	ldi	r30, 0x56	; 86
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	80 81       	ld	r24, Z
    4858:	88 23       	and	r24, r24
    485a:	dc f7       	brge	.-10     	; 0x4852 <TWI_MstrWriteDataByte+0x24>

	/*Check the status of the bus*/
	if((TWSR & STATUS_BITS_MASK) != MSTR_WR_BYTE_ACK)
    485c:	e1 e2       	ldi	r30, 0x21	; 33
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	88 2f       	mov	r24, r24
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	88 7f       	andi	r24, 0xF8	; 248
    4868:	90 70       	andi	r25, 0x00	; 0
    486a:	88 32       	cpi	r24, 0x28	; 40
    486c:	91 05       	cpc	r25, r1
    486e:	11 f0       	breq	.+4      	; 0x4874 <TWI_MstrWriteDataByte+0x46>
	{
		Local_Error=MstrWriteByteWithAckErr;
    4870:	86 e0       	ldi	r24, 0x06	; 6
    4872:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}

	return Local_Error;
    4874:	89 81       	ldd	r24, Y+1	; 0x01
}
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	cf 91       	pop	r28
    487c:	df 91       	pop	r29
    487e:	08 95       	ret

00004880 <TWI_MstrReadDataByte>:
TWI_ErrorState_t TWI_MstrReadDataByte(uint8 *Copy_Data)
{
    4880:	df 93       	push	r29
    4882:	cf 93       	push	r28
    4884:	00 d0       	rcall	.+0      	; 0x4886 <TWI_MstrReadDataByte+0x6>
    4886:	0f 92       	push	r0
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
    488c:	9b 83       	std	Y+3, r25	; 0x03
    488e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorState_t Local_Error = NoError;
    4890:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_Data != NULL)
    4892:	8a 81       	ldd	r24, Y+2	; 0x02
    4894:	9b 81       	ldd	r25, Y+3	; 0x03
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	01 f1       	breq	.+64     	; 0x48da <TWI_MstrReadDataByte+0x5a>
	{
		/*Clear interrupt flag to enable Slave to send data*/
		SET_BIT(TWCR,TWCR_TWINT);
    489a:	a6 e5       	ldi	r26, 0x56	; 86
    489c:	b0 e0       	ldi	r27, 0x00	; 0
    489e:	e6 e5       	ldi	r30, 0x56	; 86
    48a0:	f0 e0       	ldi	r31, 0x00	; 0
    48a2:	80 81       	ld	r24, Z
    48a4:	80 68       	ori	r24, 0x80	; 128
    48a6:	8c 93       	st	X, r24
		/*wait until the slave writing finishes and the interrupt flag is raised again*/
		while ((GET_BIT(TWCR,TWCR_TWINT)) == 0);
    48a8:	e6 e5       	ldi	r30, 0x56	; 86
    48aa:	f0 e0       	ldi	r31, 0x00	; 0
    48ac:	80 81       	ld	r24, Z
    48ae:	88 23       	and	r24, r24
    48b0:	dc f7       	brge	.-10     	; 0x48a8 <TWI_MstrReadDataByte+0x28>

		/*Check the status of the bus*/
		if((TWSR & STATUS_BITS_MASK) != MSTR_RD_BYTE_WITH_ACK)
    48b2:	e1 e2       	ldi	r30, 0x21	; 33
    48b4:	f0 e0       	ldi	r31, 0x00	; 0
    48b6:	80 81       	ld	r24, Z
    48b8:	88 2f       	mov	r24, r24
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	88 7f       	andi	r24, 0xF8	; 248
    48be:	90 70       	andi	r25, 0x00	; 0
    48c0:	80 35       	cpi	r24, 0x50	; 80
    48c2:	91 05       	cpc	r25, r1
    48c4:	19 f0       	breq	.+6      	; 0x48cc <TWI_MstrReadDataByte+0x4c>
		{
			Local_Error=MstrReadByteWithAck;
    48c6:	87 e0       	ldi	r24, 0x07	; 7
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	09 c0       	rjmp	.+18     	; 0x48de <TWI_MstrReadDataByte+0x5e>
		}
		else
		{
			/*Read the data sent from slave*/
           *Copy_Data = TWDR;
    48cc:	e3 e2       	ldi	r30, 0x23	; 35
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	ea 81       	ldd	r30, Y+2	; 0x02
    48d4:	fb 81       	ldd	r31, Y+3	; 0x03
    48d6:	80 83       	st	Z, r24
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <TWI_MstrReadDataByte+0x5e>
		}

	}
	else
	{
		Local_Error = NULLPtrErr;
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_Error;
    48de:	89 81       	ldd	r24, Y+1	; 0x01
}
    48e0:	0f 90       	pop	r0
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	cf 91       	pop	r28
    48e8:	df 91       	pop	r29
    48ea:	08 95       	ret

000048ec <TWI_voidStopCondition>:
void TWI_voidStopCondition(void)
{
    48ec:	df 93       	push	r29
    48ee:	cf 93       	push	r28
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
	/*Set the stop condition bit */
    SET_BIT(TWCR,TWCR_TWSTO);
    48f4:	a6 e5       	ldi	r26, 0x56	; 86
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e6 e5       	ldi	r30, 0x56	; 86
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	80 61       	ori	r24, 0x10	; 16
    4900:	8c 93       	st	X, r24
	/*Clear interrupt flag to enable previous action to happen*/
	SET_BIT(TWCR,TWCR_TWINT);
    4902:	a6 e5       	ldi	r26, 0x56	; 86
    4904:	b0 e0       	ldi	r27, 0x00	; 0
    4906:	e6 e5       	ldi	r30, 0x56	; 86
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	80 68       	ori	r24, 0x80	; 128
    490e:	8c 93       	st	X, r24
}
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <UART_voidInit>:
static uint8 UART_u8RecieveSize=0;
static uint8 UART_u8SendCounter=0;
static uint8 UART_u8RecieveCounter=0;
static uint8 UART_TimeoutRecieveFlag=0;
void UART_voidInit(void)
{
    4916:	df 93       	push	r29
    4918:	cf 93       	push	r28
    491a:	00 d0       	rcall	.+0      	; 0x491c <UART_voidInit+0x6>
    491c:	0f 92       	push	r0
    491e:	cd b7       	in	r28, 0x3d	; 61
    4920:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8UCSRC=0;
    4922:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16Speed=0;
    4924:	1a 82       	std	Y+2, r1	; 0x02
    4926:	19 82       	std	Y+1, r1	; 0x01
#if UART_RX_ACTIVATION    ==    UART_RX_ENABLE
   SET_BIT(UCSRB,UCSRB_RXEN); 	/*Enable Receive Bit*/
    4928:	aa e2       	ldi	r26, 0x2A	; 42
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	ea e2       	ldi	r30, 0x2A	; 42
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	80 61       	ori	r24, 0x10	; 16
    4934:	8c 93       	st	X, r24
#elif UART_RX_ACTIVATION    ==   UART_RX_DISABLE
   CLR_BIT(UCSRB,UCSRB_RXEN); 	/*DISABLE Receive Bit*/
#else #error wrong UART RX configuration
#endif
#if UART_TX_ACTIVATION    ==    UART_TX_ENABLE
   SET_BIT(UCSRB,UCSRB_TXEN); 	/*Enable Transmitting Bit*/
    4936:	aa e2       	ldi	r26, 0x2A	; 42
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	ea e2       	ldi	r30, 0x2A	; 42
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	88 60       	ori	r24, 0x08	; 8
    4942:	8c 93       	st	X, r24
   CLR_BIT(UCSRB,UCSRB_TXEN);; 	/*Disable Transmitting Bit*/
#else #error wrong UART TX configuration
#endif
#if UART_DATABIT_MODE   ==    UART_8BITDATA
   /*8 Bit Data */
   CLR_BIT(UCSRB,UCSRB_UCSZ2);
    4944:	aa e2       	ldi	r26, 0x2A	; 42
    4946:	b0 e0       	ldi	r27, 0x00	; 0
    4948:	ea e2       	ldi	r30, 0x2A	; 42
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	80 81       	ld	r24, Z
    494e:	8b 7f       	andi	r24, 0xFB	; 251
    4950:	8c 93       	st	X, r24
   SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    4952:	8b 81       	ldd	r24, Y+3	; 0x03
    4954:	82 60       	ori	r24, 0x02	; 2
    4956:	8b 83       	std	Y+3, r24	; 0x03
   SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    4958:	8b 81       	ldd	r24, Y+3	; 0x03
    495a:	84 60       	ori	r24, 0x04	; 4
    495c:	8b 83       	std	Y+3, r24	; 0x03
   SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
#else #error wrong Bit data configuration
#endif
#if UART_STOPBIT_MODE    ==    UART_STOPBIT1
   /*Stop bit 1 bit*/
   CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    495e:	8b 81       	ldd	r24, Y+3	; 0x03
    4960:	87 7f       	andi	r24, 0xF7	; 247
    4962:	8b 83       	std	Y+3, r24	; 0x03
   SET_BIT(Local_u8UCSRC,UCSRC_USBS);
#else #error Wrong stop bit configuration
#endif
#if UART_PARITY_MODE    ==    UART_NOPARITY
   /*No parity*/
   CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
    4964:	8b 81       	ldd	r24, Y+3	; 0x03
    4966:	8f 7e       	andi	r24, 0xEF	; 239
    4968:	8b 83       	std	Y+3, r24	; 0x03
   CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
    496a:	8b 81       	ldd	r24, Y+3	; 0x03
    496c:	8f 7d       	andi	r24, 0xDF	; 223
    496e:	8b 83       	std	Y+3, r24	; 0x03
   CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
   SET_BIT(Local_u8UCSRC,UCSRC_UPM1);
#else #error Wrong parity check mode configuration
#endif
   /*Baud rate calculation*/
   Local_u16Speed = (uint16)((16000000ul/(16*(uint32)UART_BAUDRATE))-1);
    4970:	87 e6       	ldi	r24, 0x67	; 103
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	9a 83       	std	Y+2, r25	; 0x02
    4976:	89 83       	std	Y+1, r24	; 0x01
   if(Local_u16Speed <= 255u)
    4978:	89 81       	ldd	r24, Y+1	; 0x01
    497a:	9a 81       	ldd	r25, Y+2	; 0x02
    497c:	8f 3f       	cpi	r24, 0xFF	; 255
    497e:	91 05       	cpc	r25, r1
    4980:	09 f0       	breq	.+2      	; 0x4984 <UART_voidInit+0x6e>
    4982:	28 f4       	brcc	.+10     	; 0x498e <UART_voidInit+0x78>
   {
	   UBRRL = (uint8)Local_u16Speed;
    4984:	e9 e2       	ldi	r30, 0x29	; 41
    4986:	f0 e0       	ldi	r31, 0x00	; 0
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	80 83       	st	Z, r24
    498c:	0f c0       	rjmp	.+30     	; 0x49ac <UART_voidInit+0x96>
   }
   else
   {
	   UBRRL = (uint8)Local_u16Speed;
    498e:	e9 e2       	ldi	r30, 0x29	; 41
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	80 83       	st	Z, r24
	   Local_u16Speed = Local_u16Speed >> 8;
    4996:	89 81       	ldd	r24, Y+1	; 0x01
    4998:	9a 81       	ldd	r25, Y+2	; 0x02
    499a:	89 2f       	mov	r24, r25
    499c:	99 27       	eor	r25, r25
    499e:	9a 83       	std	Y+2, r25	; 0x02
    49a0:	89 83       	std	Y+1, r24	; 0x01
	   UBRRH = 0x0f & (uint8)Local_u16Speed;
    49a2:	e0 e4       	ldi	r30, 0x40	; 64
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
    49a8:	8f 70       	andi	r24, 0x0F	; 15
    49aa:	80 83       	st	Z, r24
   }
   /*Writing to control register*/
   SET_BIT(Local_u8UCSRC,UCSRC_URSEL);
    49ac:	8b 81       	ldd	r24, Y+3	; 0x03
    49ae:	80 68       	ori	r24, 0x80	; 128
    49b0:	8b 83       	std	Y+3, r24	; 0x03
   UCSRC=Local_u8UCSRC;
    49b2:	e0 e4       	ldi	r30, 0x40	; 64
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	80 83       	st	Z, r24
}
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <UART_voidTransData>:
void UART_voidTransData(uint8 Copy_u8Data)
{
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	00 d0       	rcall	.+0      	; 0x49cc <UART_voidTransData+0x6>
    49cc:	0f 92       	push	r0
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 Local_u16TimeoutCounter=0;
    49d4:	1a 82       	std	Y+2, r1	; 0x02
    49d6:	19 82       	std	Y+1, r1	; 0x01
	/*Checking the transmit buffer is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
    49d8:	eb e2       	ldi	r30, 0x2B	; 43
    49da:	f0 e0       	ldi	r31, 0x00	; 0
    49dc:	80 81       	ld	r24, Z
    49de:	82 95       	swap	r24
    49e0:	86 95       	lsr	r24
    49e2:	87 70       	andi	r24, 0x07	; 7
    49e4:	88 2f       	mov	r24, r24
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	81 70       	andi	r24, 0x01	; 1
    49ea:	90 70       	andi	r25, 0x00	; 0
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	a1 f3       	breq	.-24     	; 0x49d8 <UART_voidTransData+0x12>
    	UDR= Copy_u8Data;
    49f0:	ec e2       	ldi	r30, 0x2C	; 44
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	8b 81       	ldd	r24, Y+3	; 0x03
    49f6:	80 83       	st	Z, r24

}
    49f8:	0f 90       	pop	r0
    49fa:	0f 90       	pop	r0
    49fc:	0f 90       	pop	r0
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	08 95       	ret

00004a04 <UART_u8RecieveData>:
uint8 UART_u8RecieveData(void)
{
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	00 d0       	rcall	.+0      	; 0x4a0a <UART_u8RecieveData+0x6>
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <UART_u8RecieveData+0x8>
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
	uint32 Local_u32TimeoutCounter=0u;
    4a10:	19 82       	std	Y+1, r1	; 0x01
    4a12:	1a 82       	std	Y+2, r1	; 0x02
    4a14:	1b 82       	std	Y+3, r1	; 0x03
    4a16:	1c 82       	std	Y+4, r1	; 0x04
	UART_TimeoutRecieveFlag=0;
    4a18:	10 92 4b 02 	sts	0x024B, r1
    4a1c:	0b c0       	rjmp	.+22     	; 0x4a34 <UART_u8RecieveData+0x30>
   while(GET_BIT(UCSRA,UCSRA_RXC)==0  && Local_u32TimeoutCounter <= 50000u)
   {
	   Local_u32TimeoutCounter++;
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	9a 81       	ldd	r25, Y+2	; 0x02
    4a22:	ab 81       	ldd	r26, Y+3	; 0x03
    4a24:	bc 81       	ldd	r27, Y+4	; 0x04
    4a26:	01 96       	adiw	r24, 0x01	; 1
    4a28:	a1 1d       	adc	r26, r1
    4a2a:	b1 1d       	adc	r27, r1
    4a2c:	89 83       	std	Y+1, r24	; 0x01
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	ab 83       	std	Y+3, r26	; 0x03
    4a32:	bc 83       	std	Y+4, r27	; 0x04
}
uint8 UART_u8RecieveData(void)
{
	uint32 Local_u32TimeoutCounter=0u;
	UART_TimeoutRecieveFlag=0;
   while(GET_BIT(UCSRA,UCSRA_RXC)==0  && Local_u32TimeoutCounter <= 50000u)
    4a34:	eb e2       	ldi	r30, 0x2B	; 43
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	88 23       	and	r24, r24
    4a3c:	64 f0       	brlt	.+24     	; 0x4a56 <UART_u8RecieveData+0x52>
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	9a 81       	ldd	r25, Y+2	; 0x02
    4a42:	ab 81       	ldd	r26, Y+3	; 0x03
    4a44:	bc 81       	ldd	r27, Y+4	; 0x04
    4a46:	81 35       	cpi	r24, 0x51	; 81
    4a48:	23 ec       	ldi	r18, 0xC3	; 195
    4a4a:	92 07       	cpc	r25, r18
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	a2 07       	cpc	r26, r18
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	b2 07       	cpc	r27, r18
    4a54:	20 f3       	brcs	.-56     	; 0x4a1e <UART_u8RecieveData+0x1a>
   {
	   Local_u32TimeoutCounter++;
   }
   if(Local_u32TimeoutCounter > 50000u)
    4a56:	89 81       	ldd	r24, Y+1	; 0x01
    4a58:	9a 81       	ldd	r25, Y+2	; 0x02
    4a5a:	ab 81       	ldd	r26, Y+3	; 0x03
    4a5c:	bc 81       	ldd	r27, Y+4	; 0x04
    4a5e:	81 35       	cpi	r24, 0x51	; 81
    4a60:	23 ec       	ldi	r18, 0xC3	; 195
    4a62:	92 07       	cpc	r25, r18
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	a2 07       	cpc	r26, r18
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	b2 07       	cpc	r27, r18
    4a6c:	20 f0       	brcs	.+8      	; 0x4a76 <UART_u8RecieveData+0x72>
   {
	   UART_TimeoutRecieveFlag = 1u;
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	80 93 4b 02 	sts	0x024B, r24
    4a74:	04 c0       	rjmp	.+8      	; 0x4a7e <UART_u8RecieveData+0x7a>
   }
   else
   {
	   Local_u32TimeoutCounter = 0u;
    4a76:	19 82       	std	Y+1, r1	; 0x01
    4a78:	1a 82       	std	Y+2, r1	; 0x02
    4a7a:	1b 82       	std	Y+3, r1	; 0x03
    4a7c:	1c 82       	std	Y+4, r1	; 0x04
   }
   return UDR;
    4a7e:	ec e2       	ldi	r30, 0x2C	; 44
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	80 81       	ld	r24, Z
}
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	cf 91       	pop	r28
    4a8e:	df 91       	pop	r29
    4a90:	08 95       	ret

00004a92 <UART_u8SendString>:
uint8 UART_u8SendString(const char *Copy_pString)
{
    4a92:	df 93       	push	r29
    4a94:	cf 93       	push	r28
    4a96:	00 d0       	rcall	.+0      	; 0x4a98 <UART_u8SendString+0x6>
    4a98:	00 d0       	rcall	.+0      	; 0x4a9a <UART_u8SendString+0x8>
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	9c 83       	std	Y+4, r25	; 0x04
    4aa0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState=OK;
    4aa2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Local_u8Counter=0;
    4aa4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pString != NULL)
    4aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aaa:	00 97       	sbiw	r24, 0x00	; 0
    4aac:	d9 f0       	breq	.+54     	; 0x4ae4 <UART_u8SendString+0x52>
    4aae:	0e c0       	rjmp	.+28     	; 0x4acc <UART_u8SendString+0x3a>
	{
		while(Copy_pString[Local_u8Counter] != '\0')
		{
			UART_voidTransData(Copy_pString[Local_u8Counter]);
    4ab0:	89 81       	ldd	r24, Y+1	; 0x01
    4ab2:	28 2f       	mov	r18, r24
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aba:	fc 01       	movw	r30, r24
    4abc:	e2 0f       	add	r30, r18
    4abe:	f3 1f       	adc	r31, r19
    4ac0:	80 81       	ld	r24, Z
    4ac2:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <UART_voidTransData>
			Local_u8Counter++;
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
    4ac8:	8f 5f       	subi	r24, 0xFF	; 255
    4aca:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState=OK;
	uint8 Local_u8Counter=0;
	if(Copy_pString != NULL)
	{
		while(Copy_pString[Local_u8Counter] != '\0')
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	28 2f       	mov	r18, r24
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	e2 0f       	add	r30, r18
    4ada:	f3 1f       	adc	r31, r19
    4adc:	80 81       	ld	r24, Z
    4ade:	88 23       	and	r24, r24
    4ae0:	39 f7       	brne	.-50     	; 0x4ab0 <UART_u8SendString+0x1e>
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <UART_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState=NULL_PTR_ERR;
    4ae4:	82 e0       	ldi	r24, 0x02	; 2
    4ae6:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    4ae8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4aea:	0f 90       	pop	r0
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	cf 91       	pop	r28
    4af4:	df 91       	pop	r29
    4af6:	08 95       	ret

00004af8 <UART_voidRecieveBufferSynch>:
uint8 UART_voidRecieveBufferSynch(uint8 Copy_u8DataArr[],uint8 Copy_u8Size)
{
    4af8:	0f 93       	push	r16
    4afa:	1f 93       	push	r17
    4afc:	df 93       	push	r29
    4afe:	cf 93       	push	r28
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <UART_voidRecieveBufferSynch+0xa>
    4b02:	00 d0       	rcall	.+0      	; 0x4b04 <UART_voidRecieveBufferSynch+0xc>
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	9b 83       	std	Y+3, r25	; 0x03
    4b0a:	8a 83       	std	Y+2, r24	; 0x02
    4b0c:	6c 83       	std	Y+4, r22	; 0x04
   uint8 Local_u8Counter=0;
    4b0e:	19 82       	std	Y+1, r1	; 0x01
    4b10:	13 c0       	rjmp	.+38     	; 0x4b38 <UART_voidRecieveBufferSynch+0x40>

   while(Local_u8Counter < Copy_u8Size)
   {
	   Copy_u8DataArr[Local_u8Counter] = UART_u8RecieveData();
    4b12:	89 81       	ldd	r24, Y+1	; 0x01
    4b14:	28 2f       	mov	r18, r24
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1c:	8c 01       	movw	r16, r24
    4b1e:	02 0f       	add	r16, r18
    4b20:	13 1f       	adc	r17, r19
    4b22:	0e 94 02 25 	call	0x4a04	; 0x4a04 <UART_u8RecieveData>
    4b26:	f8 01       	movw	r30, r16
    4b28:	80 83       	st	Z, r24
	   Local_u8Counter++;
    4b2a:	89 81       	ldd	r24, Y+1	; 0x01
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	89 83       	std	Y+1, r24	; 0x01
       if(UART_TimeoutRecieveFlag == 1)
    4b30:	80 91 4b 02 	lds	r24, 0x024B
    4b34:	81 30       	cpi	r24, 0x01	; 1
    4b36:	21 f0       	breq	.+8      	; 0x4b40 <UART_voidRecieveBufferSynch+0x48>
}
uint8 UART_voidRecieveBufferSynch(uint8 Copy_u8DataArr[],uint8 Copy_u8Size)
{
   uint8 Local_u8Counter=0;

   while(Local_u8Counter < Copy_u8Size)
    4b38:	99 81       	ldd	r25, Y+1	; 0x01
    4b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b3c:	98 17       	cp	r25, r24
    4b3e:	48 f3       	brcs	.-46     	; 0x4b12 <UART_voidRecieveBufferSynch+0x1a>
       if(UART_TimeoutRecieveFlag == 1)
       {
    	   break;
       }
   }
   return 1;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
}
    4b42:	0f 90       	pop	r0
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0
    4b4a:	cf 91       	pop	r28
    4b4c:	df 91       	pop	r29
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	08 95       	ret

00004b54 <UART_voidSendBufferAsynch>:
uint8 UART_voidSendBufferAsynch(uint8 Copy_u8DataArr[],uint8 Copy_u8Size,void(*Copy_pvCallBackFunc)(void))
{
    4b54:	df 93       	push	r29
    4b56:	cf 93       	push	r28
    4b58:	00 d0       	rcall	.+0      	; 0x4b5a <UART_voidSendBufferAsynch+0x6>
    4b5a:	00 d0       	rcall	.+0      	; 0x4b5c <UART_voidSendBufferAsynch+0x8>
    4b5c:	00 d0       	rcall	.+0      	; 0x4b5e <UART_voidSendBufferAsynch+0xa>
    4b5e:	cd b7       	in	r28, 0x3d	; 61
    4b60:	de b7       	in	r29, 0x3e	; 62
    4b62:	9b 83       	std	Y+3, r25	; 0x03
    4b64:	8a 83       	std	Y+2, r24	; 0x02
    4b66:	6c 83       	std	Y+4, r22	; 0x04
    4b68:	5e 83       	std	Y+6, r21	; 0x06
    4b6a:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState=OK;
    4b6c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc != NULL)
    4b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b70:	9e 81       	ldd	r25, Y+6	; 0x06
    4b72:	00 97       	sbiw	r24, 0x00	; 0
    4b74:	39 f1       	breq	.+78     	; 0x4bc4 <UART_voidSendBufferAsynch+0x70>
    {
    	/*Initialize the data globally*/
    	UART_pvSendCallBackFunc = Copy_pvCallBackFunc;
    4b76:	8d 81       	ldd	r24, Y+5	; 0x05
    4b78:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7a:	90 93 42 02 	sts	0x0242, r25
    4b7e:	80 93 41 02 	sts	0x0241, r24
    	UART_pu8SendArr = Copy_u8DataArr;
    4b82:	8a 81       	ldd	r24, Y+2	; 0x02
    4b84:	9b 81       	ldd	r25, Y+3	; 0x03
    4b86:	90 93 44 02 	sts	0x0244, r25
    4b8a:	80 93 43 02 	sts	0x0243, r24
    	UART_u8SendSize = Copy_u8Size;
    4b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b90:	80 93 47 02 	sts	0x0247, r24
    	UART_u8SendCounter=0;
    4b94:	10 92 49 02 	sts	0x0249, r1
        /*interrupt enable*/
        SET_BIT(UCSRB,UCSRB_TXCIE);
    4b98:	aa e2       	ldi	r26, 0x2A	; 42
    4b9a:	b0 e0       	ldi	r27, 0x00	; 0
    4b9c:	ea e2       	ldi	r30, 0x2A	; 42
    4b9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ba0:	80 81       	ld	r24, Z
    4ba2:	80 64       	ori	r24, 0x40	; 64
    4ba4:	8c 93       	st	X, r24
        UDR = UART_pu8SendArr[UART_u8SendCounter];
    4ba6:	ac e2       	ldi	r26, 0x2C	; 44
    4ba8:	b0 e0       	ldi	r27, 0x00	; 0
    4baa:	20 91 43 02 	lds	r18, 0x0243
    4bae:	30 91 44 02 	lds	r19, 0x0244
    4bb2:	80 91 49 02 	lds	r24, 0x0249
    4bb6:	88 2f       	mov	r24, r24
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	f9 01       	movw	r30, r18
    4bbc:	e8 0f       	add	r30, r24
    4bbe:	f9 1f       	adc	r31, r25
    4bc0:	80 81       	ld	r24, Z
    4bc2:	8c 93       	st	X, r24
    }
	return Local_u8ErrorState;
    4bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bc6:	26 96       	adiw	r28, 0x06	; 6
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <UART_voidRecieveBufferAsynch>:
uint8 UART_voidRecieveBufferAsynch(uint8 Copy_u8DataArr[],uint8 Copy_u8Size,void(*Copy_pvCallBackFunc)(void))
{
    4bd8:	df 93       	push	r29
    4bda:	cf 93       	push	r28
    4bdc:	00 d0       	rcall	.+0      	; 0x4bde <UART_voidRecieveBufferAsynch+0x6>
    4bde:	00 d0       	rcall	.+0      	; 0x4be0 <UART_voidRecieveBufferAsynch+0x8>
    4be0:	00 d0       	rcall	.+0      	; 0x4be2 <UART_voidRecieveBufferAsynch+0xa>
    4be2:	cd b7       	in	r28, 0x3d	; 61
    4be4:	de b7       	in	r29, 0x3e	; 62
    4be6:	9b 83       	std	Y+3, r25	; 0x03
    4be8:	8a 83       	std	Y+2, r24	; 0x02
    4bea:	6c 83       	std	Y+4, r22	; 0x04
    4bec:	5e 83       	std	Y+6, r21	; 0x06
    4bee:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState=OK;
    4bf0:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pvCallBackFunc != NULL)
    4bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf6:	00 97       	sbiw	r24, 0x00	; 0
    4bf8:	39 f1       	breq	.+78     	; 0x4c48 <UART_voidRecieveBufferAsynch+0x70>
    {
    	/*Initialize the data globally*/
    	UART_pvRecieveCallBackFunc = Copy_pvCallBackFunc;
    4bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfe:	90 93 40 02 	sts	0x0240, r25
    4c02:	80 93 3f 02 	sts	0x023F, r24
    	UART_pu8RecieveArr = Copy_u8DataArr;
    4c06:	8a 81       	ldd	r24, Y+2	; 0x02
    4c08:	9b 81       	ldd	r25, Y+3	; 0x03
    4c0a:	90 93 46 02 	sts	0x0246, r25
    4c0e:	80 93 45 02 	sts	0x0245, r24
    	UART_u8RecieveSize = Copy_u8Size;
    4c12:	8c 81       	ldd	r24, Y+4	; 0x04
    4c14:	80 93 48 02 	sts	0x0248, r24
    	UART_u8RecieveCounter=0;
    4c18:	10 92 4a 02 	sts	0x024A, r1
        /*interrupt enable*/
        SET_BIT(UCSRB,UCSRB_RXCIE);
    4c1c:	aa e2       	ldi	r26, 0x2A	; 42
    4c1e:	b0 e0       	ldi	r27, 0x00	; 0
    4c20:	ea e2       	ldi	r30, 0x2A	; 42
    4c22:	f0 e0       	ldi	r31, 0x00	; 0
    4c24:	80 81       	ld	r24, Z
    4c26:	80 68       	ori	r24, 0x80	; 128
    4c28:	8c 93       	st	X, r24
        UART_pu8RecieveArr[UART_u8RecieveCounter] = UDR;
    4c2a:	20 91 45 02 	lds	r18, 0x0245
    4c2e:	30 91 46 02 	lds	r19, 0x0246
    4c32:	80 91 4a 02 	lds	r24, 0x024A
    4c36:	88 2f       	mov	r24, r24
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	d9 01       	movw	r26, r18
    4c3c:	a8 0f       	add	r26, r24
    4c3e:	b9 1f       	adc	r27, r25
    4c40:	ec e2       	ldi	r30, 0x2C	; 44
    4c42:	f0 e0       	ldi	r31, 0x00	; 0
    4c44:	80 81       	ld	r24, Z
    4c46:	8c 93       	st	X, r24
    }
	return Local_u8ErrorState;
    4c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c4a:	26 96       	adiw	r28, 0x06	; 6
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <__vector_15>:
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
    4c5c:	1f 92       	push	r1
    4c5e:	0f 92       	push	r0
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	0f 92       	push	r0
    4c64:	11 24       	eor	r1, r1
    4c66:	2f 93       	push	r18
    4c68:	3f 93       	push	r19
    4c6a:	4f 93       	push	r20
    4c6c:	5f 93       	push	r21
    4c6e:	6f 93       	push	r22
    4c70:	7f 93       	push	r23
    4c72:	8f 93       	push	r24
    4c74:	9f 93       	push	r25
    4c76:	af 93       	push	r26
    4c78:	bf 93       	push	r27
    4c7a:	ef 93       	push	r30
    4c7c:	ff 93       	push	r31
    4c7e:	df 93       	push	r29
    4c80:	cf 93       	push	r28
    4c82:	cd b7       	in	r28, 0x3d	; 61
    4c84:	de b7       	in	r29, 0x3e	; 62
	if(UART_pu8SendArr != NULL)
    4c86:	80 91 43 02 	lds	r24, 0x0243
    4c8a:	90 91 44 02 	lds	r25, 0x0244
    4c8e:	00 97       	sbiw	r24, 0x00	; 0
    4c90:	79 f1       	breq	.+94     	; 0x4cf0 <__vector_15+0x94>
	{
		UART_u8SendCounter++;
    4c92:	80 91 49 02 	lds	r24, 0x0249
    4c96:	8f 5f       	subi	r24, 0xFF	; 255
    4c98:	80 93 49 02 	sts	0x0249, r24
		if(UART_u8SendCounter < UART_u8SendSize)
    4c9c:	90 91 49 02 	lds	r25, 0x0249
    4ca0:	80 91 47 02 	lds	r24, 0x0247
    4ca4:	98 17       	cp	r25, r24
    4ca6:	80 f4       	brcc	.+32     	; 0x4cc8 <__vector_15+0x6c>
		{
			/*Send data doesn't complete send the next data*/
	        UDR = UART_pu8SendArr[UART_u8SendCounter];
    4ca8:	ac e2       	ldi	r26, 0x2C	; 44
    4caa:	b0 e0       	ldi	r27, 0x00	; 0
    4cac:	20 91 43 02 	lds	r18, 0x0243
    4cb0:	30 91 44 02 	lds	r19, 0x0244
    4cb4:	80 91 49 02 	lds	r24, 0x0249
    4cb8:	88 2f       	mov	r24, r24
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	f9 01       	movw	r30, r18
    4cbe:	e8 0f       	add	r30, r24
    4cc0:	f9 1f       	adc	r31, r25
    4cc2:	80 81       	ld	r24, Z
    4cc4:	8c 93       	st	X, r24
    4cc6:	14 c0       	rjmp	.+40     	; 0x4cf0 <__vector_15+0x94>
		}
		else
		{
			/*Data sending finished*/
			UART_u8SendCounter=0;
    4cc8:	10 92 49 02 	sts	0x0249, r1
			/*Disable interrupt*/
			CLR_BIT(UCSRB,UCSRB_TXCIE);
    4ccc:	aa e2       	ldi	r26, 0x2A	; 42
    4cce:	b0 e0       	ldi	r27, 0x00	; 0
    4cd0:	ea e2       	ldi	r30, 0x2A	; 42
    4cd2:	f0 e0       	ldi	r31, 0x00	; 0
    4cd4:	80 81       	ld	r24, Z
    4cd6:	8f 7b       	andi	r24, 0xBF	; 191
    4cd8:	8c 93       	st	X, r24
			/*Invoke the application notification  function*/
			if(UART_pvSendCallBackFunc != NULL)
    4cda:	80 91 41 02 	lds	r24, 0x0241
    4cde:	90 91 42 02 	lds	r25, 0x0242
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	29 f0       	breq	.+10     	; 0x4cf0 <__vector_15+0x94>
			{
				UART_pvSendCallBackFunc();
    4ce6:	e0 91 41 02 	lds	r30, 0x0241
    4cea:	f0 91 42 02 	lds	r31, 0x0242
    4cee:	09 95       	icall
			{
				/*Do no thing*/
			}
		}
	}
}
    4cf0:	cf 91       	pop	r28
    4cf2:	df 91       	pop	r29
    4cf4:	ff 91       	pop	r31
    4cf6:	ef 91       	pop	r30
    4cf8:	bf 91       	pop	r27
    4cfa:	af 91       	pop	r26
    4cfc:	9f 91       	pop	r25
    4cfe:	8f 91       	pop	r24
    4d00:	7f 91       	pop	r23
    4d02:	6f 91       	pop	r22
    4d04:	5f 91       	pop	r21
    4d06:	4f 91       	pop	r20
    4d08:	3f 91       	pop	r19
    4d0a:	2f 91       	pop	r18
    4d0c:	0f 90       	pop	r0
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	0f 90       	pop	r0
    4d12:	1f 90       	pop	r1
    4d14:	18 95       	reti

00004d16 <__vector_13>:
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
    4d16:	1f 92       	push	r1
    4d18:	0f 92       	push	r0
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	0f 92       	push	r0
    4d1e:	11 24       	eor	r1, r1
    4d20:	2f 93       	push	r18
    4d22:	3f 93       	push	r19
    4d24:	4f 93       	push	r20
    4d26:	5f 93       	push	r21
    4d28:	6f 93       	push	r22
    4d2a:	7f 93       	push	r23
    4d2c:	8f 93       	push	r24
    4d2e:	9f 93       	push	r25
    4d30:	af 93       	push	r26
    4d32:	bf 93       	push	r27
    4d34:	ef 93       	push	r30
    4d36:	ff 93       	push	r31
    4d38:	df 93       	push	r29
    4d3a:	cf 93       	push	r28
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
	if(UART_pu8RecieveArr != NULL)
    4d40:	80 91 45 02 	lds	r24, 0x0245
    4d44:	90 91 46 02 	lds	r25, 0x0246
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	79 f1       	breq	.+94     	; 0x4daa <__vector_13+0x94>
	{
		UART_u8RecieveCounter++;
    4d4c:	80 91 4a 02 	lds	r24, 0x024A
    4d50:	8f 5f       	subi	r24, 0xFF	; 255
    4d52:	80 93 4a 02 	sts	0x024A, r24
		if(UART_u8RecieveCounter < UART_u8RecieveSize)
    4d56:	90 91 4a 02 	lds	r25, 0x024A
    4d5a:	80 91 48 02 	lds	r24, 0x0248
    4d5e:	98 17       	cp	r25, r24
    4d60:	80 f4       	brcc	.+32     	; 0x4d82 <__vector_13+0x6c>
		{
			/*Receive data doesn't complete send the next data*/
			UART_pu8RecieveArr[UART_u8RecieveCounter] = UDR;
    4d62:	20 91 45 02 	lds	r18, 0x0245
    4d66:	30 91 46 02 	lds	r19, 0x0246
    4d6a:	80 91 4a 02 	lds	r24, 0x024A
    4d6e:	88 2f       	mov	r24, r24
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	d9 01       	movw	r26, r18
    4d74:	a8 0f       	add	r26, r24
    4d76:	b9 1f       	adc	r27, r25
    4d78:	ec e2       	ldi	r30, 0x2C	; 44
    4d7a:	f0 e0       	ldi	r31, 0x00	; 0
    4d7c:	80 81       	ld	r24, Z
    4d7e:	8c 93       	st	X, r24
    4d80:	14 c0       	rjmp	.+40     	; 0x4daa <__vector_13+0x94>
		}
		else
		{
			/*Data Receiving finished*/
			UART_u8RecieveCounter=0;
    4d82:	10 92 4a 02 	sts	0x024A, r1
			/*Disable interrupt*/
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    4d86:	aa e2       	ldi	r26, 0x2A	; 42
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	ea e2       	ldi	r30, 0x2A	; 42
    4d8c:	f0 e0       	ldi	r31, 0x00	; 0
    4d8e:	80 81       	ld	r24, Z
    4d90:	8f 77       	andi	r24, 0x7F	; 127
    4d92:	8c 93       	st	X, r24
			/*Invoke the application notification  function*/
			if(UART_pvRecieveCallBackFunc != NULL)
    4d94:	80 91 3f 02 	lds	r24, 0x023F
    4d98:	90 91 40 02 	lds	r25, 0x0240
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	29 f0       	breq	.+10     	; 0x4daa <__vector_13+0x94>
			{
				UART_pvRecieveCallBackFunc();
    4da0:	e0 91 3f 02 	lds	r30, 0x023F
    4da4:	f0 91 40 02 	lds	r31, 0x0240
    4da8:	09 95       	icall
			{
				/*Do no thing*/
			}
		}
	}
}
    4daa:	cf 91       	pop	r28
    4dac:	df 91       	pop	r29
    4dae:	ff 91       	pop	r31
    4db0:	ef 91       	pop	r30
    4db2:	bf 91       	pop	r27
    4db4:	af 91       	pop	r26
    4db6:	9f 91       	pop	r25
    4db8:	8f 91       	pop	r24
    4dba:	7f 91       	pop	r23
    4dbc:	6f 91       	pop	r22
    4dbe:	5f 91       	pop	r21
    4dc0:	4f 91       	pop	r20
    4dc2:	3f 91       	pop	r19
    4dc4:	2f 91       	pop	r18
    4dc6:	0f 90       	pop	r0
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	0f 90       	pop	r0
    4dcc:	1f 90       	pop	r1
    4dce:	18 95       	reti

00004dd0 <UART_ReceiveBufferFlush>:
void UART_ReceiveBufferFlush(void)
{
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	cd b7       	in	r28, 0x3d	; 61
    4dd6:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(UCSRB,UCSRB_RXEN); 	/*D Receive Bit*/
    4dd8:	aa e2       	ldi	r26, 0x2A	; 42
    4dda:	b0 e0       	ldi	r27, 0x00	; 0
    4ddc:	ea e2       	ldi	r30, 0x2A	; 42
    4dde:	f0 e0       	ldi	r31, 0x00	; 0
    4de0:	80 81       	ld	r24, Z
    4de2:	8f 7e       	andi	r24, 0xEF	; 239
    4de4:	8c 93       	st	X, r24
	   SET_BIT(UCSRB,UCSRB_RXEN); 	/*Enable Receive Bit*/
    4de6:	aa e2       	ldi	r26, 0x2A	; 42
    4de8:	b0 e0       	ldi	r27, 0x00	; 0
    4dea:	ea e2       	ldi	r30, 0x2A	; 42
    4dec:	f0 e0       	ldi	r31, 0x00	; 0
    4dee:	80 81       	ld	r24, Z
    4df0:	80 61       	ori	r24, 0x10	; 16
    4df2:	8c 93       	st	X, r24
}
    4df4:	cf 91       	pop	r28
    4df6:	df 91       	pop	r29
    4df8:	08 95       	ret

00004dfa <main>:
void APP_ControlLight(void);
void APP_ControlMotorSpeed(void);

uint8 APP_RecievedDataArr[27]={0};
void main(void)
{
    4dfa:	df 93       	push	r29
    4dfc:	cf 93       	push	r28
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	65 97       	sbiw	r28, 0x15	; 21
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	80 e0       	ldi	r24, 0x00	; 0
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	a8 ec       	ldi	r26, 0xC8	; 200
    4e14:	b2 e4       	ldi	r27, 0x42	; 66
    4e16:	8b 87       	std	Y+11, r24	; 0x0b
    4e18:	9c 87       	std	Y+12, r25	; 0x0c
    4e1a:	ad 87       	std	Y+13, r26	; 0x0d
    4e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	4a e7       	ldi	r20, 0x7A	; 122
    4e2c:	53 e4       	ldi	r21, 0x43	; 67
    4e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e32:	dc 01       	movw	r26, r24
    4e34:	cb 01       	movw	r24, r22
    4e36:	8f 83       	std	Y+7, r24	; 0x07
    4e38:	98 87       	std	Y+8, r25	; 0x08
    4e3a:	a9 87       	std	Y+9, r26	; 0x09
    4e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e40:	78 85       	ldd	r23, Y+8	; 0x08
    4e42:	89 85       	ldd	r24, Y+9	; 0x09
    4e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e52:	88 23       	and	r24, r24
    4e54:	2c f4       	brge	.+10     	; 0x4e60 <main+0x66>
		__ticks = 1;
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	9e 83       	std	Y+6, r25	; 0x06
    4e5c:	8d 83       	std	Y+5, r24	; 0x05
    4e5e:	3f c0       	rjmp	.+126    	; 0x4ede <main+0xe4>
	else if (__tmp > 65535)
    4e60:	6f 81       	ldd	r22, Y+7	; 0x07
    4e62:	78 85       	ldd	r23, Y+8	; 0x08
    4e64:	89 85       	ldd	r24, Y+9	; 0x09
    4e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	3f ef       	ldi	r19, 0xFF	; 255
    4e6c:	4f e7       	ldi	r20, 0x7F	; 127
    4e6e:	57 e4       	ldi	r21, 0x47	; 71
    4e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e74:	18 16       	cp	r1, r24
    4e76:	4c f5       	brge	.+82     	; 0x4eca <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e2       	ldi	r20, 0x20	; 32
    4e86:	51 e4       	ldi	r21, 0x41	; 65
    4e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e8c:	dc 01       	movw	r26, r24
    4e8e:	cb 01       	movw	r24, r22
    4e90:	bc 01       	movw	r22, r24
    4e92:	cd 01       	movw	r24, r26
    4e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e98:	dc 01       	movw	r26, r24
    4e9a:	cb 01       	movw	r24, r22
    4e9c:	9e 83       	std	Y+6, r25	; 0x06
    4e9e:	8d 83       	std	Y+5, r24	; 0x05
    4ea0:	0f c0       	rjmp	.+30     	; 0x4ec0 <main+0xc6>
    4ea2:	89 e1       	ldi	r24, 0x19	; 25
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	9c 83       	std	Y+4, r25	; 0x04
    4ea8:	8b 83       	std	Y+3, r24	; 0x03
    4eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    4eac:	9c 81       	ldd	r25, Y+4	; 0x04
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	f1 f7       	brne	.-4      	; 0x4eae <main+0xb4>
    4eb2:	9c 83       	std	Y+4, r25	; 0x04
    4eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	9e 83       	std	Y+6, r25	; 0x06
    4ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec4:	00 97       	sbiw	r24, 0x00	; 0
    4ec6:	69 f7       	brne	.-38     	; 0x4ea2 <main+0xa8>
    4ec8:	14 c0       	rjmp	.+40     	; 0x4ef2 <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eca:	6f 81       	ldd	r22, Y+7	; 0x07
    4ecc:	78 85       	ldd	r23, Y+8	; 0x08
    4ece:	89 85       	ldd	r24, Y+9	; 0x09
    4ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	9e 83       	std	Y+6, r25	; 0x06
    4edc:	8d 83       	std	Y+5, r24	; 0x05
    4ede:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee2:	9a 83       	std	Y+2, r25	; 0x02
    4ee4:	89 83       	std	Y+1, r24	; 0x01
    4ee6:	89 81       	ldd	r24, Y+1	; 0x01
    4ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	f1 f7       	brne	.-4      	; 0x4eea <main+0xf0>
    4eee:	9a 83       	std	Y+2, r25	; 0x02
    4ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	uint8 Local_u8EntryChooseFlag = 0;
    4ef2:	1b 8a       	std	Y+19, r1	; 0x13
    uint8 Local_u8Reciving_Finish=0;
    4ef4:	1a 8a       	std	Y+18, r1	; 0x12

	PORT_voidInit();
    4ef6:	0e 94 b7 10 	call	0x216e	; 0x216e <PORT_voidInit>
	TWI_voidMasterInit(10);
    4efa:	8a e0       	ldi	r24, 0x0A	; 10
    4efc:	0e 94 08 23 	call	0x4610	; 0x4610 <TWI_voidMasterInit>
	UART_voidInit();
    4f00:	0e 94 8b 24 	call	0x4916	; 0x4916 <UART_voidInit>

	UART_u8SendString("Welcome to semi smart home");
    4f04:	86 e6       	ldi	r24, 0x66	; 102
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    UART_u8SendString("1-Log in");
    4f0c:	81 e8       	ldi	r24, 0x81	; 129
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    UART_u8SendString("2-Register");
    4f14:	8a e8       	ldi	r24, 0x8A	; 138
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    4f1c:	0d c0       	rjmp	.+26     	; 0x4f38 <main+0x13e>

	while(1)
	{
		while(Local_u8Reciving_Finish == 0)
		{
			   UART_ReceiveBufferFlush();
    4f1e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
			   Local_u8Reciving_Finish = UART_voidRecieveBufferSynch(APP_RecievedDataArr,27);
    4f22:	8c e4       	ldi	r24, 0x4C	; 76
    4f24:	92 e0       	ldi	r25, 0x02	; 2
    4f26:	6b e1       	ldi	r22, 0x1B	; 27
    4f28:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    4f2c:	8a 8b       	std	Y+18, r24	; 0x12
		       if(APP_RecievedDataArr[0] == 0)
    4f2e:	80 91 4c 02 	lds	r24, 0x024C
    4f32:	88 23       	and	r24, r24
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <main+0x13e>
		       {
		    	   Local_u8Reciving_Finish = 0;
    4f36:	1a 8a       	std	Y+18, r1	; 0x12
    UART_u8SendString("1-Log in");
    UART_u8SendString("2-Register");

	while(1)
	{
		while(Local_u8Reciving_Finish == 0)
    4f38:	8a 89       	ldd	r24, Y+18	; 0x12
    4f3a:	88 23       	and	r24, r24
    4f3c:	81 f3       	breq	.-32     	; 0x4f1e <main+0x124>
		       if(APP_RecievedDataArr[0] == 0)
		       {
		    	   Local_u8Reciving_Finish = 0;
		       }
		}
	   Local_u8Reciving_Finish = 0;
    4f3e:	1a 8a       	std	Y+18, r1	; 0x12
       Local_u8EntryChooseFlag = APP_u8EnteryChoice(APP_RecievedDataArr,27);
    4f40:	8c e4       	ldi	r24, 0x4C	; 76
    4f42:	92 e0       	ldi	r25, 0x02	; 2
    4f44:	6b e1       	ldi	r22, 0x1B	; 27
    4f46:	0e 94 11 28 	call	0x5022	; 0x5022 <APP_u8EnteryChoice>
    4f4a:	8b 8b       	std	Y+19, r24	; 0x13
		switch (Local_u8EntryChooseFlag)
    4f4c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f4e:	28 2f       	mov	r18, r24
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	3d 8b       	std	Y+21, r19	; 0x15
    4f54:	2c 8b       	std	Y+20, r18	; 0x14
    4f56:	8c 89       	ldd	r24, Y+20	; 0x14
    4f58:	9d 89       	ldd	r25, Y+21	; 0x15
    4f5a:	81 30       	cpi	r24, 0x01	; 1
    4f5c:	91 05       	cpc	r25, r1
    4f5e:	79 f0       	breq	.+30     	; 0x4f7e <main+0x184>
    4f60:	2c 89       	ldd	r18, Y+20	; 0x14
    4f62:	3d 89       	ldd	r19, Y+21	; 0x15
    4f64:	22 30       	cpi	r18, 0x02	; 2
    4f66:	31 05       	cpc	r19, r1
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <main+0x172>
    4f6a:	4a c0       	rjmp	.+148    	; 0x5000 <main+0x206>
    4f6c:	8c 89       	ldd	r24, Y+20	; 0x14
    4f6e:	9d 89       	ldd	r25, Y+21	; 0x15
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	11 f7       	brne	.-60     	; 0x4f38 <main+0x13e>
		{
		case 0:
		{
			UART_u8SendString("Wrong choice");
    4f74:	85 e9       	ldi	r24, 0x95	; 149
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    4f7c:	dd cf       	rjmp	.-70     	; 0x4f38 <main+0x13e>
		}break;
		case 1:
		{
			uint8 Local_u8LoginFlag = 0;
    4f7e:	19 8a       	std	Y+17, r1	; 0x11
    4f80:	03 c0       	rjmp	.+6      	; 0x4f88 <main+0x18e>
			while (Local_u8LoginFlag == 0)
			{
				Local_u8LoginFlag = APP_u8ID_Password_Check();
    4f82:	0e 94 4d 29 	call	0x529a	; 0x529a <APP_u8ID_Password_Check>
    4f86:	89 8b       	std	Y+17, r24	; 0x11
			UART_u8SendString("Wrong choice");
		}break;
		case 1:
		{
			uint8 Local_u8LoginFlag = 0;
			while (Local_u8LoginFlag == 0)
    4f88:	89 89       	ldd	r24, Y+17	; 0x11
    4f8a:	88 23       	and	r24, r24
    4f8c:	d1 f3       	breq	.-12     	; 0x4f82 <main+0x188>
			{
				Local_u8LoginFlag = APP_u8ID_Password_Check();
			}
			if (Local_u8LoginFlag == 1)
    4f8e:	89 89       	ldd	r24, Y+17	; 0x11
    4f90:	81 30       	cpi	r24, 0x01	; 1
    4f92:	89 f5       	brne	.+98     	; 0x4ff6 <main+0x1fc>
			{
				UART_u8SendString("Successful log in");
    4f94:	82 ea       	ldi	r24, 0xA2	; 162
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
				APP_voidDisplayChoices();
    4f9c:	0e 94 10 2a 	call	0x5420	; 0x5420 <APP_voidDisplayChoices>
				while(1)
				{
					UART_ReceiveBufferFlush();
    4fa0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
    4fa4:	0b c0       	rjmp	.+22     	; 0x4fbc <main+0x1c2>
					while (Local_u8Reciving_Finish == 0)
					{
						Local_u8Reciving_Finish = UART_voidRecieveBufferSynch(APP_RecievedDataArr, 27);
    4fa6:	8c e4       	ldi	r24, 0x4C	; 76
    4fa8:	92 e0       	ldi	r25, 0x02	; 2
    4faa:	6b e1       	ldi	r22, 0x1B	; 27
    4fac:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    4fb0:	8a 8b       	std	Y+18, r24	; 0x12
						if (APP_RecievedDataArr[0] == 0)
    4fb2:	80 91 4c 02 	lds	r24, 0x024C
    4fb6:	88 23       	and	r24, r24
    4fb8:	09 f4       	brne	.+2      	; 0x4fbc <main+0x1c2>
						{
							Local_u8Reciving_Finish = 0;
    4fba:	1a 8a       	std	Y+18, r1	; 0x12
				UART_u8SendString("Successful log in");
				APP_voidDisplayChoices();
				while(1)
				{
					UART_ReceiveBufferFlush();
					while (Local_u8Reciving_Finish == 0)
    4fbc:	8a 89       	ldd	r24, Y+18	; 0x12
    4fbe:	88 23       	and	r24, r24
    4fc0:	91 f3       	breq	.-28     	; 0x4fa6 <main+0x1ac>
						if (APP_RecievedDataArr[0] == 0)
						{
							Local_u8Reciving_Finish = 0;
						}
					}
					if (Local_u8Reciving_Finish == 1)
    4fc2:	8a 89       	ldd	r24, Y+18	; 0x12
    4fc4:	81 30       	cpi	r24, 0x01	; 1
    4fc6:	61 f7       	brne	.-40     	; 0x4fa0 <main+0x1a6>
					{
						uint8 Local_u8Choose = 0;
    4fc8:	18 8a       	std	Y+16, r1	; 0x10
						Local_u8Choose = APP_u8ChoiceChecking(APP_RecievedDataArr,27);
    4fca:	8c e4       	ldi	r24, 0x4C	; 76
    4fcc:	92 e0       	ldi	r25, 0x02	; 2
    4fce:	6b e1       	ldi	r22, 0x1B	; 27
    4fd0:	0e 94 3f 2a 	call	0x547e	; 0x547e <APP_u8ChoiceChecking>
    4fd4:	88 8b       	std	Y+16, r24	; 0x10
						APP_voidHomeControl(Local_u8Choose);
    4fd6:	88 89       	ldd	r24, Y+16	; 0x10
    4fd8:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <APP_voidHomeControl>
						Local_u8Reciving_Finish = 0;
    4fdc:	1a 8a       	std	Y+18, r1	; 0x12
						if(Local_u8Choose == 10)
    4fde:	88 89       	ldd	r24, Y+16	; 0x10
    4fe0:	8a 30       	cpi	r24, 0x0A	; 10
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <main+0x1ec>
    4fe4:	a9 cf       	rjmp	.-174    	; 0x4f38 <main+0x13e>
						{
							break;
						}
						if(Local_u8Choose == 0)
    4fe6:	88 89       	ldd	r24, Y+16	; 0x10
    4fe8:	88 23       	and	r24, r24
    4fea:	d1 f6       	brne	.-76     	; 0x4fa0 <main+0x1a6>
						{
							UART_u8SendString("Wrong choice");
    4fec:	85 e9       	ldi	r24, 0x95	; 149
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    4ff4:	d5 cf       	rjmp	.-86     	; 0x4fa0 <main+0x1a6>
					}
				}
			}
			else
			{
				UART_u8SendString("Wrong password");
    4ff6:	84 eb       	ldi	r24, 0xB4	; 180
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    4ffe:	9c cf       	rjmp	.-200    	; 0x4f38 <main+0x13e>
			}
		}break;
		case 2:
		{
			uint8 Local_u8RegisterFlag = 0;
    5000:	1f 86       	std	Y+15, r1	; 0x0f
    5002:	03 c0       	rjmp	.+6      	; 0x500a <main+0x210>
			while (Local_u8RegisterFlag == 0)
			{
				Local_u8RegisterFlag = APP_u8ID_Password_Entering();
    5004:	0e 94 98 28 	call	0x5130	; 0x5130 <APP_u8ID_Password_Entering>
    5008:	8f 87       	std	Y+15, r24	; 0x0f
			}
		}break;
		case 2:
		{
			uint8 Local_u8RegisterFlag = 0;
			while (Local_u8RegisterFlag == 0)
    500a:	8f 85       	ldd	r24, Y+15	; 0x0f
    500c:	88 23       	and	r24, r24
    500e:	d1 f3       	breq	.-12     	; 0x5004 <main+0x20a>
			{
				Local_u8RegisterFlag = APP_u8ID_Password_Entering();
			}
			if (Local_u8RegisterFlag == 1) {
    5010:	8f 85       	ldd	r24, Y+15	; 0x0f
    5012:	81 30       	cpi	r24, 0x01	; 1
    5014:	09 f0       	breq	.+2      	; 0x5018 <main+0x21e>
    5016:	90 cf       	rjmp	.-224    	; 0x4f38 <main+0x13e>
				UART_u8SendString("Successful Register");
    5018:	83 ec       	ldi	r24, 0xC3	; 195
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
    5020:	8b cf       	rjmp	.-234    	; 0x4f38 <main+0x13e>

00005022 <APP_u8EnteryChoice>:
		}break;
		}
	}
}
uint8 APP_u8EnteryChoice(uint8 Copy_u8Arr[],uint8 Copy_u8Size)
{
    5022:	df 93       	push	r29
    5024:	cf 93       	push	r28
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    502a:	29 97       	sbiw	r28, 0x09	; 9
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	f8 94       	cli
    5030:	de bf       	out	0x3e, r29	; 62
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	cd bf       	out	0x3d, r28	; 61
    5036:	98 87       	std	Y+8, r25	; 0x08
    5038:	8f 83       	std	Y+7, r24	; 0x07
    503a:	69 87       	std	Y+9, r22	; 0x09
	uint8 Local_u8Flag=0,Local_u8Counter=0;
    503c:	1e 82       	std	Y+6, r1	; 0x06
    503e:	1d 82       	std	Y+5, r1	; 0x05
	char *Login="log in";
    5040:	87 ed       	ldi	r24, 0xD7	; 215
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	9c 83       	std	Y+4, r25	; 0x04
    5046:	8b 83       	std	Y+3, r24	; 0x03
	char *Register="register";
    5048:	8e ed       	ldi	r24, 0xDE	; 222
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	9a 83       	std	Y+2, r25	; 0x02
    504e:	89 83       	std	Y+1, r24	; 0x01
    5050:	1c c0       	rjmp	.+56     	; 0x508a <APP_u8EnteryChoice+0x68>
    while(Login[Local_u8Counter] != '\0')
    {
    	if(Copy_u8Arr[Local_u8Counter] == Login[Local_u8Counter])
    5052:	8d 81       	ldd	r24, Y+5	; 0x05
    5054:	28 2f       	mov	r18, r24
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	8f 81       	ldd	r24, Y+7	; 0x07
    505a:	98 85       	ldd	r25, Y+8	; 0x08
    505c:	fc 01       	movw	r30, r24
    505e:	e2 0f       	add	r30, r18
    5060:	f3 1f       	adc	r31, r19
    5062:	40 81       	ld	r20, Z
    5064:	8d 81       	ldd	r24, Y+5	; 0x05
    5066:	28 2f       	mov	r18, r24
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	8b 81       	ldd	r24, Y+3	; 0x03
    506c:	9c 81       	ldd	r25, Y+4	; 0x04
    506e:	fc 01       	movw	r30, r24
    5070:	e2 0f       	add	r30, r18
    5072:	f3 1f       	adc	r31, r19
    5074:	80 81       	ld	r24, Z
    5076:	48 17       	cp	r20, r24
    5078:	31 f4       	brne	.+12     	; 0x5086 <APP_u8EnteryChoice+0x64>
    	{
    		Local_u8Flag = 1;
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	8e 83       	std	Y+6, r24	; 0x06
    	else
    	{
    		Local_u8Flag = 0;
    		break;
    	}
    	Local_u8Counter++;
    507e:	8d 81       	ldd	r24, Y+5	; 0x05
    5080:	8f 5f       	subi	r24, 0xFF	; 255
    5082:	8d 83       	std	Y+5, r24	; 0x05
    5084:	02 c0       	rjmp	.+4      	; 0x508a <APP_u8EnteryChoice+0x68>
    	{
    		Local_u8Flag = 1;
    	}
    	else
    	{
    		Local_u8Flag = 0;
    5086:	1e 82       	std	Y+6, r1	; 0x06
    5088:	0b c0       	rjmp	.+22     	; 0x50a0 <APP_u8EnteryChoice+0x7e>
uint8 APP_u8EnteryChoice(uint8 Copy_u8Arr[],uint8 Copy_u8Size)
{
	uint8 Local_u8Flag=0,Local_u8Counter=0;
	char *Login="log in";
	char *Register="register";
    while(Login[Local_u8Counter] != '\0')
    508a:	8d 81       	ldd	r24, Y+5	; 0x05
    508c:	28 2f       	mov	r18, r24
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	9c 81       	ldd	r25, Y+4	; 0x04
    5094:	fc 01       	movw	r30, r24
    5096:	e2 0f       	add	r30, r18
    5098:	f3 1f       	adc	r31, r19
    509a:	80 81       	ld	r24, Z
    509c:	88 23       	and	r24, r24
    509e:	c9 f6       	brne	.-78     	; 0x5052 <APP_u8EnteryChoice+0x30>
    		Local_u8Flag = 0;
    		break;
    	}
    	Local_u8Counter++;
    }
    if(Local_u8Flag == 0)
    50a0:	8e 81       	ldd	r24, Y+6	; 0x06
    50a2:	88 23       	and	r24, r24
    50a4:	49 f5       	brne	.+82     	; 0x50f8 <APP_u8EnteryChoice+0xd6>
    {
    	Local_u8Counter = 0;
    50a6:	1d 82       	std	Y+5, r1	; 0x05
    50a8:	1c c0       	rjmp	.+56     	; 0x50e2 <APP_u8EnteryChoice+0xc0>
        while(Register[Local_u8Counter] != '\0')
        {
        	if(Copy_u8Arr[Local_u8Counter] == Register[Local_u8Counter])
    50aa:	8d 81       	ldd	r24, Y+5	; 0x05
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	8f 81       	ldd	r24, Y+7	; 0x07
    50b2:	98 85       	ldd	r25, Y+8	; 0x08
    50b4:	fc 01       	movw	r30, r24
    50b6:	e2 0f       	add	r30, r18
    50b8:	f3 1f       	adc	r31, r19
    50ba:	40 81       	ld	r20, Z
    50bc:	8d 81       	ldd	r24, Y+5	; 0x05
    50be:	28 2f       	mov	r18, r24
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	89 81       	ldd	r24, Y+1	; 0x01
    50c4:	9a 81       	ldd	r25, Y+2	; 0x02
    50c6:	fc 01       	movw	r30, r24
    50c8:	e2 0f       	add	r30, r18
    50ca:	f3 1f       	adc	r31, r19
    50cc:	80 81       	ld	r24, Z
    50ce:	48 17       	cp	r20, r24
    50d0:	31 f4       	brne	.+12     	; 0x50de <APP_u8EnteryChoice+0xbc>
        	{
        		Local_u8Flag = 2;
    50d2:	82 e0       	ldi	r24, 0x02	; 2
    50d4:	8e 83       	std	Y+6, r24	; 0x06
        	else
        	{
        		Local_u8Flag = 0;
        		break;
        	}
        	Local_u8Counter++;
    50d6:	8d 81       	ldd	r24, Y+5	; 0x05
    50d8:	8f 5f       	subi	r24, 0xFF	; 255
    50da:	8d 83       	std	Y+5, r24	; 0x05
    50dc:	02 c0       	rjmp	.+4      	; 0x50e2 <APP_u8EnteryChoice+0xc0>
        	{
        		Local_u8Flag = 2;
        	}
        	else
        	{
        		Local_u8Flag = 0;
    50de:	1e 82       	std	Y+6, r1	; 0x06
    50e0:	0b c0       	rjmp	.+22     	; 0x50f8 <APP_u8EnteryChoice+0xd6>
    	Local_u8Counter++;
    }
    if(Local_u8Flag == 0)
    {
    	Local_u8Counter = 0;
        while(Register[Local_u8Counter] != '\0')
    50e2:	8d 81       	ldd	r24, Y+5	; 0x05
    50e4:	28 2f       	mov	r18, r24
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
    50ea:	9a 81       	ldd	r25, Y+2	; 0x02
    50ec:	fc 01       	movw	r30, r24
    50ee:	e2 0f       	add	r30, r18
    50f0:	f3 1f       	adc	r31, r19
    50f2:	80 81       	ld	r24, Z
    50f4:	88 23       	and	r24, r24
    50f6:	c9 f6       	brne	.-78     	; 0x50aa <APP_u8EnteryChoice+0x88>
        		break;
        	}
        	Local_u8Counter++;
        }
    }
    for(Local_u8Counter=0;Local_u8Counter<Copy_u8Size;Local_u8Counter++)
    50f8:	1d 82       	std	Y+5, r1	; 0x05
    50fa:	0c c0       	rjmp	.+24     	; 0x5114 <APP_u8EnteryChoice+0xf2>
    {
    	Copy_u8Arr[Local_u8Counter] = 0;
    50fc:	8d 81       	ldd	r24, Y+5	; 0x05
    50fe:	28 2f       	mov	r18, r24
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	8f 81       	ldd	r24, Y+7	; 0x07
    5104:	98 85       	ldd	r25, Y+8	; 0x08
    5106:	fc 01       	movw	r30, r24
    5108:	e2 0f       	add	r30, r18
    510a:	f3 1f       	adc	r31, r19
    510c:	10 82       	st	Z, r1
        		break;
        	}
        	Local_u8Counter++;
        }
    }
    for(Local_u8Counter=0;Local_u8Counter<Copy_u8Size;Local_u8Counter++)
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	8f 5f       	subi	r24, 0xFF	; 255
    5112:	8d 83       	std	Y+5, r24	; 0x05
    5114:	9d 81       	ldd	r25, Y+5	; 0x05
    5116:	89 85       	ldd	r24, Y+9	; 0x09
    5118:	98 17       	cp	r25, r24
    511a:	80 f3       	brcs	.-32     	; 0x50fc <APP_u8EnteryChoice+0xda>
    {
    	Copy_u8Arr[Local_u8Counter] = 0;
    }
    return Local_u8Flag;
    511c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    511e:	29 96       	adiw	r28, 0x09	; 9
    5120:	0f b6       	in	r0, 0x3f	; 63
    5122:	f8 94       	cli
    5124:	de bf       	out	0x3e, r29	; 62
    5126:	0f be       	out	0x3f, r0	; 63
    5128:	cd bf       	out	0x3d, r28	; 61
    512a:	cf 91       	pop	r28
    512c:	df 91       	pop	r29
    512e:	08 95       	ret

00005130 <APP_u8ID_Password_Entering>:
uint8 APP_u8ID_Password_Entering(void)
{
    5130:	df 93       	push	r29
    5132:	cf 93       	push	r28
    5134:	cd b7       	in	r28, 0x3d	; 61
    5136:	de b7       	in	r29, 0x3e	; 62
    5138:	2d 97       	sbiw	r28, 0x0d	; 13
    513a:	0f b6       	in	r0, 0x3f	; 63
    513c:	f8 94       	cli
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	0f be       	out	0x3f, r0	; 63
    5142:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8Riciving_finish=0;
    5144:	1d 82       	std	Y+5, r1	; 0x05
	uint8 Local_u8Counter=0;
    5146:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8Pass=0;
    5148:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u8ID=0;
    514a:	1a 82       	std	Y+2, r1	; 0x02
    514c:	19 82       	std	Y+1, r1	; 0x01
	uint8 Local_u8ID_Arr[4] = {0};
    514e:	1e 82       	std	Y+6, r1	; 0x06
    5150:	1f 82       	std	Y+7, r1	; 0x07
    5152:	18 86       	std	Y+8, r1	; 0x08
    5154:	19 86       	std	Y+9, r1	; 0x09
	uint8 Local_u8Pass_Arr[4] = {0};
    5156:	1a 86       	std	Y+10, r1	; 0x0a
    5158:	1b 86       	std	Y+11, r1	; 0x0b
    515a:	1c 86       	std	Y+12, r1	; 0x0c
    515c:	1d 86       	std	Y+13, r1	; 0x0d
	UART_u8SendString("Please enter new ID :");
    515e:	87 ee       	ldi	r24, 0xE7	; 231
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_ReceiveBufferFlush();
    5166:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
    516a:	0a c0       	rjmp	.+20     	; 0x5180 <APP_u8ID_Password_Entering+0x50>
	while(Local_u8Riciving_finish == 0)
	{
		Local_u8Riciving_finish = UART_voidRecieveBufferSynch(Local_u8ID_Arr,3);
    516c:	ce 01       	movw	r24, r28
    516e:	06 96       	adiw	r24, 0x06	; 6
    5170:	63 e0       	ldi	r22, 0x03	; 3
    5172:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    5176:	8d 83       	std	Y+5, r24	; 0x05
        if(Local_u8ID_Arr[0] == 0)
    5178:	8e 81       	ldd	r24, Y+6	; 0x06
    517a:	88 23       	and	r24, r24
    517c:	09 f4       	brne	.+2      	; 0x5180 <APP_u8ID_Password_Entering+0x50>
        {

        	Local_u8Riciving_finish = 0;
    517e:	1d 82       	std	Y+5, r1	; 0x05
	uint16 Local_u8ID=0;
	uint8 Local_u8ID_Arr[4] = {0};
	uint8 Local_u8Pass_Arr[4] = {0};
	UART_u8SendString("Please enter new ID :");
	UART_ReceiveBufferFlush();
	while(Local_u8Riciving_finish == 0)
    5180:	8d 81       	ldd	r24, Y+5	; 0x05
    5182:	88 23       	and	r24, r24
    5184:	99 f3       	breq	.-26     	; 0x516c <APP_u8ID_Password_Entering+0x3c>
        {

        	Local_u8Riciving_finish = 0;
        }
	}
	Local_u8Riciving_finish = 0;
    5186:	1d 82       	std	Y+5, r1	; 0x05
	UART_u8SendString("Please enter new Password :");
    5188:	8d ef       	ldi	r24, 0xFD	; 253
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_ReceiveBufferFlush();
    5190:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
    5194:	0a c0       	rjmp	.+20     	; 0x51aa <APP_u8ID_Password_Entering+0x7a>
	while(Local_u8Riciving_finish == 0)
	{
		Local_u8Riciving_finish = UART_voidRecieveBufferSynch(Local_u8Pass_Arr,3);
    5196:	ce 01       	movw	r24, r28
    5198:	0a 96       	adiw	r24, 0x0a	; 10
    519a:	63 e0       	ldi	r22, 0x03	; 3
    519c:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    51a0:	8d 83       	std	Y+5, r24	; 0x05
        if(Local_u8Pass_Arr[0] == 0)
    51a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    51a4:	88 23       	and	r24, r24
    51a6:	09 f4       	brne	.+2      	; 0x51aa <APP_u8ID_Password_Entering+0x7a>
        {
        	Local_u8Riciving_finish = 0;
    51a8:	1d 82       	std	Y+5, r1	; 0x05
        }
	}
	Local_u8Riciving_finish = 0;
	UART_u8SendString("Please enter new Password :");
	UART_ReceiveBufferFlush();
	while(Local_u8Riciving_finish == 0)
    51aa:	8d 81       	ldd	r24, Y+5	; 0x05
    51ac:	88 23       	and	r24, r24
    51ae:	99 f3       	breq	.-26     	; 0x5196 <APP_u8ID_Password_Entering+0x66>
        if(Local_u8Pass_Arr[0] == 0)
        {
        	Local_u8Riciving_finish = 0;
        }
	}
	for(Local_u8Counter = 0;Local_u8Counter < 3;Local_u8Counter++)
    51b0:	1c 82       	std	Y+4, r1	; 0x04
    51b2:	60 c0       	rjmp	.+192    	; 0x5274 <APP_u8ID_Password_Entering+0x144>
	{
		Local_u8ID_Arr[Local_u8Counter] = Local_u8ID_Arr[Local_u8Counter] - '0';
    51b4:	8c 81       	ldd	r24, Y+4	; 0x04
    51b6:	48 2f       	mov	r20, r24
    51b8:	50 e0       	ldi	r21, 0x00	; 0
    51ba:	8c 81       	ldd	r24, Y+4	; 0x04
    51bc:	28 2f       	mov	r18, r24
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	ce 01       	movw	r24, r28
    51c2:	06 96       	adiw	r24, 0x06	; 6
    51c4:	fc 01       	movw	r30, r24
    51c6:	e2 0f       	add	r30, r18
    51c8:	f3 1f       	adc	r31, r19
    51ca:	80 81       	ld	r24, Z
    51cc:	28 2f       	mov	r18, r24
    51ce:	20 53       	subi	r18, 0x30	; 48
    51d0:	ce 01       	movw	r24, r28
    51d2:	06 96       	adiw	r24, 0x06	; 6
    51d4:	fc 01       	movw	r30, r24
    51d6:	e4 0f       	add	r30, r20
    51d8:	f5 1f       	adc	r31, r21
    51da:	20 83       	st	Z, r18
		Local_u8Pass_Arr[Local_u8Counter] = Local_u8Pass_Arr[Local_u8Counter] - '0';
    51dc:	8c 81       	ldd	r24, Y+4	; 0x04
    51de:	48 2f       	mov	r20, r24
    51e0:	50 e0       	ldi	r21, 0x00	; 0
    51e2:	8c 81       	ldd	r24, Y+4	; 0x04
    51e4:	28 2f       	mov	r18, r24
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	ce 01       	movw	r24, r28
    51ea:	0a 96       	adiw	r24, 0x0a	; 10
    51ec:	fc 01       	movw	r30, r24
    51ee:	e2 0f       	add	r30, r18
    51f0:	f3 1f       	adc	r31, r19
    51f2:	80 81       	ld	r24, Z
    51f4:	28 2f       	mov	r18, r24
    51f6:	20 53       	subi	r18, 0x30	; 48
    51f8:	ce 01       	movw	r24, r28
    51fa:	0a 96       	adiw	r24, 0x0a	; 10
    51fc:	fc 01       	movw	r30, r24
    51fe:	e4 0f       	add	r30, r20
    5200:	f5 1f       	adc	r31, r21
    5202:	20 83       	st	Z, r18
		Local_u8ID = Local_u8ID*10 + (uint16)Local_u8ID_Arr[Local_u8Counter];
    5204:	89 81       	ldd	r24, Y+1	; 0x01
    5206:	9a 81       	ldd	r25, Y+2	; 0x02
    5208:	9c 01       	movw	r18, r24
    520a:	22 0f       	add	r18, r18
    520c:	33 1f       	adc	r19, r19
    520e:	c9 01       	movw	r24, r18
    5210:	88 0f       	add	r24, r24
    5212:	99 1f       	adc	r25, r25
    5214:	88 0f       	add	r24, r24
    5216:	99 1f       	adc	r25, r25
    5218:	a9 01       	movw	r20, r18
    521a:	48 0f       	add	r20, r24
    521c:	59 1f       	adc	r21, r25
    521e:	8c 81       	ldd	r24, Y+4	; 0x04
    5220:	28 2f       	mov	r18, r24
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	ce 01       	movw	r24, r28
    5226:	06 96       	adiw	r24, 0x06	; 6
    5228:	fc 01       	movw	r30, r24
    522a:	e2 0f       	add	r30, r18
    522c:	f3 1f       	adc	r31, r19
    522e:	80 81       	ld	r24, Z
    5230:	88 2f       	mov	r24, r24
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	84 0f       	add	r24, r20
    5236:	95 1f       	adc	r25, r21
    5238:	9a 83       	std	Y+2, r25	; 0x02
    523a:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Pass = Local_u8Pass*10 + Local_u8Pass_Arr[Local_u8Counter];
    523c:	8b 81       	ldd	r24, Y+3	; 0x03
    523e:	88 2f       	mov	r24, r24
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	9c 01       	movw	r18, r24
    5244:	22 0f       	add	r18, r18
    5246:	33 1f       	adc	r19, r19
    5248:	c9 01       	movw	r24, r18
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	82 0f       	add	r24, r18
    5254:	93 1f       	adc	r25, r19
    5256:	48 2f       	mov	r20, r24
    5258:	8c 81       	ldd	r24, Y+4	; 0x04
    525a:	28 2f       	mov	r18, r24
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	ce 01       	movw	r24, r28
    5260:	0a 96       	adiw	r24, 0x0a	; 10
    5262:	fc 01       	movw	r30, r24
    5264:	e2 0f       	add	r30, r18
    5266:	f3 1f       	adc	r31, r19
    5268:	80 81       	ld	r24, Z
    526a:	84 0f       	add	r24, r20
    526c:	8b 83       	std	Y+3, r24	; 0x03
        if(Local_u8Pass_Arr[0] == 0)
        {
        	Local_u8Riciving_finish = 0;
        }
	}
	for(Local_u8Counter = 0;Local_u8Counter < 3;Local_u8Counter++)
    526e:	8c 81       	ldd	r24, Y+4	; 0x04
    5270:	8f 5f       	subi	r24, 0xFF	; 255
    5272:	8c 83       	std	Y+4, r24	; 0x04
    5274:	8c 81       	ldd	r24, Y+4	; 0x04
    5276:	83 30       	cpi	r24, 0x03	; 3
    5278:	08 f4       	brcc	.+2      	; 0x527c <APP_u8ID_Password_Entering+0x14c>
    527a:	9c cf       	rjmp	.-200    	; 0x51b4 <APP_u8ID_Password_Entering+0x84>
		Local_u8ID_Arr[Local_u8Counter] = Local_u8ID_Arr[Local_u8Counter] - '0';
		Local_u8Pass_Arr[Local_u8Counter] = Local_u8Pass_Arr[Local_u8Counter] - '0';
		Local_u8ID = Local_u8ID*10 + (uint16)Local_u8ID_Arr[Local_u8Counter];
		Local_u8Pass = Local_u8Pass*10 + Local_u8Pass_Arr[Local_u8Counter];
	}
	EEPROM_voidWriteDataByte(Local_u8ID,Local_u8Pass);
    527c:	89 81       	ldd	r24, Y+1	; 0x01
    527e:	9a 81       	ldd	r25, Y+2	; 0x02
    5280:	6b 81       	ldd	r22, Y+3	; 0x03
    5282:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <EEPROM_voidWriteDataByte>
	return 1u;
    5286:	81 e0       	ldi	r24, 0x01	; 1
}
    5288:	2d 96       	adiw	r28, 0x0d	; 13
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	f8 94       	cli
    528e:	de bf       	out	0x3e, r29	; 62
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	cd bf       	out	0x3d, r28	; 61
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	08 95       	ret

0000529a <APP_u8ID_Password_Check>:
uint8 APP_u8ID_Password_Check(void)
{
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	2f 97       	sbiw	r28, 0x0f	; 15
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	de bf       	out	0x3e, r29	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8Riciving_finish=0;
    52ae:	1e 82       	std	Y+6, r1	; 0x06
	uint8 Local_u8Check=0;
    52b0:	1d 82       	std	Y+5, r1	; 0x05
	uint8 Local_u8Counter=0;
    52b2:	1c 82       	std	Y+4, r1	; 0x04
	uint8 Local_u8Pass=0;
    52b4:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u8ID=0;
    52b6:	1a 82       	std	Y+2, r1	; 0x02
    52b8:	19 82       	std	Y+1, r1	; 0x01
	uint8 Local_u8SavedPass=0;
    52ba:	1f 82       	std	Y+7, r1	; 0x07
	uint8 Local_u8ID_Arr[4] = {0};
    52bc:	18 86       	std	Y+8, r1	; 0x08
    52be:	19 86       	std	Y+9, r1	; 0x09
    52c0:	1a 86       	std	Y+10, r1	; 0x0a
    52c2:	1b 86       	std	Y+11, r1	; 0x0b
	uint8 Local_u8Pass_Arr[4] = {0};
    52c4:	1c 86       	std	Y+12, r1	; 0x0c
    52c6:	1d 86       	std	Y+13, r1	; 0x0d
    52c8:	1e 86       	std	Y+14, r1	; 0x0e
    52ca:	1f 86       	std	Y+15, r1	; 0x0f
	UART_u8SendString("Please enter your ID :");
    52cc:	89 e1       	ldi	r24, 0x19	; 25
    52ce:	91 e0       	ldi	r25, 0x01	; 1
    52d0:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_ReceiveBufferFlush();
    52d4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
    52d8:	0a c0       	rjmp	.+20     	; 0x52ee <APP_u8ID_Password_Check+0x54>
	while(Local_u8Riciving_finish == 0)
	{
		Local_u8Riciving_finish = UART_voidRecieveBufferSynch(Local_u8ID_Arr,3);
    52da:	ce 01       	movw	r24, r28
    52dc:	08 96       	adiw	r24, 0x08	; 8
    52de:	63 e0       	ldi	r22, 0x03	; 3
    52e0:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    52e4:	8e 83       	std	Y+6, r24	; 0x06
        if(Local_u8ID_Arr[0] == 0)
    52e6:	88 85       	ldd	r24, Y+8	; 0x08
    52e8:	88 23       	and	r24, r24
    52ea:	09 f4       	brne	.+2      	; 0x52ee <APP_u8ID_Password_Check+0x54>
        {
        	Local_u8Riciving_finish = 0;
    52ec:	1e 82       	std	Y+6, r1	; 0x06
	uint8 Local_u8SavedPass=0;
	uint8 Local_u8ID_Arr[4] = {0};
	uint8 Local_u8Pass_Arr[4] = {0};
	UART_u8SendString("Please enter your ID :");
	UART_ReceiveBufferFlush();
	while(Local_u8Riciving_finish == 0)
    52ee:	8e 81       	ldd	r24, Y+6	; 0x06
    52f0:	88 23       	and	r24, r24
    52f2:	99 f3       	breq	.-26     	; 0x52da <APP_u8ID_Password_Check+0x40>
        if(Local_u8ID_Arr[0] == 0)
        {
        	Local_u8Riciving_finish = 0;
        }
	}
	Local_u8Riciving_finish = 0;
    52f4:	1e 82       	std	Y+6, r1	; 0x06
	UART_u8SendString("Please enter your Password :");
    52f6:	80 e3       	ldi	r24, 0x30	; 48
    52f8:	91 e0       	ldi	r25, 0x01	; 1
    52fa:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_ReceiveBufferFlush();
    52fe:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <UART_ReceiveBufferFlush>
    5302:	0a c0       	rjmp	.+20     	; 0x5318 <APP_u8ID_Password_Check+0x7e>
	while(Local_u8Riciving_finish == 0)
	{
		Local_u8Riciving_finish = UART_voidRecieveBufferSynch(Local_u8Pass_Arr,3);
    5304:	ce 01       	movw	r24, r28
    5306:	0c 96       	adiw	r24, 0x0c	; 12
    5308:	63 e0       	ldi	r22, 0x03	; 3
    530a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    530e:	8e 83       	std	Y+6, r24	; 0x06
        if(Local_u8Pass_Arr[0] == 0)
    5310:	8c 85       	ldd	r24, Y+12	; 0x0c
    5312:	88 23       	and	r24, r24
    5314:	09 f4       	brne	.+2      	; 0x5318 <APP_u8ID_Password_Check+0x7e>
        {
        	Local_u8Riciving_finish = 0;
    5316:	1e 82       	std	Y+6, r1	; 0x06
        }
	}
	Local_u8Riciving_finish = 0;
	UART_u8SendString("Please enter your Password :");
	UART_ReceiveBufferFlush();
	while(Local_u8Riciving_finish == 0)
    5318:	8e 81       	ldd	r24, Y+6	; 0x06
    531a:	88 23       	and	r24, r24
    531c:	99 f3       	breq	.-26     	; 0x5304 <APP_u8ID_Password_Check+0x6a>
        if(Local_u8Pass_Arr[0] == 0)
        {
        	Local_u8Riciving_finish = 0;
        }
	}
	for(Local_u8Counter = 0;Local_u8Counter < 3;Local_u8Counter++)
    531e:	1c 82       	std	Y+4, r1	; 0x04
    5320:	60 c0       	rjmp	.+192    	; 0x53e2 <APP_u8ID_Password_Check+0x148>
	{
		Local_u8ID_Arr[Local_u8Counter] = Local_u8ID_Arr[Local_u8Counter] - '0';
    5322:	8c 81       	ldd	r24, Y+4	; 0x04
    5324:	48 2f       	mov	r20, r24
    5326:	50 e0       	ldi	r21, 0x00	; 0
    5328:	8c 81       	ldd	r24, Y+4	; 0x04
    532a:	28 2f       	mov	r18, r24
    532c:	30 e0       	ldi	r19, 0x00	; 0
    532e:	ce 01       	movw	r24, r28
    5330:	08 96       	adiw	r24, 0x08	; 8
    5332:	fc 01       	movw	r30, r24
    5334:	e2 0f       	add	r30, r18
    5336:	f3 1f       	adc	r31, r19
    5338:	80 81       	ld	r24, Z
    533a:	28 2f       	mov	r18, r24
    533c:	20 53       	subi	r18, 0x30	; 48
    533e:	ce 01       	movw	r24, r28
    5340:	08 96       	adiw	r24, 0x08	; 8
    5342:	fc 01       	movw	r30, r24
    5344:	e4 0f       	add	r30, r20
    5346:	f5 1f       	adc	r31, r21
    5348:	20 83       	st	Z, r18
		Local_u8Pass_Arr[Local_u8Counter] = Local_u8Pass_Arr[Local_u8Counter] - '0';
    534a:	8c 81       	ldd	r24, Y+4	; 0x04
    534c:	48 2f       	mov	r20, r24
    534e:	50 e0       	ldi	r21, 0x00	; 0
    5350:	8c 81       	ldd	r24, Y+4	; 0x04
    5352:	28 2f       	mov	r18, r24
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	ce 01       	movw	r24, r28
    5358:	0c 96       	adiw	r24, 0x0c	; 12
    535a:	fc 01       	movw	r30, r24
    535c:	e2 0f       	add	r30, r18
    535e:	f3 1f       	adc	r31, r19
    5360:	80 81       	ld	r24, Z
    5362:	28 2f       	mov	r18, r24
    5364:	20 53       	subi	r18, 0x30	; 48
    5366:	ce 01       	movw	r24, r28
    5368:	0c 96       	adiw	r24, 0x0c	; 12
    536a:	fc 01       	movw	r30, r24
    536c:	e4 0f       	add	r30, r20
    536e:	f5 1f       	adc	r31, r21
    5370:	20 83       	st	Z, r18
		Local_u8ID = Local_u8ID*10 + (uint16)Local_u8ID_Arr[Local_u8Counter];
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	9a 81       	ldd	r25, Y+2	; 0x02
    5376:	9c 01       	movw	r18, r24
    5378:	22 0f       	add	r18, r18
    537a:	33 1f       	adc	r19, r19
    537c:	c9 01       	movw	r24, r18
    537e:	88 0f       	add	r24, r24
    5380:	99 1f       	adc	r25, r25
    5382:	88 0f       	add	r24, r24
    5384:	99 1f       	adc	r25, r25
    5386:	a9 01       	movw	r20, r18
    5388:	48 0f       	add	r20, r24
    538a:	59 1f       	adc	r21, r25
    538c:	8c 81       	ldd	r24, Y+4	; 0x04
    538e:	28 2f       	mov	r18, r24
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	ce 01       	movw	r24, r28
    5394:	08 96       	adiw	r24, 0x08	; 8
    5396:	fc 01       	movw	r30, r24
    5398:	e2 0f       	add	r30, r18
    539a:	f3 1f       	adc	r31, r19
    539c:	80 81       	ld	r24, Z
    539e:	88 2f       	mov	r24, r24
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	84 0f       	add	r24, r20
    53a4:	95 1f       	adc	r25, r21
    53a6:	9a 83       	std	Y+2, r25	; 0x02
    53a8:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Pass = Local_u8Pass*10 + Local_u8Pass_Arr[Local_u8Counter];
    53aa:	8b 81       	ldd	r24, Y+3	; 0x03
    53ac:	88 2f       	mov	r24, r24
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	9c 01       	movw	r18, r24
    53b2:	22 0f       	add	r18, r18
    53b4:	33 1f       	adc	r19, r19
    53b6:	c9 01       	movw	r24, r18
    53b8:	88 0f       	add	r24, r24
    53ba:	99 1f       	adc	r25, r25
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	82 0f       	add	r24, r18
    53c2:	93 1f       	adc	r25, r19
    53c4:	48 2f       	mov	r20, r24
    53c6:	8c 81       	ldd	r24, Y+4	; 0x04
    53c8:	28 2f       	mov	r18, r24
    53ca:	30 e0       	ldi	r19, 0x00	; 0
    53cc:	ce 01       	movw	r24, r28
    53ce:	0c 96       	adiw	r24, 0x0c	; 12
    53d0:	fc 01       	movw	r30, r24
    53d2:	e2 0f       	add	r30, r18
    53d4:	f3 1f       	adc	r31, r19
    53d6:	80 81       	ld	r24, Z
    53d8:	84 0f       	add	r24, r20
    53da:	8b 83       	std	Y+3, r24	; 0x03
        if(Local_u8Pass_Arr[0] == 0)
        {
        	Local_u8Riciving_finish = 0;
        }
	}
	for(Local_u8Counter = 0;Local_u8Counter < 3;Local_u8Counter++)
    53dc:	8c 81       	ldd	r24, Y+4	; 0x04
    53de:	8f 5f       	subi	r24, 0xFF	; 255
    53e0:	8c 83       	std	Y+4, r24	; 0x04
    53e2:	8c 81       	ldd	r24, Y+4	; 0x04
    53e4:	83 30       	cpi	r24, 0x03	; 3
    53e6:	08 f4       	brcc	.+2      	; 0x53ea <APP_u8ID_Password_Check+0x150>
    53e8:	9c cf       	rjmp	.-200    	; 0x5322 <APP_u8ID_Password_Check+0x88>
		Local_u8ID_Arr[Local_u8Counter] = Local_u8ID_Arr[Local_u8Counter] - '0';
		Local_u8Pass_Arr[Local_u8Counter] = Local_u8Pass_Arr[Local_u8Counter] - '0';
		Local_u8ID = Local_u8ID*10 + (uint16)Local_u8ID_Arr[Local_u8Counter];
		Local_u8Pass = Local_u8Pass*10 + Local_u8Pass_Arr[Local_u8Counter];
	}
	EEPROM_voidReadDataByte(Local_u8ID,&Local_u8SavedPass);
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	9a 81       	ldd	r25, Y+2	; 0x02
    53ee:	9e 01       	movw	r18, r28
    53f0:	29 5f       	subi	r18, 0xF9	; 249
    53f2:	3f 4f       	sbci	r19, 0xFF	; 255
    53f4:	b9 01       	movw	r22, r18
    53f6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <EEPROM_voidReadDataByte>
	if(Local_u8Pass == Local_u8SavedPass)
    53fa:	9f 81       	ldd	r25, Y+7	; 0x07
    53fc:	8b 81       	ldd	r24, Y+3	; 0x03
    53fe:	89 17       	cp	r24, r25
    5400:	19 f4       	brne	.+6      	; 0x5408 <APP_u8ID_Password_Check+0x16e>
	{
		Local_u8Check = 1;
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	8d 83       	std	Y+5, r24	; 0x05
    5406:	02 c0       	rjmp	.+4      	; 0x540c <APP_u8ID_Password_Check+0x172>
	}
	else
	{
		Local_u8Check = 2;
    5408:	82 e0       	ldi	r24, 0x02	; 2
    540a:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8Check;
    540c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    540e:	2f 96       	adiw	r28, 0x0f	; 15
    5410:	0f b6       	in	r0, 0x3f	; 63
    5412:	f8 94       	cli
    5414:	de bf       	out	0x3e, r29	; 62
    5416:	0f be       	out	0x3f, r0	; 63
    5418:	cd bf       	out	0x3d, r28	; 61
    541a:	cf 91       	pop	r28
    541c:	df 91       	pop	r29
    541e:	08 95       	ret

00005420 <APP_voidDisplayChoices>:
void APP_voidDisplayChoices(void)
{
    5420:	df 93       	push	r29
    5422:	cf 93       	push	r28
    5424:	cd b7       	in	r28, 0x3d	; 61
    5426:	de b7       	in	r29, 0x3e	; 62
	UART_u8SendString("1");
    5428:	8d e4       	ldi	r24, 0x4D	; 77
    542a:	91 e0       	ldi	r25, 0x01	; 1
    542c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("2");
    5430:	8f e4       	ldi	r24, 0x4F	; 79
    5432:	91 e0       	ldi	r25, 0x01	; 1
    5434:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("3");
    5438:	81 e5       	ldi	r24, 0x51	; 81
    543a:	91 e0       	ldi	r25, 0x01	; 1
    543c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("4");
    5440:	83 e5       	ldi	r24, 0x53	; 83
    5442:	91 e0       	ldi	r25, 0x01	; 1
    5444:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("5");
    5448:	85 e5       	ldi	r24, 0x55	; 85
    544a:	91 e0       	ldi	r25, 0x01	; 1
    544c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("6");
    5450:	87 e5       	ldi	r24, 0x57	; 87
    5452:	91 e0       	ldi	r25, 0x01	; 1
    5454:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("7");
    5458:	89 e5       	ldi	r24, 0x59	; 89
    545a:	91 e0       	ldi	r25, 0x01	; 1
    545c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("8");
    5460:	8b e5       	ldi	r24, 0x5B	; 91
    5462:	91 e0       	ldi	r25, 0x01	; 1
    5464:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("9");
    5468:	8d e5       	ldi	r24, 0x5D	; 93
    546a:	91 e0       	ldi	r25, 0x01	; 1
    546c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
	UART_u8SendString("10");
    5470:	8f e5       	ldi	r24, 0x5F	; 95
    5472:	91 e0       	ldi	r25, 0x01	; 1
    5474:	0e 94 49 25 	call	0x4a92	; 0x4a92 <UART_u8SendString>
}
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	08 95       	ret

0000547e <APP_u8ChoiceChecking>:
uint8 APP_u8ChoiceChecking(uint8 Copy_u8DataArr[],uint8 Copy_u8Size)
{
    547e:	df 93       	push	r29
    5480:	cf 93       	push	r28
    5482:	00 d0       	rcall	.+0      	; 0x5484 <APP_u8ChoiceChecking+0x6>
    5484:	00 d0       	rcall	.+0      	; 0x5486 <APP_u8ChoiceChecking+0x8>
    5486:	0f 92       	push	r0
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
    548c:	9c 83       	std	Y+4, r25	; 0x04
    548e:	8b 83       	std	Y+3, r24	; 0x03
    5490:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_ChooseFlag = 0,Local_u8Counter=0;
    5492:	1a 82       	std	Y+2, r1	; 0x02
    5494:	19 82       	std	Y+1, r1	; 0x01
    5496:	1a c0       	rjmp	.+52     	; 0x54cc <APP_u8ChoiceChecking+0x4e>
	static uint8 Choose_8[] = {"control motor speed with hand"};
	static uint8 Choose_9[] = {"finish"};
	static uint8 Choose_10[] = {"back to main menu"};
	while(Choose_1[Local_u8Counter] != '\0')
	{
        if(Copy_u8DataArr[Local_u8Counter] == Choose_1[Local_u8Counter])
    5498:	89 81       	ldd	r24, Y+1	; 0x01
    549a:	28 2f       	mov	r18, r24
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	8b 81       	ldd	r24, Y+3	; 0x03
    54a0:	9c 81       	ldd	r25, Y+4	; 0x04
    54a2:	fc 01       	movw	r30, r24
    54a4:	e2 0f       	add	r30, r18
    54a6:	f3 1f       	adc	r31, r19
    54a8:	20 81       	ld	r18, Z
    54aa:	89 81       	ldd	r24, Y+1	; 0x01
    54ac:	88 2f       	mov	r24, r24
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	fc 01       	movw	r30, r24
    54b2:	e5 50       	subi	r30, 0x05	; 5
    54b4:	fe 4f       	sbci	r31, 0xFE	; 254
    54b6:	80 81       	ld	r24, Z
    54b8:	28 17       	cp	r18, r24
    54ba:	31 f4       	brne	.+12     	; 0x54c8 <APP_u8ChoiceChecking+0x4a>
        {
        	Local_ChooseFlag = 1;
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	8a 83       	std	Y+2, r24	; 0x02
        else
        {
        	Local_ChooseFlag = 0;
        	break;
        }
        Local_u8Counter++;
    54c0:	89 81       	ldd	r24, Y+1	; 0x01
    54c2:	8f 5f       	subi	r24, 0xFF	; 255
    54c4:	89 83       	std	Y+1, r24	; 0x01
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <APP_u8ChoiceChecking+0x4e>
        {
        	Local_ChooseFlag = 1;
        }
        else
        {
        	Local_ChooseFlag = 0;
    54c8:	1a 82       	std	Y+2, r1	; 0x02
    54ca:	09 c0       	rjmp	.+18     	; 0x54de <APP_u8ChoiceChecking+0x60>
	static uint8 Choose_6[] = {"open the motor"};
	static uint8 Choose_7[] = {"close the motor"};
	static uint8 Choose_8[] = {"control motor speed with hand"};
	static uint8 Choose_9[] = {"finish"};
	static uint8 Choose_10[] = {"back to main menu"};
	while(Choose_1[Local_u8Counter] != '\0')
    54cc:	89 81       	ldd	r24, Y+1	; 0x01
    54ce:	88 2f       	mov	r24, r24
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	fc 01       	movw	r30, r24
    54d4:	e5 50       	subi	r30, 0x05	; 5
    54d6:	fe 4f       	sbci	r31, 0xFE	; 254
    54d8:	80 81       	ld	r24, Z
    54da:	88 23       	and	r24, r24
    54dc:	e9 f6       	brne	.-70     	; 0x5498 <APP_u8ChoiceChecking+0x1a>
        	Local_ChooseFlag = 0;
        	break;
        }
        Local_u8Counter++;
	}
	if(Local_ChooseFlag == 0)
    54de:	8a 81       	ldd	r24, Y+2	; 0x02
    54e0:	88 23       	and	r24, r24
    54e2:	29 f5       	brne	.+74     	; 0x552e <APP_u8ChoiceChecking+0xb0>
	{
		Local_u8Counter = 0;
    54e4:	19 82       	std	Y+1, r1	; 0x01
    54e6:	1a c0       	rjmp	.+52     	; 0x551c <APP_u8ChoiceChecking+0x9e>
		while(Choose_2[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_2[Local_u8Counter])
    54e8:	89 81       	ldd	r24, Y+1	; 0x01
    54ea:	28 2f       	mov	r18, r24
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	8b 81       	ldd	r24, Y+3	; 0x03
    54f0:	9c 81       	ldd	r25, Y+4	; 0x04
    54f2:	fc 01       	movw	r30, r24
    54f4:	e2 0f       	add	r30, r18
    54f6:	f3 1f       	adc	r31, r19
    54f8:	20 81       	ld	r18, Z
    54fa:	89 81       	ldd	r24, Y+1	; 0x01
    54fc:	88 2f       	mov	r24, r24
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	fc 01       	movw	r30, r24
    5502:	e4 51       	subi	r30, 0x14	; 20
    5504:	fe 4f       	sbci	r31, 0xFE	; 254
    5506:	80 81       	ld	r24, Z
    5508:	28 17       	cp	r18, r24
    550a:	31 f4       	brne	.+12     	; 0x5518 <APP_u8ChoiceChecking+0x9a>
	        {
	        	Local_ChooseFlag = 2;
    550c:	82 e0       	ldi	r24, 0x02	; 2
    550e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5510:	89 81       	ldd	r24, Y+1	; 0x01
    5512:	8f 5f       	subi	r24, 0xFF	; 255
    5514:	89 83       	std	Y+1, r24	; 0x01
    5516:	02 c0       	rjmp	.+4      	; 0x551c <APP_u8ChoiceChecking+0x9e>
	        {
	        	Local_ChooseFlag = 2;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5518:	1a 82       	std	Y+2, r1	; 0x02
    551a:	09 c0       	rjmp	.+18     	; 0x552e <APP_u8ChoiceChecking+0xb0>
        Local_u8Counter++;
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_2[Local_u8Counter] != '\0')
    551c:	89 81       	ldd	r24, Y+1	; 0x01
    551e:	88 2f       	mov	r24, r24
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	fc 01       	movw	r30, r24
    5524:	e4 51       	subi	r30, 0x14	; 20
    5526:	fe 4f       	sbci	r31, 0xFE	; 254
    5528:	80 81       	ld	r24, Z
    552a:	88 23       	and	r24, r24
    552c:	e9 f6       	brne	.-70     	; 0x54e8 <APP_u8ChoiceChecking+0x6a>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    552e:	8a 81       	ldd	r24, Y+2	; 0x02
    5530:	88 23       	and	r24, r24
    5532:	29 f5       	brne	.+74     	; 0x557e <APP_u8ChoiceChecking+0x100>
	{
		Local_u8Counter = 0;
    5534:	19 82       	std	Y+1, r1	; 0x01
    5536:	1a c0       	rjmp	.+52     	; 0x556c <APP_u8ChoiceChecking+0xee>
		while(Choose_3[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_3[Local_u8Counter])
    5538:	89 81       	ldd	r24, Y+1	; 0x01
    553a:	28 2f       	mov	r18, r24
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	9c 81       	ldd	r25, Y+4	; 0x04
    5542:	fc 01       	movw	r30, r24
    5544:	e2 0f       	add	r30, r18
    5546:	f3 1f       	adc	r31, r19
    5548:	20 81       	ld	r18, Z
    554a:	89 81       	ldd	r24, Y+1	; 0x01
    554c:	88 2f       	mov	r24, r24
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	fc 01       	movw	r30, r24
    5552:	e2 52       	subi	r30, 0x22	; 34
    5554:	fe 4f       	sbci	r31, 0xFE	; 254
    5556:	80 81       	ld	r24, Z
    5558:	28 17       	cp	r18, r24
    555a:	31 f4       	brne	.+12     	; 0x5568 <APP_u8ChoiceChecking+0xea>
	        {
	        	Local_ChooseFlag = 3;
    555c:	83 e0       	ldi	r24, 0x03	; 3
    555e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5560:	89 81       	ldd	r24, Y+1	; 0x01
    5562:	8f 5f       	subi	r24, 0xFF	; 255
    5564:	89 83       	std	Y+1, r24	; 0x01
    5566:	02 c0       	rjmp	.+4      	; 0x556c <APP_u8ChoiceChecking+0xee>
	        {
	        	Local_ChooseFlag = 3;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5568:	1a 82       	std	Y+2, r1	; 0x02
    556a:	09 c0       	rjmp	.+18     	; 0x557e <APP_u8ChoiceChecking+0x100>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_3[Local_u8Counter] != '\0')
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	88 2f       	mov	r24, r24
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	fc 01       	movw	r30, r24
    5574:	e2 52       	subi	r30, 0x22	; 34
    5576:	fe 4f       	sbci	r31, 0xFE	; 254
    5578:	80 81       	ld	r24, Z
    557a:	88 23       	and	r24, r24
    557c:	e9 f6       	brne	.-70     	; 0x5538 <APP_u8ChoiceChecking+0xba>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    557e:	8a 81       	ldd	r24, Y+2	; 0x02
    5580:	88 23       	and	r24, r24
    5582:	29 f5       	brne	.+74     	; 0x55ce <APP_u8ChoiceChecking+0x150>
	{
		Local_u8Counter = 0;
    5584:	19 82       	std	Y+1, r1	; 0x01
    5586:	1a c0       	rjmp	.+52     	; 0x55bc <APP_u8ChoiceChecking+0x13e>
		while(Choose_4[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_4[Local_u8Counter])
    5588:	89 81       	ldd	r24, Y+1	; 0x01
    558a:	28 2f       	mov	r18, r24
    558c:	30 e0       	ldi	r19, 0x00	; 0
    558e:	8b 81       	ldd	r24, Y+3	; 0x03
    5590:	9c 81       	ldd	r25, Y+4	; 0x04
    5592:	fc 01       	movw	r30, r24
    5594:	e2 0f       	add	r30, r18
    5596:	f3 1f       	adc	r31, r19
    5598:	20 81       	ld	r18, Z
    559a:	89 81       	ldd	r24, Y+1	; 0x01
    559c:	88 2f       	mov	r24, r24
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	fc 01       	movw	r30, r24
    55a2:	e0 53       	subi	r30, 0x30	; 48
    55a4:	fe 4f       	sbci	r31, 0xFE	; 254
    55a6:	80 81       	ld	r24, Z
    55a8:	28 17       	cp	r18, r24
    55aa:	31 f4       	brne	.+12     	; 0x55b8 <APP_u8ChoiceChecking+0x13a>
	        {
	        	Local_ChooseFlag = 4;
    55ac:	84 e0       	ldi	r24, 0x04	; 4
    55ae:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    55b0:	89 81       	ldd	r24, Y+1	; 0x01
    55b2:	8f 5f       	subi	r24, 0xFF	; 255
    55b4:	89 83       	std	Y+1, r24	; 0x01
    55b6:	02 c0       	rjmp	.+4      	; 0x55bc <APP_u8ChoiceChecking+0x13e>
	        {
	        	Local_ChooseFlag = 4;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    55b8:	1a 82       	std	Y+2, r1	; 0x02
    55ba:	09 c0       	rjmp	.+18     	; 0x55ce <APP_u8ChoiceChecking+0x150>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_4[Local_u8Counter] != '\0')
    55bc:	89 81       	ldd	r24, Y+1	; 0x01
    55be:	88 2f       	mov	r24, r24
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	fc 01       	movw	r30, r24
    55c4:	e0 53       	subi	r30, 0x30	; 48
    55c6:	fe 4f       	sbci	r31, 0xFE	; 254
    55c8:	80 81       	ld	r24, Z
    55ca:	88 23       	and	r24, r24
    55cc:	e9 f6       	brne	.-70     	; 0x5588 <APP_u8ChoiceChecking+0x10a>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    55ce:	8a 81       	ldd	r24, Y+2	; 0x02
    55d0:	88 23       	and	r24, r24
    55d2:	29 f5       	brne	.+74     	; 0x561e <APP_u8ChoiceChecking+0x1a0>
	{
		Local_u8Counter = 0;
    55d4:	19 82       	std	Y+1, r1	; 0x01
    55d6:	1a c0       	rjmp	.+52     	; 0x560c <APP_u8ChoiceChecking+0x18e>
		while(Choose_5[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_5[Local_u8Counter])
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	28 2f       	mov	r18, r24
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	8b 81       	ldd	r24, Y+3	; 0x03
    55e0:	9c 81       	ldd	r25, Y+4	; 0x04
    55e2:	fc 01       	movw	r30, r24
    55e4:	e2 0f       	add	r30, r18
    55e6:	f3 1f       	adc	r31, r19
    55e8:	20 81       	ld	r18, Z
    55ea:	89 81       	ldd	r24, Y+1	; 0x01
    55ec:	88 2f       	mov	r24, r24
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	fc 01       	movw	r30, r24
    55f2:	ef 53       	subi	r30, 0x3F	; 63
    55f4:	fe 4f       	sbci	r31, 0xFE	; 254
    55f6:	80 81       	ld	r24, Z
    55f8:	28 17       	cp	r18, r24
    55fa:	31 f4       	brne	.+12     	; 0x5608 <APP_u8ChoiceChecking+0x18a>
	        {
	        	Local_ChooseFlag = 5;
    55fc:	85 e0       	ldi	r24, 0x05	; 5
    55fe:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	8f 5f       	subi	r24, 0xFF	; 255
    5604:	89 83       	std	Y+1, r24	; 0x01
    5606:	02 c0       	rjmp	.+4      	; 0x560c <APP_u8ChoiceChecking+0x18e>
	        {
	        	Local_ChooseFlag = 5;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5608:	1a 82       	std	Y+2, r1	; 0x02
    560a:	09 c0       	rjmp	.+18     	; 0x561e <APP_u8ChoiceChecking+0x1a0>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_5[Local_u8Counter] != '\0')
    560c:	89 81       	ldd	r24, Y+1	; 0x01
    560e:	88 2f       	mov	r24, r24
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	fc 01       	movw	r30, r24
    5614:	ef 53       	subi	r30, 0x3F	; 63
    5616:	fe 4f       	sbci	r31, 0xFE	; 254
    5618:	80 81       	ld	r24, Z
    561a:	88 23       	and	r24, r24
    561c:	e9 f6       	brne	.-70     	; 0x55d8 <APP_u8ChoiceChecking+0x15a>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	88 23       	and	r24, r24
    5622:	29 f5       	brne	.+74     	; 0x566e <APP_u8ChoiceChecking+0x1f0>
	{
		Local_u8Counter = 0;
    5624:	19 82       	std	Y+1, r1	; 0x01
    5626:	1a c0       	rjmp	.+52     	; 0x565c <APP_u8ChoiceChecking+0x1de>
		while(Choose_6[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_6[Local_u8Counter])
    5628:	89 81       	ldd	r24, Y+1	; 0x01
    562a:	28 2f       	mov	r18, r24
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	8b 81       	ldd	r24, Y+3	; 0x03
    5630:	9c 81       	ldd	r25, Y+4	; 0x04
    5632:	fc 01       	movw	r30, r24
    5634:	e2 0f       	add	r30, r18
    5636:	f3 1f       	adc	r31, r19
    5638:	20 81       	ld	r18, Z
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	88 2f       	mov	r24, r24
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	fc 01       	movw	r30, r24
    5642:	ee 54       	subi	r30, 0x4E	; 78
    5644:	fe 4f       	sbci	r31, 0xFE	; 254
    5646:	80 81       	ld	r24, Z
    5648:	28 17       	cp	r18, r24
    564a:	31 f4       	brne	.+12     	; 0x5658 <APP_u8ChoiceChecking+0x1da>
	        {
	        	Local_ChooseFlag = 6;
    564c:	86 e0       	ldi	r24, 0x06	; 6
    564e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5650:	89 81       	ldd	r24, Y+1	; 0x01
    5652:	8f 5f       	subi	r24, 0xFF	; 255
    5654:	89 83       	std	Y+1, r24	; 0x01
    5656:	02 c0       	rjmp	.+4      	; 0x565c <APP_u8ChoiceChecking+0x1de>
	        {
	        	Local_ChooseFlag = 6;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5658:	1a 82       	std	Y+2, r1	; 0x02
    565a:	09 c0       	rjmp	.+18     	; 0x566e <APP_u8ChoiceChecking+0x1f0>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_6[Local_u8Counter] != '\0')
    565c:	89 81       	ldd	r24, Y+1	; 0x01
    565e:	88 2f       	mov	r24, r24
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	fc 01       	movw	r30, r24
    5664:	ee 54       	subi	r30, 0x4E	; 78
    5666:	fe 4f       	sbci	r31, 0xFE	; 254
    5668:	80 81       	ld	r24, Z
    566a:	88 23       	and	r24, r24
    566c:	e9 f6       	brne	.-70     	; 0x5628 <APP_u8ChoiceChecking+0x1aa>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	88 23       	and	r24, r24
    5672:	29 f5       	brne	.+74     	; 0x56be <APP_u8ChoiceChecking+0x240>
	{
		Local_u8Counter = 0;
    5674:	19 82       	std	Y+1, r1	; 0x01
    5676:	1a c0       	rjmp	.+52     	; 0x56ac <APP_u8ChoiceChecking+0x22e>
		while(Choose_7[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_7[Local_u8Counter])
    5678:	89 81       	ldd	r24, Y+1	; 0x01
    567a:	28 2f       	mov	r18, r24
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	8b 81       	ldd	r24, Y+3	; 0x03
    5680:	9c 81       	ldd	r25, Y+4	; 0x04
    5682:	fc 01       	movw	r30, r24
    5684:	e2 0f       	add	r30, r18
    5686:	f3 1f       	adc	r31, r19
    5688:	20 81       	ld	r18, Z
    568a:	89 81       	ldd	r24, Y+1	; 0x01
    568c:	88 2f       	mov	r24, r24
    568e:	90 e0       	ldi	r25, 0x00	; 0
    5690:	fc 01       	movw	r30, r24
    5692:	ee 55       	subi	r30, 0x5E	; 94
    5694:	fe 4f       	sbci	r31, 0xFE	; 254
    5696:	80 81       	ld	r24, Z
    5698:	28 17       	cp	r18, r24
    569a:	31 f4       	brne	.+12     	; 0x56a8 <APP_u8ChoiceChecking+0x22a>
	        {
	        	Local_ChooseFlag = 7;
    569c:	87 e0       	ldi	r24, 0x07	; 7
    569e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    56a0:	89 81       	ldd	r24, Y+1	; 0x01
    56a2:	8f 5f       	subi	r24, 0xFF	; 255
    56a4:	89 83       	std	Y+1, r24	; 0x01
    56a6:	02 c0       	rjmp	.+4      	; 0x56ac <APP_u8ChoiceChecking+0x22e>
	        {
	        	Local_ChooseFlag = 7;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    56a8:	1a 82       	std	Y+2, r1	; 0x02
    56aa:	09 c0       	rjmp	.+18     	; 0x56be <APP_u8ChoiceChecking+0x240>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_7[Local_u8Counter] != '\0')
    56ac:	89 81       	ldd	r24, Y+1	; 0x01
    56ae:	88 2f       	mov	r24, r24
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	fc 01       	movw	r30, r24
    56b4:	ee 55       	subi	r30, 0x5E	; 94
    56b6:	fe 4f       	sbci	r31, 0xFE	; 254
    56b8:	80 81       	ld	r24, Z
    56ba:	88 23       	and	r24, r24
    56bc:	e9 f6       	brne	.-70     	; 0x5678 <APP_u8ChoiceChecking+0x1fa>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    56be:	8a 81       	ldd	r24, Y+2	; 0x02
    56c0:	88 23       	and	r24, r24
    56c2:	29 f5       	brne	.+74     	; 0x570e <APP_u8ChoiceChecking+0x290>
	{
		Local_u8Counter = 0;
    56c4:	19 82       	std	Y+1, r1	; 0x01
    56c6:	1a c0       	rjmp	.+52     	; 0x56fc <APP_u8ChoiceChecking+0x27e>
		while(Choose_8[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_8[Local_u8Counter])
    56c8:	89 81       	ldd	r24, Y+1	; 0x01
    56ca:	28 2f       	mov	r18, r24
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	8b 81       	ldd	r24, Y+3	; 0x03
    56d0:	9c 81       	ldd	r25, Y+4	; 0x04
    56d2:	fc 01       	movw	r30, r24
    56d4:	e2 0f       	add	r30, r18
    56d6:	f3 1f       	adc	r31, r19
    56d8:	20 81       	ld	r18, Z
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	88 2f       	mov	r24, r24
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	fc 01       	movw	r30, r24
    56e2:	ec 57       	subi	r30, 0x7C	; 124
    56e4:	fe 4f       	sbci	r31, 0xFE	; 254
    56e6:	80 81       	ld	r24, Z
    56e8:	28 17       	cp	r18, r24
    56ea:	31 f4       	brne	.+12     	; 0x56f8 <APP_u8ChoiceChecking+0x27a>
	        {
	        	Local_ChooseFlag = 8;
    56ec:	88 e0       	ldi	r24, 0x08	; 8
    56ee:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    56f0:	89 81       	ldd	r24, Y+1	; 0x01
    56f2:	8f 5f       	subi	r24, 0xFF	; 255
    56f4:	89 83       	std	Y+1, r24	; 0x01
    56f6:	02 c0       	rjmp	.+4      	; 0x56fc <APP_u8ChoiceChecking+0x27e>
	        {
	        	Local_ChooseFlag = 8;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    56f8:	1a 82       	std	Y+2, r1	; 0x02
    56fa:	09 c0       	rjmp	.+18     	; 0x570e <APP_u8ChoiceChecking+0x290>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_8[Local_u8Counter] != '\0')
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
    56fe:	88 2f       	mov	r24, r24
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	fc 01       	movw	r30, r24
    5704:	ec 57       	subi	r30, 0x7C	; 124
    5706:	fe 4f       	sbci	r31, 0xFE	; 254
    5708:	80 81       	ld	r24, Z
    570a:	88 23       	and	r24, r24
    570c:	e9 f6       	brne	.-70     	; 0x56c8 <APP_u8ChoiceChecking+0x24a>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    570e:	8a 81       	ldd	r24, Y+2	; 0x02
    5710:	88 23       	and	r24, r24
    5712:	29 f5       	brne	.+74     	; 0x575e <APP_u8ChoiceChecking+0x2e0>
	{
		Local_u8Counter = 0;
    5714:	19 82       	std	Y+1, r1	; 0x01
    5716:	1a c0       	rjmp	.+52     	; 0x574c <APP_u8ChoiceChecking+0x2ce>
		while(Choose_9[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_9[Local_u8Counter])
    5718:	89 81       	ldd	r24, Y+1	; 0x01
    571a:	28 2f       	mov	r18, r24
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	8b 81       	ldd	r24, Y+3	; 0x03
    5720:	9c 81       	ldd	r25, Y+4	; 0x04
    5722:	fc 01       	movw	r30, r24
    5724:	e2 0f       	add	r30, r18
    5726:	f3 1f       	adc	r31, r19
    5728:	20 81       	ld	r18, Z
    572a:	89 81       	ldd	r24, Y+1	; 0x01
    572c:	88 2f       	mov	r24, r24
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	fc 01       	movw	r30, r24
    5732:	e3 58       	subi	r30, 0x83	; 131
    5734:	fe 4f       	sbci	r31, 0xFE	; 254
    5736:	80 81       	ld	r24, Z
    5738:	28 17       	cp	r18, r24
    573a:	31 f4       	brne	.+12     	; 0x5748 <APP_u8ChoiceChecking+0x2ca>
	        {
	        	Local_ChooseFlag = 9;
    573c:	89 e0       	ldi	r24, 0x09	; 9
    573e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	8f 5f       	subi	r24, 0xFF	; 255
    5744:	89 83       	std	Y+1, r24	; 0x01
    5746:	02 c0       	rjmp	.+4      	; 0x574c <APP_u8ChoiceChecking+0x2ce>
	        {
	        	Local_ChooseFlag = 9;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5748:	1a 82       	std	Y+2, r1	; 0x02
    574a:	09 c0       	rjmp	.+18     	; 0x575e <APP_u8ChoiceChecking+0x2e0>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_9[Local_u8Counter] != '\0')
    574c:	89 81       	ldd	r24, Y+1	; 0x01
    574e:	88 2f       	mov	r24, r24
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	fc 01       	movw	r30, r24
    5754:	e3 58       	subi	r30, 0x83	; 131
    5756:	fe 4f       	sbci	r31, 0xFE	; 254
    5758:	80 81       	ld	r24, Z
    575a:	88 23       	and	r24, r24
    575c:	e9 f6       	brne	.-70     	; 0x5718 <APP_u8ChoiceChecking+0x29a>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	if(Local_ChooseFlag == 0)
    575e:	8a 81       	ldd	r24, Y+2	; 0x02
    5760:	88 23       	and	r24, r24
    5762:	29 f5       	brne	.+74     	; 0x57ae <APP_u8ChoiceChecking+0x330>
	{
		Local_u8Counter = 0;
    5764:	19 82       	std	Y+1, r1	; 0x01
    5766:	1a c0       	rjmp	.+52     	; 0x579c <APP_u8ChoiceChecking+0x31e>
		while(Choose_10[Local_u8Counter] != '\0')
		{
	        if(Copy_u8DataArr[Local_u8Counter] == Choose_10[Local_u8Counter])
    5768:	89 81       	ldd	r24, Y+1	; 0x01
    576a:	28 2f       	mov	r18, r24
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	8b 81       	ldd	r24, Y+3	; 0x03
    5770:	9c 81       	ldd	r25, Y+4	; 0x04
    5772:	fc 01       	movw	r30, r24
    5774:	e2 0f       	add	r30, r18
    5776:	f3 1f       	adc	r31, r19
    5778:	20 81       	ld	r18, Z
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	88 2f       	mov	r24, r24
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	fc 01       	movw	r30, r24
    5782:	e5 59       	subi	r30, 0x95	; 149
    5784:	fe 4f       	sbci	r31, 0xFE	; 254
    5786:	80 81       	ld	r24, Z
    5788:	28 17       	cp	r18, r24
    578a:	31 f4       	brne	.+12     	; 0x5798 <APP_u8ChoiceChecking+0x31a>
	        {
	        	Local_ChooseFlag = 10;
    578c:	8a e0       	ldi	r24, 0x0A	; 10
    578e:	8a 83       	std	Y+2, r24	; 0x02
	        else
	        {
	        	Local_ChooseFlag = 0;
	        	break;
	        }
	        Local_u8Counter++;
    5790:	89 81       	ldd	r24, Y+1	; 0x01
    5792:	8f 5f       	subi	r24, 0xFF	; 255
    5794:	89 83       	std	Y+1, r24	; 0x01
    5796:	02 c0       	rjmp	.+4      	; 0x579c <APP_u8ChoiceChecking+0x31e>
	        {
	        	Local_ChooseFlag = 10;
	        }
	        else
	        {
	        	Local_ChooseFlag = 0;
    5798:	1a 82       	std	Y+2, r1	; 0x02
    579a:	09 c0       	rjmp	.+18     	; 0x57ae <APP_u8ChoiceChecking+0x330>
		}
	}
	if(Local_ChooseFlag == 0)
	{
		Local_u8Counter = 0;
		while(Choose_10[Local_u8Counter] != '\0')
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	88 2f       	mov	r24, r24
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	fc 01       	movw	r30, r24
    57a4:	e5 59       	subi	r30, 0x95	; 149
    57a6:	fe 4f       	sbci	r31, 0xFE	; 254
    57a8:	80 81       	ld	r24, Z
    57aa:	88 23       	and	r24, r24
    57ac:	e9 f6       	brne	.-70     	; 0x5768 <APP_u8ChoiceChecking+0x2ea>
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	for(Local_u8Counter = 0;Local_u8Counter <Copy_u8Size;Local_u8Counter++)
    57ae:	19 82       	std	Y+1, r1	; 0x01
    57b0:	0c c0       	rjmp	.+24     	; 0x57ca <APP_u8ChoiceChecking+0x34c>
	{
		Copy_u8DataArr[Local_u8Counter] = 0;
    57b2:	89 81       	ldd	r24, Y+1	; 0x01
    57b4:	28 2f       	mov	r18, r24
    57b6:	30 e0       	ldi	r19, 0x00	; 0
    57b8:	8b 81       	ldd	r24, Y+3	; 0x03
    57ba:	9c 81       	ldd	r25, Y+4	; 0x04
    57bc:	fc 01       	movw	r30, r24
    57be:	e2 0f       	add	r30, r18
    57c0:	f3 1f       	adc	r31, r19
    57c2:	10 82       	st	Z, r1
	        	break;
	        }
	        Local_u8Counter++;
		}
	}
	for(Local_u8Counter = 0;Local_u8Counter <Copy_u8Size;Local_u8Counter++)
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	8f 5f       	subi	r24, 0xFF	; 255
    57c8:	89 83       	std	Y+1, r24	; 0x01
    57ca:	99 81       	ldd	r25, Y+1	; 0x01
    57cc:	8d 81       	ldd	r24, Y+5	; 0x05
    57ce:	98 17       	cp	r25, r24
    57d0:	80 f3       	brcs	.-32     	; 0x57b2 <APP_u8ChoiceChecking+0x334>
	{
		Copy_u8DataArr[Local_u8Counter] = 0;
	}
	return Local_ChooseFlag;
    57d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57d4:	0f 90       	pop	r0
    57d6:	0f 90       	pop	r0
    57d8:	0f 90       	pop	r0
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	cf 91       	pop	r28
    57e0:	df 91       	pop	r29
    57e2:	08 95       	ret

000057e4 <APP_voidHomeControl>:
void APP_voidHomeControl(uint8 Copy_u8Choose)
{
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	00 d0       	rcall	.+0      	; 0x57ea <APP_voidHomeControl+0x6>
    57ea:	0f 92       	push	r0
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Choose)
    57f2:	89 81       	ldd	r24, Y+1	; 0x01
    57f4:	28 2f       	mov	r18, r24
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	3b 83       	std	Y+3, r19	; 0x03
    57fa:	2a 83       	std	Y+2, r18	; 0x02
    57fc:	8a 81       	ldd	r24, Y+2	; 0x02
    57fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5800:	84 30       	cpi	r24, 0x04	; 4
    5802:	91 05       	cpc	r25, r1
    5804:	99 f1       	breq	.+102    	; 0x586c <APP_voidHomeControl+0x88>
    5806:	2a 81       	ldd	r18, Y+2	; 0x02
    5808:	3b 81       	ldd	r19, Y+3	; 0x03
    580a:	25 30       	cpi	r18, 0x05	; 5
    580c:	31 05       	cpc	r19, r1
    580e:	84 f4       	brge	.+32     	; 0x5830 <APP_voidHomeControl+0x4c>
    5810:	8a 81       	ldd	r24, Y+2	; 0x02
    5812:	9b 81       	ldd	r25, Y+3	; 0x03
    5814:	82 30       	cpi	r24, 0x02	; 2
    5816:	91 05       	cpc	r25, r1
    5818:	19 f1       	breq	.+70     	; 0x5860 <APP_voidHomeControl+0x7c>
    581a:	2a 81       	ldd	r18, Y+2	; 0x02
    581c:	3b 81       	ldd	r19, Y+3	; 0x03
    581e:	23 30       	cpi	r18, 0x03	; 3
    5820:	31 05       	cpc	r19, r1
    5822:	0c f5       	brge	.+66     	; 0x5866 <APP_voidHomeControl+0x82>
    5824:	8a 81       	ldd	r24, Y+2	; 0x02
    5826:	9b 81       	ldd	r25, Y+3	; 0x03
    5828:	81 30       	cpi	r24, 0x01	; 1
    582a:	91 05       	cpc	r25, r1
    582c:	b1 f0       	breq	.+44     	; 0x585a <APP_voidHomeControl+0x76>
    582e:	2c c0       	rjmp	.+88     	; 0x5888 <APP_voidHomeControl+0xa4>
    5830:	2a 81       	ldd	r18, Y+2	; 0x02
    5832:	3b 81       	ldd	r19, Y+3	; 0x03
    5834:	26 30       	cpi	r18, 0x06	; 6
    5836:	31 05       	cpc	r19, r1
    5838:	f9 f0       	breq	.+62     	; 0x5878 <APP_voidHomeControl+0x94>
    583a:	8a 81       	ldd	r24, Y+2	; 0x02
    583c:	9b 81       	ldd	r25, Y+3	; 0x03
    583e:	86 30       	cpi	r24, 0x06	; 6
    5840:	91 05       	cpc	r25, r1
    5842:	bc f0       	brlt	.+46     	; 0x5872 <APP_voidHomeControl+0x8e>
    5844:	2a 81       	ldd	r18, Y+2	; 0x02
    5846:	3b 81       	ldd	r19, Y+3	; 0x03
    5848:	27 30       	cpi	r18, 0x07	; 7
    584a:	31 05       	cpc	r19, r1
    584c:	c1 f0       	breq	.+48     	; 0x587e <APP_voidHomeControl+0x9a>
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	9b 81       	ldd	r25, Y+3	; 0x03
    5852:	88 30       	cpi	r24, 0x08	; 8
    5854:	91 05       	cpc	r25, r1
    5856:	b1 f0       	breq	.+44     	; 0x5884 <APP_voidHomeControl+0xa0>
    5858:	17 c0       	rjmp	.+46     	; 0x5888 <APP_voidHomeControl+0xa4>
	{
	case 1 : APP_voidTurn_OnLed();break;
    585a:	0e 94 4a 2c 	call	0x5894	; 0x5894 <APP_voidTurn_OnLed>
    585e:	14 c0       	rjmp	.+40     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 2 : APP_voidTurnOffLed();break;
    5860:	0e 94 6f 2c 	call	0x58de	; 0x58de <APP_voidTurnOffLed>
    5864:	11 c0       	rjmp	.+34     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 3 : APP_ControlLight();break;
    5866:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <APP_ControlLight>
    586a:	0e c0       	rjmp	.+28     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 4 : APP_voidOpenDoor();break;
    586c:	0e 94 94 2c 	call	0x5928	; 0x5928 <APP_voidOpenDoor>
    5870:	0b c0       	rjmp	.+22     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 5 : APP_voidCloseDoor();break;
    5872:	0e 94 ae 2c 	call	0x595c	; 0x595c <APP_voidCloseDoor>
    5876:	08 c0       	rjmp	.+16     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 6 : APP_OpenFan();break;
    5878:	0e 94 c8 2c 	call	0x5990	; 0x5990 <APP_OpenFan>
    587c:	05 c0       	rjmp	.+10     	; 0x5888 <APP_voidHomeControl+0xa4>
	case 7 : APP_CloseFan();break;
    587e:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <APP_CloseFan>
    5882:	02 c0       	rjmp	.+4      	; 0x5888 <APP_voidHomeControl+0xa4>
	case 8 :APP_ControlMotorSpeed();break;
    5884:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <APP_ControlMotorSpeed>
	}
}
    5888:	0f 90       	pop	r0
    588a:	0f 90       	pop	r0
    588c:	0f 90       	pop	r0
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	08 95       	ret

00005894 <APP_voidTurn_OnLed>:
void APP_voidTurn_OnLed(void)
{
    5894:	df 93       	push	r29
    5896:	cf 93       	push	r28
    5898:	cd b7       	in	r28, 0x3d	; 61
    589a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	61 e0       	ldi	r22, 0x01	; 1
    58a0:	41 e0       	ldi	r20, 0x01	; 1
    58a2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	62 e0       	ldi	r22, 0x02	; 2
    58aa:	41 e0       	ldi	r20, 0x01	; 1
    58ac:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    58b0:	80 e0       	ldi	r24, 0x00	; 0
    58b2:	63 e0       	ldi	r22, 0x03	; 3
    58b4:	41 e0       	ldi	r20, 0x01	; 1
    58b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    58ba:	80 e0       	ldi	r24, 0x00	; 0
    58bc:	64 e0       	ldi	r22, 0x04	; 4
    58be:	41 e0       	ldi	r20, 0x01	; 1
    58c0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    58c4:	80 e0       	ldi	r24, 0x00	; 0
    58c6:	65 e0       	ldi	r22, 0x05	; 5
    58c8:	41 e0       	ldi	r20, 0x01	; 1
    58ca:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
    58ce:	80 e0       	ldi	r24, 0x00	; 0
    58d0:	66 e0       	ldi	r22, 0x06	; 6
    58d2:	41 e0       	ldi	r20, 0x01	; 1
    58d4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
}
    58d8:	cf 91       	pop	r28
    58da:	df 91       	pop	r29
    58dc:	08 95       	ret

000058de <APP_voidTurnOffLed>:
void APP_voidTurnOffLed(void)
{
    58de:	df 93       	push	r29
    58e0:	cf 93       	push	r28
    58e2:	cd b7       	in	r28, 0x3d	; 61
    58e4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_LOW);
    58e6:	80 e0       	ldi	r24, 0x00	; 0
    58e8:	61 e0       	ldi	r22, 0x01	; 1
    58ea:	40 e0       	ldi	r20, 0x00	; 0
    58ec:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_LOW);
    58f0:	80 e0       	ldi	r24, 0x00	; 0
    58f2:	62 e0       	ldi	r22, 0x02	; 2
    58f4:	40 e0       	ldi	r20, 0x00	; 0
    58f6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_LOW);
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	63 e0       	ldi	r22, 0x03	; 3
    58fe:	40 e0       	ldi	r20, 0x00	; 0
    5900:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_LOW);
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	64 e0       	ldi	r22, 0x04	; 4
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	65 e0       	ldi	r22, 0x05	; 5
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
    5918:	80 e0       	ldi	r24, 0x00	; 0
    591a:	66 e0       	ldi	r22, 0x06	; 6
    591c:	40 e0       	ldi	r20, 0x00	; 0
    591e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
}
    5922:	cf 91       	pop	r28
    5924:	df 91       	pop	r29
    5926:	08 95       	ret

00005928 <APP_voidOpenDoor>:
void APP_voidOpenDoor(void)
{
    5928:	df 93       	push	r29
    592a:	cf 93       	push	r28
    592c:	0f 92       	push	r0
    592e:	cd b7       	in	r28, 0x3d	; 61
    5930:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8Counter = 0;
    5932:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Counter = 2;Local_u8Counter<13;Local_u8Counter++)
    5934:	82 e0       	ldi	r24, 0x02	; 2
    5936:	89 83       	std	Y+1, r24	; 0x01
    5938:	0a c0       	rjmp	.+20     	; 0x594e <APP_voidOpenDoor+0x26>
	{
	    PWM_voidSetFrequency_SetDutyCycle(50,Local_u8Counter);
    593a:	62 e3       	ldi	r22, 0x32	; 50
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	49 81       	ldd	r20, Y+1	; 0x01
    5944:	0e 94 db 10 	call	0x21b6	; 0x21b6 <PWM_voidSetFrequency_SetDutyCycle>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
}
void APP_voidOpenDoor(void)
{
	uint8 Local_u8Counter = 0;
	for(Local_u8Counter = 2;Local_u8Counter<13;Local_u8Counter++)
    5948:	89 81       	ldd	r24, Y+1	; 0x01
    594a:	8f 5f       	subi	r24, 0xFF	; 255
    594c:	89 83       	std	Y+1, r24	; 0x01
    594e:	89 81       	ldd	r24, Y+1	; 0x01
    5950:	8d 30       	cpi	r24, 0x0D	; 13
    5952:	98 f3       	brcs	.-26     	; 0x593a <APP_voidOpenDoor+0x12>
	{
	    PWM_voidSetFrequency_SetDutyCycle(50,Local_u8Counter);
	}
}
    5954:	0f 90       	pop	r0
    5956:	cf 91       	pop	r28
    5958:	df 91       	pop	r29
    595a:	08 95       	ret

0000595c <APP_voidCloseDoor>:
void APP_voidCloseDoor(void)
{
    595c:	df 93       	push	r29
    595e:	cf 93       	push	r28
    5960:	0f 92       	push	r0
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8Counter = 0;
    5966:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Counter = 12;Local_u8Counter>1;Local_u8Counter--)
    5968:	8c e0       	ldi	r24, 0x0C	; 12
    596a:	89 83       	std	Y+1, r24	; 0x01
    596c:	0a c0       	rjmp	.+20     	; 0x5982 <APP_voidCloseDoor+0x26>
	{
	    PWM_voidSetFrequency_SetDutyCycle(50,Local_u8Counter);
    596e:	62 e3       	ldi	r22, 0x32	; 50
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	49 81       	ldd	r20, Y+1	; 0x01
    5978:	0e 94 db 10 	call	0x21b6	; 0x21b6 <PWM_voidSetFrequency_SetDutyCycle>
	}
}
void APP_voidCloseDoor(void)
{
	uint8 Local_u8Counter = 0;
	for(Local_u8Counter = 12;Local_u8Counter>1;Local_u8Counter--)
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	81 50       	subi	r24, 0x01	; 1
    5980:	89 83       	std	Y+1, r24	; 0x01
    5982:	89 81       	ldd	r24, Y+1	; 0x01
    5984:	82 30       	cpi	r24, 0x02	; 2
    5986:	98 f7       	brcc	.-26     	; 0x596e <APP_voidCloseDoor+0x12>
	{
	    PWM_voidSetFrequency_SetDutyCycle(50,Local_u8Counter);
	}
}
    5988:	0f 90       	pop	r0
    598a:	cf 91       	pop	r28
    598c:	df 91       	pop	r29
    598e:	08 95       	ret

00005990 <APP_OpenFan>:
void APP_OpenFan(void)
{
    5990:	df 93       	push	r29
    5992:	cf 93       	push	r28
    5994:	cd b7       	in	r28, 0x3d	; 61
    5996:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_HIGH);
    5998:	83 e0       	ldi	r24, 0x03	; 3
    599a:	67 e0       	ldi	r22, 0x07	; 7
    599c:	41 e0       	ldi	r20, 0x01	; 1
    599e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
}
    59a2:	cf 91       	pop	r28
    59a4:	df 91       	pop	r29
    59a6:	08 95       	ret

000059a8 <APP_CloseFan>:
void APP_CloseFan(void)
{
    59a8:	df 93       	push	r29
    59aa:	cf 93       	push	r28
    59ac:	cd b7       	in	r28, 0x3d	; 61
    59ae:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_LOW);
    59b0:	83 e0       	ldi	r24, 0x03	; 3
    59b2:	67 e0       	ldi	r22, 0x07	; 7
    59b4:	40 e0       	ldi	r20, 0x00	; 0
    59b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
	TIMER2_voidSet_FastPwmMode(NORMAL_PWM);
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	0e 94 79 18 	call	0x30f2	; 0x30f2 <TIMER2_voidSet_FastPwmMode>
}
    59c0:	cf 91       	pop	r28
    59c2:	df 91       	pop	r29
    59c4:	08 95       	ret

000059c6 <APP_ControlLight>:
void APP_ControlLight(void)
{
    59c6:	df 93       	push	r29
    59c8:	cf 93       	push	r28
    59ca:	00 d0       	rcall	.+0      	; 0x59cc <APP_ControlLight+0x6>
    59cc:	00 d0       	rcall	.+0      	; 0x59ce <APP_ControlLight+0x8>
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
    uint16 Local_u16ADCResult = 0;
    59d2:	1c 82       	std	Y+4, r1	; 0x04
    59d4:	1b 82       	std	Y+3, r1	; 0x03
    uint8  Local_u8Choose=0,Local_u8Reciving_Finish = 0;
    59d6:	1a 82       	std	Y+2, r1	; 0x02
    59d8:	19 82       	std	Y+1, r1	; 0x01

    ADC_voidInit();
    59da:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
    59de:	a7 c0       	rjmp	.+334    	; 0x5b2e <APP_ControlLight+0x168>
    while(Local_u8Choose != 9)
    {
		Local_u8Reciving_Finish = UART_voidRecieveBufferSynch(APP_RecievedDataArr,27);
    59e0:	8c e4       	ldi	r24, 0x4C	; 76
    59e2:	92 e0       	ldi	r25, 0x02	; 2
    59e4:	6b e1       	ldi	r22, 0x1B	; 27
    59e6:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    59ea:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Choose = APP_u8ChoiceChecking(APP_RecievedDataArr,27);
    59ec:	8c e4       	ldi	r24, 0x4C	; 76
    59ee:	92 e0       	ldi	r25, 0x02	; 2
    59f0:	6b e1       	ldi	r22, 0x1B	; 27
    59f2:	0e 94 3f 2a 	call	0x547e	; 0x547e <APP_u8ChoiceChecking>
    59f6:	8a 83       	std	Y+2, r24	; 0x02
        ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADCResult);
    59f8:	9e 01       	movw	r18, r28
    59fa:	2d 5f       	subi	r18, 0xFD	; 253
    59fc:	3f 4f       	sbci	r19, 0xFF	; 255
    59fe:	80 e0       	ldi	r24, 0x00	; 0
    5a00:	b9 01       	movw	r22, r18
    5a02:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
        if(Local_u16ADCResult <= 110)
    5a06:	8b 81       	ldd	r24, Y+3	; 0x03
    5a08:	9c 81       	ldd	r25, Y+4	; 0x04
    5a0a:	8f 36       	cpi	r24, 0x6F	; 111
    5a0c:	91 05       	cpc	r25, r1
    5a0e:	f8 f4       	brcc	.+62     	; 0x5a4e <APP_ControlLight+0x88>
        {
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	61 e0       	ldi	r22, 0x01	; 1
    5a14:	41 e0       	ldi	r20, 0x01	; 1
    5a16:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	62 e0       	ldi	r22, 0x02	; 2
    5a1e:	41 e0       	ldi	r20, 0x01	; 1
    5a20:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	63 e0       	ldi	r22, 0x03	; 3
    5a28:	41 e0       	ldi	r20, 0x01	; 1
    5a2a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	64 e0       	ldi	r22, 0x04	; 4
    5a32:	41 e0       	ldi	r20, 0x01	; 1
    5a34:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    5a38:	80 e0       	ldi	r24, 0x00	; 0
    5a3a:	65 e0       	ldi	r22, 0x05	; 5
    5a3c:	41 e0       	ldi	r20, 0x01	; 1
    5a3e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
    5a42:	80 e0       	ldi	r24, 0x00	; 0
    5a44:	66 e0       	ldi	r22, 0x06	; 6
    5a46:	41 e0       	ldi	r20, 0x01	; 1
    5a48:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
    5a4c:	70 c0       	rjmp	.+224    	; 0x5b2e <APP_ControlLight+0x168>
        }
        else if (Local_u16ADCResult > 110 && Local_u16ADCResult <= 115)
    5a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a50:	9c 81       	ldd	r25, Y+4	; 0x04
    5a52:	8f 36       	cpi	r24, 0x6F	; 111
    5a54:	91 05       	cpc	r25, r1
    5a56:	20 f1       	brcs	.+72     	; 0x5aa0 <APP_ControlLight+0xda>
    5a58:	8b 81       	ldd	r24, Y+3	; 0x03
    5a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a5c:	84 37       	cpi	r24, 0x74	; 116
    5a5e:	91 05       	cpc	r25, r1
    5a60:	f8 f4       	brcc	.+62     	; 0x5aa0 <APP_ControlLight+0xda>
        {
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	61 e0       	ldi	r22, 0x01	; 1
    5a66:	41 e0       	ldi	r20, 0x01	; 1
    5a68:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	62 e0       	ldi	r22, 0x02	; 2
    5a70:	41 e0       	ldi	r20, 0x01	; 1
    5a72:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	63 e0       	ldi	r22, 0x03	; 3
    5a7a:	41 e0       	ldi	r20, 0x01	; 1
    5a7c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    5a80:	80 e0       	ldi	r24, 0x00	; 0
    5a82:	64 e0       	ldi	r22, 0x04	; 4
    5a84:	41 e0       	ldi	r20, 0x01	; 1
    5a86:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	65 e0       	ldi	r22, 0x05	; 5
    5a8e:	40 e0       	ldi	r20, 0x00	; 0
    5a90:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	66 e0       	ldi	r22, 0x06	; 6
    5a98:	40 e0       	ldi	r20, 0x00	; 0
    5a9a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
    5a9e:	47 c0       	rjmp	.+142    	; 0x5b2e <APP_ControlLight+0x168>
        }
        else if (Local_u16ADCResult >115 && Local_u16ADCResult <= 125)
    5aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    5aa4:	84 37       	cpi	r24, 0x74	; 116
    5aa6:	91 05       	cpc	r25, r1
    5aa8:	20 f1       	brcs	.+72     	; 0x5af2 <APP_ControlLight+0x12c>
    5aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    5aac:	9c 81       	ldd	r25, Y+4	; 0x04
    5aae:	8e 37       	cpi	r24, 0x7E	; 126
    5ab0:	91 05       	cpc	r25, r1
    5ab2:	f8 f4       	brcc	.+62     	; 0x5af2 <APP_ControlLight+0x12c>
        {
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	61 e0       	ldi	r22, 0x01	; 1
    5ab8:	41 e0       	ldi	r20, 0x01	; 1
    5aba:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    5abe:	80 e0       	ldi	r24, 0x00	; 0
    5ac0:	62 e0       	ldi	r22, 0x02	; 2
    5ac2:	41 e0       	ldi	r20, 0x01	; 1
    5ac4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_LOW);
    5ac8:	80 e0       	ldi	r24, 0x00	; 0
    5aca:	63 e0       	ldi	r22, 0x03	; 3
    5acc:	40 e0       	ldi	r20, 0x00	; 0
    5ace:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_LOW);
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	64 e0       	ldi	r22, 0x04	; 4
    5ad6:	40 e0       	ldi	r20, 0x00	; 0
    5ad8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    5adc:	80 e0       	ldi	r24, 0x00	; 0
    5ade:	65 e0       	ldi	r22, 0x05	; 5
    5ae0:	40 e0       	ldi	r20, 0x00	; 0
    5ae2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	66 e0       	ldi	r22, 0x06	; 6
    5aea:	40 e0       	ldi	r20, 0x00	; 0
    5aec:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
    5af0:	1e c0       	rjmp	.+60     	; 0x5b2e <APP_ControlLight+0x168>
        }
        else
        {
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_LOW);
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	61 e0       	ldi	r22, 0x01	; 1
    5af6:	40 e0       	ldi	r20, 0x00	; 0
    5af8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_LOW);
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	62 e0       	ldi	r22, 0x02	; 2
    5b00:	40 e0       	ldi	r20, 0x00	; 0
    5b02:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_LOW);
    5b06:	80 e0       	ldi	r24, 0x00	; 0
    5b08:	63 e0       	ldi	r22, 0x03	; 3
    5b0a:	40 e0       	ldi	r20, 0x00	; 0
    5b0c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_LOW);
    5b10:	80 e0       	ldi	r24, 0x00	; 0
    5b12:	64 e0       	ldi	r22, 0x04	; 4
    5b14:	40 e0       	ldi	r20, 0x00	; 0
    5b16:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    5b1a:	80 e0       	ldi	r24, 0x00	; 0
    5b1c:	65 e0       	ldi	r22, 0x05	; 5
    5b1e:	40 e0       	ldi	r20, 0x00	; 0
    5b20:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
    5b24:	80 e0       	ldi	r24, 0x00	; 0
    5b26:	66 e0       	ldi	r22, 0x06	; 6
    5b28:	40 e0       	ldi	r20, 0x00	; 0
    5b2a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <DIO_u8SetPinValue>
{
    uint16 Local_u16ADCResult = 0;
    uint8  Local_u8Choose=0,Local_u8Reciving_Finish = 0;

    ADC_voidInit();
    while(Local_u8Choose != 9)
    5b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b30:	89 30       	cpi	r24, 0x09	; 9
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <APP_ControlLight+0x170>
    5b34:	55 cf       	rjmp	.-342    	; 0x59e0 <APP_ControlLight+0x1a>
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
        	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_LOW);
        }
    }

}
    5b36:	0f 90       	pop	r0
    5b38:	0f 90       	pop	r0
    5b3a:	0f 90       	pop	r0
    5b3c:	0f 90       	pop	r0
    5b3e:	cf 91       	pop	r28
    5b40:	df 91       	pop	r29
    5b42:	08 95       	ret

00005b44 <APP_ControlMotorSpeed>:
void APP_ControlMotorSpeed(void)
{
    5b44:	df 93       	push	r29
    5b46:	cf 93       	push	r28
    5b48:	cd b7       	in	r28, 0x3d	; 61
    5b4a:	de b7       	in	r29, 0x3e	; 62
    5b4c:	2a 97       	sbiw	r28, 0x0a	; 10
    5b4e:	0f b6       	in	r0, 0x3f	; 63
    5b50:	f8 94       	cli
    5b52:	de bf       	out	0x3e, r29	; 62
    5b54:	0f be       	out	0x3f, r0	; 63
    5b56:	cd bf       	out	0x3d, r28	; 61
	static uint16 Local_u16Diastance=0;
    static uint32 Local_u32OnTime=0;
    static uint32 Local_u32PeriodTime=0;
    uint8 Local_u8Choose=0,Local_u8Reciving_Finish = 0;
    5b58:	1a 82       	std	Y+2, r1	; 0x02
    5b5a:	19 82       	std	Y+1, r1	; 0x01
	TIMER0_2_Cfg_t Timer2;
	TIMER0_2_Cfg_t Timer0;
	Timer2.WFG_MODE = FAST_PWM;
    5b5c:	82 e0       	ldi	r24, 0x02	; 2
    5b5e:	8b 83       	std	Y+3, r24	; 0x03
	Timer2.FASTPWM_MODE = SET_TOP_CLR_COMP;
    5b60:	82 e0       	ldi	r24, 0x02	; 2
    5b62:	8d 83       	std	Y+5, r24	; 0x05
	Timer0.WFG_MODE = FAST_PWM;
    5b64:	82 e0       	ldi	r24, 0x02	; 2
    5b66:	8f 83       	std	Y+7, r24	; 0x07
	Timer0.FASTPWM_MODE = SET_TOP_CLR_COMP;
    5b68:	82 e0       	ldi	r24, 0x02	; 2
    5b6a:	89 87       	std	Y+9, r24	; 0x09
	TIMER2_u8Init(&Timer2);
    5b6c:	ce 01       	movw	r24, r28
    5b6e:	03 96       	adiw	r24, 0x03	; 3
    5b70:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <TIMER2_u8Init>
	TIMER0_u8Init(&Timer0);
    5b74:	ce 01       	movw	r24, r28
    5b76:	07 96       	adiw	r24, 0x07	; 7
    5b78:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TIMER0_u8Init>
	TIMER0_void_Set_CompValue(63);
    5b7c:	8f e3       	ldi	r24, 0x3F	; 63
    5b7e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <TIMER0_void_Set_CompValue>
    5b82:	66 c0       	rjmp	.+204    	; 0x5c50 <APP_ControlMotorSpeed+0x10c>
    while(Local_u8Choose != 9)
    {
	    Local_u8Reciving_Finish = UART_voidRecieveBufferSynch(APP_RecievedDataArr,27);
    5b84:	8c e4       	ldi	r24, 0x4C	; 76
    5b86:	92 e0       	ldi	r25, 0x02	; 2
    5b88:	6b e1       	ldi	r22, 0x1B	; 27
    5b8a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <UART_voidRecieveBufferSynch>
    5b8e:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Choose = APP_u8ChoiceChecking(APP_RecievedDataArr,27);
    5b90:	8c e4       	ldi	r24, 0x4C	; 76
    5b92:	92 e0       	ldi	r25, 0x02	; 2
    5b94:	6b e1       	ldi	r22, 0x1B	; 27
    5b96:	0e 94 3f 2a 	call	0x547e	; 0x547e <APP_u8ChoiceChecking>
    5b9a:	8a 83       	std	Y+2, r24	; 0x02
    	PWM_u8Measure_Frequency_DutyCycle(&Local_u32OnTime,&Local_u32PeriodTime);
    5b9c:	8b e6       	ldi	r24, 0x6B	; 107
    5b9e:	92 e0       	ldi	r25, 0x02	; 2
    5ba0:	27 e6       	ldi	r18, 0x67	; 103
    5ba2:	32 e0       	ldi	r19, 0x02	; 2
    5ba4:	b9 01       	movw	r22, r18
    5ba6:	0e 94 b2 11 	call	0x2364	; 0x2364 <PWM_u8Measure_Frequency_DutyCycle>
        Local_u16Diastance = (uint16)(340u * Local_u32OnTime / 200u);
    5baa:	80 91 6b 02 	lds	r24, 0x026B
    5bae:	90 91 6c 02 	lds	r25, 0x026C
    5bb2:	a0 91 6d 02 	lds	r26, 0x026D
    5bb6:	b0 91 6e 02 	lds	r27, 0x026E
    5bba:	24 e5       	ldi	r18, 0x54	; 84
    5bbc:	31 e0       	ldi	r19, 0x01	; 1
    5bbe:	40 e0       	ldi	r20, 0x00	; 0
    5bc0:	50 e0       	ldi	r21, 0x00	; 0
    5bc2:	bc 01       	movw	r22, r24
    5bc4:	cd 01       	movw	r24, r26
    5bc6:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <__mulsi3>
    5bca:	dc 01       	movw	r26, r24
    5bcc:	cb 01       	movw	r24, r22
    5bce:	28 ec       	ldi	r18, 0xC8	; 200
    5bd0:	30 e0       	ldi	r19, 0x00	; 0
    5bd2:	40 e0       	ldi	r20, 0x00	; 0
    5bd4:	50 e0       	ldi	r21, 0x00	; 0
    5bd6:	bc 01       	movw	r22, r24
    5bd8:	cd 01       	movw	r24, r26
    5bda:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__udivmodsi4>
    5bde:	da 01       	movw	r26, r20
    5be0:	c9 01       	movw	r24, r18
    5be2:	90 93 70 02 	sts	0x0270, r25
    5be6:	80 93 6f 02 	sts	0x026F, r24
        if( Local_u16Diastance >= 1000 && Local_u16Diastance <2000)
    5bea:	80 91 6f 02 	lds	r24, 0x026F
    5bee:	90 91 70 02 	lds	r25, 0x0270
    5bf2:	23 e0       	ldi	r18, 0x03	; 3
    5bf4:	88 3e       	cpi	r24, 0xE8	; 232
    5bf6:	92 07       	cpc	r25, r18
    5bf8:	60 f0       	brcs	.+24     	; 0x5c12 <APP_ControlMotorSpeed+0xce>
    5bfa:	80 91 6f 02 	lds	r24, 0x026F
    5bfe:	90 91 70 02 	lds	r25, 0x0270
    5c02:	27 e0       	ldi	r18, 0x07	; 7
    5c04:	80 3d       	cpi	r24, 0xD0	; 208
    5c06:	92 07       	cpc	r25, r18
    5c08:	20 f4       	brcc	.+8      	; 0x5c12 <APP_ControlMotorSpeed+0xce>
        {
        	TIMER2_void_Set_CompValue(63);
    5c0a:	8f e3       	ldi	r24, 0x3F	; 63
    5c0c:	0e 94 04 18 	call	0x3008	; 0x3008 <TIMER2_void_Set_CompValue>
    5c10:	1f c0       	rjmp	.+62     	; 0x5c50 <APP_ControlMotorSpeed+0x10c>
        }
        else if (Local_u16Diastance < 1000 && Local_u16Diastance >= 500)
    5c12:	80 91 6f 02 	lds	r24, 0x026F
    5c16:	90 91 70 02 	lds	r25, 0x0270
    5c1a:	23 e0       	ldi	r18, 0x03	; 3
    5c1c:	88 3e       	cpi	r24, 0xE8	; 232
    5c1e:	92 07       	cpc	r25, r18
    5c20:	60 f4       	brcc	.+24     	; 0x5c3a <APP_ControlMotorSpeed+0xf6>
    5c22:	80 91 6f 02 	lds	r24, 0x026F
    5c26:	90 91 70 02 	lds	r25, 0x0270
    5c2a:	21 e0       	ldi	r18, 0x01	; 1
    5c2c:	84 3f       	cpi	r24, 0xF4	; 244
    5c2e:	92 07       	cpc	r25, r18
    5c30:	20 f0       	brcs	.+8      	; 0x5c3a <APP_ControlMotorSpeed+0xf6>
        {
        	TIMER2_void_Set_CompValue(125);
    5c32:	8d e7       	ldi	r24, 0x7D	; 125
    5c34:	0e 94 04 18 	call	0x3008	; 0x3008 <TIMER2_void_Set_CompValue>
    5c38:	0b c0       	rjmp	.+22     	; 0x5c50 <APP_ControlMotorSpeed+0x10c>
        }
        else if (Local_u16Diastance <500 )
    5c3a:	80 91 6f 02 	lds	r24, 0x026F
    5c3e:	90 91 70 02 	lds	r25, 0x0270
    5c42:	21 e0       	ldi	r18, 0x01	; 1
    5c44:	84 3f       	cpi	r24, 0xF4	; 244
    5c46:	92 07       	cpc	r25, r18
    5c48:	18 f4       	brcc	.+6      	; 0x5c50 <APP_ControlMotorSpeed+0x10c>
        {
        	TIMER2_void_Set_CompValue(200);
    5c4a:	88 ec       	ldi	r24, 0xC8	; 200
    5c4c:	0e 94 04 18 	call	0x3008	; 0x3008 <TIMER2_void_Set_CompValue>
	Timer0.WFG_MODE = FAST_PWM;
	Timer0.FASTPWM_MODE = SET_TOP_CLR_COMP;
	TIMER2_u8Init(&Timer2);
	TIMER0_u8Init(&Timer0);
	TIMER0_void_Set_CompValue(63);
    while(Local_u8Choose != 9)
    5c50:	8a 81       	ldd	r24, Y+2	; 0x02
    5c52:	89 30       	cpi	r24, 0x09	; 9
    5c54:	09 f0       	breq	.+2      	; 0x5c58 <APP_ControlMotorSpeed+0x114>
    5c56:	96 cf       	rjmp	.-212    	; 0x5b84 <APP_ControlMotorSpeed+0x40>
        else if (Local_u16Diastance <500 )
        {
        	TIMER2_void_Set_CompValue(200);
        }
    }
}
    5c58:	2a 96       	adiw	r28, 0x0a	; 10
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	cf 91       	pop	r28
    5c66:	df 91       	pop	r29
    5c68:	08 95       	ret

00005c6a <MAP>:
sint32 MAP(sint32 InputRangeMin,sint32 InputRangeMax,sint32 OutputRangeMin,sint32 OutputRangeMax,sint32 InputValu)
{
    5c6a:	af 92       	push	r10
    5c6c:	bf 92       	push	r11
    5c6e:	cf 92       	push	r12
    5c70:	df 92       	push	r13
    5c72:	ef 92       	push	r14
    5c74:	ff 92       	push	r15
    5c76:	0f 93       	push	r16
    5c78:	1f 93       	push	r17
    5c7a:	df 93       	push	r29
    5c7c:	cf 93       	push	r28
    5c7e:	cd b7       	in	r28, 0x3d	; 61
    5c80:	de b7       	in	r29, 0x3e	; 62
    5c82:	64 97       	sbiw	r28, 0x14	; 20
    5c84:	0f b6       	in	r0, 0x3f	; 63
    5c86:	f8 94       	cli
    5c88:	de bf       	out	0x3e, r29	; 62
    5c8a:	0f be       	out	0x3f, r0	; 63
    5c8c:	cd bf       	out	0x3d, r28	; 61
    5c8e:	6d 83       	std	Y+5, r22	; 0x05
    5c90:	7e 83       	std	Y+6, r23	; 0x06
    5c92:	8f 83       	std	Y+7, r24	; 0x07
    5c94:	98 87       	std	Y+8, r25	; 0x08
    5c96:	29 87       	std	Y+9, r18	; 0x09
    5c98:	3a 87       	std	Y+10, r19	; 0x0a
    5c9a:	4b 87       	std	Y+11, r20	; 0x0b
    5c9c:	5c 87       	std	Y+12, r21	; 0x0c
    5c9e:	ed 86       	std	Y+13, r14	; 0x0d
    5ca0:	fe 86       	std	Y+14, r15	; 0x0e
    5ca2:	0f 87       	std	Y+15, r16	; 0x0f
    5ca4:	18 8b       	std	Y+16, r17	; 0x10
    5ca6:	a9 8a       	std	Y+17, r10	; 0x11
    5ca8:	ba 8a       	std	Y+18, r11	; 0x12
    5caa:	cb 8a       	std	Y+19, r12	; 0x13
    5cac:	dc 8a       	std	Y+20, r13	; 0x14
	sint32 Local_Output=0;
    5cae:	19 82       	std	Y+1, r1	; 0x01
    5cb0:	1a 82       	std	Y+2, r1	; 0x02
    5cb2:	1b 82       	std	Y+3, r1	; 0x03
    5cb4:	1c 82       	std	Y+4, r1	; 0x04
	Local_Output=((OutputRangeMax-OutputRangeMin)*(InputValu-InputRangeMax))/(InputRangeMin-InputRangeMax);
    5cb6:	29 89       	ldd	r18, Y+17	; 0x11
    5cb8:	3a 89       	ldd	r19, Y+18	; 0x12
    5cba:	4b 89       	ldd	r20, Y+19	; 0x13
    5cbc:	5c 89       	ldd	r21, Y+20	; 0x14
    5cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cc2:	af 85       	ldd	r26, Y+15	; 0x0f
    5cc4:	b8 89       	ldd	r27, Y+16	; 0x10
    5cc6:	79 01       	movw	r14, r18
    5cc8:	8a 01       	movw	r16, r20
    5cca:	e8 1a       	sub	r14, r24
    5ccc:	f9 0a       	sbc	r15, r25
    5cce:	0a 0b       	sbc	r16, r26
    5cd0:	1b 0b       	sbc	r17, r27
    5cd2:	29 a1       	ldd	r18, Y+33	; 0x21
    5cd4:	3a a1       	ldd	r19, Y+34	; 0x22
    5cd6:	4b a1       	ldd	r20, Y+35	; 0x23
    5cd8:	5c a1       	ldd	r21, Y+36	; 0x24
    5cda:	89 85       	ldd	r24, Y+9	; 0x09
    5cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cde:	ab 85       	ldd	r26, Y+11	; 0x0b
    5ce0:	bc 85       	ldd	r27, Y+12	; 0x0c
    5ce2:	28 1b       	sub	r18, r24
    5ce4:	39 0b       	sbc	r19, r25
    5ce6:	4a 0b       	sbc	r20, r26
    5ce8:	5b 0b       	sbc	r21, r27
    5cea:	c8 01       	movw	r24, r16
    5cec:	b7 01       	movw	r22, r14
    5cee:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <__mulsi3>
    5cf2:	7b 01       	movw	r14, r22
    5cf4:	8c 01       	movw	r16, r24
    5cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    5cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    5cfa:	4f 81       	ldd	r20, Y+7	; 0x07
    5cfc:	58 85       	ldd	r21, Y+8	; 0x08
    5cfe:	89 85       	ldd	r24, Y+9	; 0x09
    5d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d02:	ab 85       	ldd	r26, Y+11	; 0x0b
    5d04:	bc 85       	ldd	r27, Y+12	; 0x0c
    5d06:	28 1b       	sub	r18, r24
    5d08:	39 0b       	sbc	r19, r25
    5d0a:	4a 0b       	sbc	r20, r26
    5d0c:	5b 0b       	sbc	r21, r27
    5d0e:	c8 01       	movw	r24, r16
    5d10:	b7 01       	movw	r22, r14
    5d12:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <__divmodsi4>
    5d16:	da 01       	movw	r26, r20
    5d18:	c9 01       	movw	r24, r18
    5d1a:	89 83       	std	Y+1, r24	; 0x01
    5d1c:	9a 83       	std	Y+2, r25	; 0x02
    5d1e:	ab 83       	std	Y+3, r26	; 0x03
    5d20:	bc 83       	std	Y+4, r27	; 0x04
	return Local_Output;
    5d22:	89 81       	ldd	r24, Y+1	; 0x01
    5d24:	9a 81       	ldd	r25, Y+2	; 0x02
    5d26:	ab 81       	ldd	r26, Y+3	; 0x03
    5d28:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5d2a:	bc 01       	movw	r22, r24
    5d2c:	cd 01       	movw	r24, r26
    5d2e:	64 96       	adiw	r28, 0x14	; 20
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	cf 91       	pop	r28
    5d3c:	df 91       	pop	r29
    5d3e:	1f 91       	pop	r17
    5d40:	0f 91       	pop	r16
    5d42:	ff 90       	pop	r15
    5d44:	ef 90       	pop	r14
    5d46:	df 90       	pop	r13
    5d48:	cf 90       	pop	r12
    5d4a:	bf 90       	pop	r11
    5d4c:	af 90       	pop	r10
    5d4e:	08 95       	ret

00005d50 <__mulsi3>:
    5d50:	62 9f       	mul	r22, r18
    5d52:	d0 01       	movw	r26, r0
    5d54:	73 9f       	mul	r23, r19
    5d56:	f0 01       	movw	r30, r0
    5d58:	82 9f       	mul	r24, r18
    5d5a:	e0 0d       	add	r30, r0
    5d5c:	f1 1d       	adc	r31, r1
    5d5e:	64 9f       	mul	r22, r20
    5d60:	e0 0d       	add	r30, r0
    5d62:	f1 1d       	adc	r31, r1
    5d64:	92 9f       	mul	r25, r18
    5d66:	f0 0d       	add	r31, r0
    5d68:	83 9f       	mul	r24, r19
    5d6a:	f0 0d       	add	r31, r0
    5d6c:	74 9f       	mul	r23, r20
    5d6e:	f0 0d       	add	r31, r0
    5d70:	65 9f       	mul	r22, r21
    5d72:	f0 0d       	add	r31, r0
    5d74:	99 27       	eor	r25, r25
    5d76:	72 9f       	mul	r23, r18
    5d78:	b0 0d       	add	r27, r0
    5d7a:	e1 1d       	adc	r30, r1
    5d7c:	f9 1f       	adc	r31, r25
    5d7e:	63 9f       	mul	r22, r19
    5d80:	b0 0d       	add	r27, r0
    5d82:	e1 1d       	adc	r30, r1
    5d84:	f9 1f       	adc	r31, r25
    5d86:	bd 01       	movw	r22, r26
    5d88:	cf 01       	movw	r24, r30
    5d8a:	11 24       	eor	r1, r1
    5d8c:	08 95       	ret

00005d8e <__udivmodsi4>:
    5d8e:	a1 e2       	ldi	r26, 0x21	; 33
    5d90:	1a 2e       	mov	r1, r26
    5d92:	aa 1b       	sub	r26, r26
    5d94:	bb 1b       	sub	r27, r27
    5d96:	fd 01       	movw	r30, r26
    5d98:	0d c0       	rjmp	.+26     	; 0x5db4 <__udivmodsi4_ep>

00005d9a <__udivmodsi4_loop>:
    5d9a:	aa 1f       	adc	r26, r26
    5d9c:	bb 1f       	adc	r27, r27
    5d9e:	ee 1f       	adc	r30, r30
    5da0:	ff 1f       	adc	r31, r31
    5da2:	a2 17       	cp	r26, r18
    5da4:	b3 07       	cpc	r27, r19
    5da6:	e4 07       	cpc	r30, r20
    5da8:	f5 07       	cpc	r31, r21
    5daa:	20 f0       	brcs	.+8      	; 0x5db4 <__udivmodsi4_ep>
    5dac:	a2 1b       	sub	r26, r18
    5dae:	b3 0b       	sbc	r27, r19
    5db0:	e4 0b       	sbc	r30, r20
    5db2:	f5 0b       	sbc	r31, r21

00005db4 <__udivmodsi4_ep>:
    5db4:	66 1f       	adc	r22, r22
    5db6:	77 1f       	adc	r23, r23
    5db8:	88 1f       	adc	r24, r24
    5dba:	99 1f       	adc	r25, r25
    5dbc:	1a 94       	dec	r1
    5dbe:	69 f7       	brne	.-38     	; 0x5d9a <__udivmodsi4_loop>
    5dc0:	60 95       	com	r22
    5dc2:	70 95       	com	r23
    5dc4:	80 95       	com	r24
    5dc6:	90 95       	com	r25
    5dc8:	9b 01       	movw	r18, r22
    5dca:	ac 01       	movw	r20, r24
    5dcc:	bd 01       	movw	r22, r26
    5dce:	cf 01       	movw	r24, r30
    5dd0:	08 95       	ret

00005dd2 <__divmodsi4>:
    5dd2:	97 fb       	bst	r25, 7
    5dd4:	09 2e       	mov	r0, r25
    5dd6:	05 26       	eor	r0, r21
    5dd8:	0e d0       	rcall	.+28     	; 0x5df6 <__divmodsi4_neg1>
    5dda:	57 fd       	sbrc	r21, 7
    5ddc:	04 d0       	rcall	.+8      	; 0x5de6 <__divmodsi4_neg2>
    5dde:	d7 df       	rcall	.-82     	; 0x5d8e <__udivmodsi4>
    5de0:	0a d0       	rcall	.+20     	; 0x5df6 <__divmodsi4_neg1>
    5de2:	00 1c       	adc	r0, r0
    5de4:	38 f4       	brcc	.+14     	; 0x5df4 <__divmodsi4_exit>

00005de6 <__divmodsi4_neg2>:
    5de6:	50 95       	com	r21
    5de8:	40 95       	com	r20
    5dea:	30 95       	com	r19
    5dec:	21 95       	neg	r18
    5dee:	3f 4f       	sbci	r19, 0xFF	; 255
    5df0:	4f 4f       	sbci	r20, 0xFF	; 255
    5df2:	5f 4f       	sbci	r21, 0xFF	; 255

00005df4 <__divmodsi4_exit>:
    5df4:	08 95       	ret

00005df6 <__divmodsi4_neg1>:
    5df6:	f6 f7       	brtc	.-4      	; 0x5df4 <__divmodsi4_exit>
    5df8:	90 95       	com	r25
    5dfa:	80 95       	com	r24
    5dfc:	70 95       	com	r23
    5dfe:	61 95       	neg	r22
    5e00:	7f 4f       	sbci	r23, 0xFF	; 255
    5e02:	8f 4f       	sbci	r24, 0xFF	; 255
    5e04:	9f 4f       	sbci	r25, 0xFF	; 255
    5e06:	08 95       	ret

00005e08 <__prologue_saves__>:
    5e08:	2f 92       	push	r2
    5e0a:	3f 92       	push	r3
    5e0c:	4f 92       	push	r4
    5e0e:	5f 92       	push	r5
    5e10:	6f 92       	push	r6
    5e12:	7f 92       	push	r7
    5e14:	8f 92       	push	r8
    5e16:	9f 92       	push	r9
    5e18:	af 92       	push	r10
    5e1a:	bf 92       	push	r11
    5e1c:	cf 92       	push	r12
    5e1e:	df 92       	push	r13
    5e20:	ef 92       	push	r14
    5e22:	ff 92       	push	r15
    5e24:	0f 93       	push	r16
    5e26:	1f 93       	push	r17
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	cd b7       	in	r28, 0x3d	; 61
    5e2e:	de b7       	in	r29, 0x3e	; 62
    5e30:	ca 1b       	sub	r28, r26
    5e32:	db 0b       	sbc	r29, r27
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	09 94       	ijmp

00005e40 <__epilogue_restores__>:
    5e40:	2a 88       	ldd	r2, Y+18	; 0x12
    5e42:	39 88       	ldd	r3, Y+17	; 0x11
    5e44:	48 88       	ldd	r4, Y+16	; 0x10
    5e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e52:	b9 84       	ldd	r11, Y+9	; 0x09
    5e54:	c8 84       	ldd	r12, Y+8	; 0x08
    5e56:	df 80       	ldd	r13, Y+7	; 0x07
    5e58:	ee 80       	ldd	r14, Y+6	; 0x06
    5e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    5e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    5e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    5e60:	aa 81       	ldd	r26, Y+2	; 0x02
    5e62:	b9 81       	ldd	r27, Y+1	; 0x01
    5e64:	ce 0f       	add	r28, r30
    5e66:	d1 1d       	adc	r29, r1
    5e68:	0f b6       	in	r0, 0x3f	; 63
    5e6a:	f8 94       	cli
    5e6c:	de bf       	out	0x3e, r29	; 62
    5e6e:	0f be       	out	0x3f, r0	; 63
    5e70:	cd bf       	out	0x3d, r28	; 61
    5e72:	ed 01       	movw	r28, r26
    5e74:	08 95       	ret

00005e76 <_exit>:
    5e76:	f8 94       	cli

00005e78 <__stop_program>:
    5e78:	ff cf       	rjmp	.-2      	; 0x5e78 <__stop_program>
